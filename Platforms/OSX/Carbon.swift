
typealias CalibrateEventProcPtr = @convention(c) (UnsafeMutablePointer<EventRecord>) -> Void
typealias CalibrateEventUPP = CalibrateEventProcPtr
var kCalibratorNamePrefix: Int { get }
struct CalibratorInfo {
  var dataSize: UInt32
  var displayID: CMDisplayIDType
  var profileLocationSize: UInt32
  var profileLocationPtr: UnsafeMutablePointer<CMProfileLocation>
  var eventProc: CalibrateEventUPP!
  var isGood: DarwinBoolean
  init()
  init(dataSize: UInt32, displayID: CMDisplayIDType, profileLocationSize: UInt32, profileLocationPtr: UnsafeMutablePointer<CMProfileLocation>, eventProc: CalibrateEventUPP!, isGood: DarwinBoolean)
}
typealias CanCalibrateProcPtr = @convention(c) (CMDisplayIDType, UnsafeMutablePointer<UInt8>) -> DarwinBoolean
typealias CalibrateProcPtr = @convention(c) (UnsafeMutablePointer<CalibratorInfo>) -> OSErr
typealias CanCalibrateUPP = CanCalibrateProcPtr
typealias CalibrateUPP = CalibrateProcPtr
func NewCalibrateEventUPP(userRoutine: CalibrateEventProcPtr!) -> CalibrateEventUPP!
func NewCanCalibrateUPP(userRoutine: CanCalibrateProcPtr!) -> CanCalibrateUPP!
func NewCalibrateUPP(userRoutine: CalibrateProcPtr!) -> CalibrateUPP!
func DisposeCalibrateEventUPP(userUPP: CalibrateEventUPP!)
func DisposeCanCalibrateUPP(userUPP: CanCalibrateUPP!)
func DisposeCalibrateUPP(userUPP: CalibrateUPP!)
func InvokeCalibrateEventUPP(event: UnsafeMutablePointer<EventRecord>, _ userUPP: CalibrateEventUPP!)
func InvokeCanCalibrateUPP(displayID: CMDisplayIDType, _ errMessage: UnsafeMutablePointer<UInt8>, _ userUPP: CanCalibrateUPP!) -> Bool
func InvokeCalibrateUPP(theInfo: UnsafeMutablePointer<CalibratorInfo>, _ userUPP: CalibrateUPP!) -> OSErr
func CMCalibrateDisplay(theInfo: UnsafeMutablePointer<CalibratorInfo>) -> OSErr
var kDefaultColorPickerWidth: Int { get }
var kDefaultColorPickerHeight: Int { get }
typealias DialogPlacementSpec = Int16
var kAtSpecifiedOrigin: Int { get }
var kDeepestColorScreen: Int { get }
var kCenterOnMainScreen: Int { get }
var kColorPickerDialogIsMoveable: Int { get }
var kColorPickerDialogIsModal: Int { get }
var kColorPickerCanModifyPalette: Int { get }
var kColorPickerCanAnimatePalette: Int { get }
var kColorPickerAppIsColorSyncAware: Int { get }
var kColorPickerInSystemDialog: Int { get }
var kColorPickerInApplicationDialog: Int { get }
var kColorPickerInPickerDialog: Int { get }
var kColorPickerDetachedFromChoices: Int { get }
var kColorPickerCallColorProcLive: Int { get }
struct NPMColor {
  var profile: CMProfileRef
  var color: CMColor
  init()
  init(profile: CMProfileRef, color: CMColor)
}
typealias NPMColorPtr = UnsafeMutablePointer<NPMColor>
typealias Picker = COpaquePointer
typealias picker = Picker
struct PickerMenuItemInfo {
  var editMenuID: Int16
  var cutItem: Int16
  var copyItem: Int16
  var pasteItem: Int16
  var clearItem: Int16
  var undoItem: Int16
  init()
  init(editMenuID: Int16, cutItem: Int16, copyItem: Int16, pasteItem: Int16, clearItem: Int16, undoItem: Int16)
}
typealias NColorChangedProcPtr = @convention(c) (SRefCon, UnsafeMutablePointer<NPMColor>) -> Void
typealias NColorChangedUPP = NColorChangedProcPtr
func NewNColorChangedUPP(userRoutine: NColorChangedProcPtr!) -> NColorChangedUPP!
func DisposeNColorChangedUPP(userUPP: NColorChangedUPP!)
func InvokeNColorChangedUPP(userData: SRefCon, _ newColor: UnsafeMutablePointer<NPMColor>, _ userUPP: NColorChangedUPP!)
typealias ColorChangedUPP = UnsafeMutablePointer<Void>
typealias UserEventUPP = UnsafeMutablePointer<Void>
struct NColorPickerInfo {
  var theColor: NPMColor
  var dstProfile: CMProfileRef
  var flags: UInt32
  var placeWhere: DialogPlacementSpec
  var dialogOrigin: Point
  var pickerType: OSType
  var colorProc: NColorChangedUPP!
  var colorProcData: URefCon
  var prompt: Str255
  var mInfo: PickerMenuItemInfo
  var newColorChosen: DarwinBoolean
  var reserved: UInt8
  init()
  init(theColor: NPMColor, dstProfile: CMProfileRef, flags: UInt32, placeWhere: DialogPlacementSpec, dialogOrigin: Point, pickerType: OSType, colorProc: NColorChangedUPP!, colorProcData: URefCon, prompt: Str255, mInfo: PickerMenuItemInfo, newColorChosen: DarwinBoolean, reserved: UInt8)
}
func GetColor(where: Point, _ prompt: ConstStr255Param, _ inColor: UnsafePointer<RGBColor>, _ outColor: UnsafeMutablePointer<RGBColor>) -> Bool
func NPickColor(theColorInfo: UnsafeMutablePointer<NColorPickerInfo>) -> OSErr
var kEventClassFont: Int { get }
var kHICommandShowHideFontPanel: Int { get }
var kEventFontPanelClosed: Int { get }
var kEventFontSelection: Int { get }
var typeCTFontDescriptorRef: Int { get }
var typeATSUFontID: Int { get }
var typeATSUSize: Int { get }
var typeFMFontFamily: Int { get }
var typeFMFontStyle: Int { get }
var typeFMFontSize: Int { get }
var typeFontColor: Int { get }
var kEventParamCTFontDescriptor: Int { get }
var kEventParamATSUFontID: Int { get }
var kEventParamATSUFontSize: Int { get }
var kEventParamFMFontFamily: Int { get }
var kEventParamFMFontStyle: Int { get }
var kEventParamFMFontSize: Int { get }
var kEventParamFontColor: Int { get }
var kEventParamDictionary: Int { get }
var kEventParamViewAttributesDictionary: Int { get }
let kFontPanelATSUFontIDKey: CFString!
let kFontPanelVariationAxesKey: CFString!
let kFontPanelVariationValuesKey: CFString!
let kFontPanelFeatureTypesKey: CFString!
let kFontPanelFeatureSelectorsKey: CFString!
let kFontPanelAttributesKey: CFString!
let kFontPanelAttributeTagsKey: CFString!
let kFontPanelAttributeSizesKey: CFString!
let kFontPanelAttributeValuesKey: CFString!
let kFontPanelMouseTrackingState: CFString!
let kFontPanelBackgroundColorAttributeName: CFString!
var fontPanelShowErr: Int { get }
var fontPanelSelectionStyleErr: Int { get }
var fontPanelFontSelectionQDStyleVersionErr: Int { get }
var kFontSelectionATSUIType: Int { get }
var kFontSelectionQDType: Int { get }
var kFontSelectionCoreTextType: Int { get }
var kFontSelectionQDStyleVersionZero: Int { get }
struct FontSelectionQDStyle {
  var version: UInt32
  var instance: FMFontFamilyInstance
  var size: FMFontSize
  var hasColor: DarwinBoolean
  var reserved: UInt8
  var color: RGBColor
  init()
  init(version: UInt32, instance: FMFontFamilyInstance, size: FMFontSize, hasColor: DarwinBoolean, reserved: UInt8, color: RGBColor)
}
typealias FontSelectionQDStylePtr = UnsafeMutablePointer<FontSelectionQDStyle>
func FPIsFontPanelVisible() -> Bool
func FPShowHideFontPanel() -> OSStatus
func SetFontInfoForSelection(iStyleType: OSType, _ iNumStyles: UInt32, _ iStyles: UnsafeMutablePointer<Void>, _ iFPEventTarget: EventTargetRef) -> OSStatus
typealias FCFontDescriptorRef = FCFontDescriptor
class FCFontDescriptor {
}
func FCCopyCollectionNames() -> Unmanaged<CFArray>!
func FCCopyFontDescriptorsInCollection(iCollection: CFString!) -> Unmanaged<CFArray>!
func FCAddCollection(iCollection: CFString!, _ iCollectionOptions: OptionBits) -> OSStatus
func FCRemoveCollection(iCollection: CFString!) -> OSStatus
func FCAddFontDescriptorToCollection(iDescriptor: FCFontDescriptor!, _ iCollection: CFString!) -> OSStatus
func FCRemoveFontDescriptorFromCollection(iDescriptor: FCFontDescriptor!, _ iCollection: CFString!) -> OSStatus
let kFCFontFamilyAttribute: CFString!
let kFCFontNameAttribute: CFString!
let kFCFontFaceAttribute: CFString!
let kFCFontSizeAttribute: CFString!
let kFCFontVisibleNameAttribute: CFString!
let kFCFontCGColorAttribute: CFString!
func FCFontDescriptorCreateWithFontAttributes(iAttributes: CFDictionary!) -> Unmanaged<FCFontDescriptor>!
func FCFontDescriptorCreateWithName(iFontName: CFString!, _ iSize: CGFloat) -> Unmanaged<FCFontDescriptor>!
typealias AEIdleProcPtr = @convention(c) (UnsafeMutablePointer<EventRecord>, UnsafeMutablePointer<Int32>, UnsafeMutablePointer<RgnHandle>) -> DarwinBoolean
typealias AEFilterProcPtr = @convention(c) (UnsafeMutablePointer<EventRecord>, Int32, AETransactionID, UnsafePointer<AEAddressDesc>) -> DarwinBoolean
typealias AEIdleUPP = AEIdleProcPtr
typealias AEFilterUPP = AEFilterProcPtr
func AESend(theAppleEvent: UnsafePointer<AppleEvent>, _ reply: UnsafeMutablePointer<AppleEvent>, _ sendMode: AESendMode, _ sendPriority: AESendPriority, _ timeOutInTicks: Int32, _ idleProc: AEIdleUPP!, _ filterProc: AEFilterUPP!) -> OSErr
func AEProcessAppleEvent(theEventRecord: UnsafePointer<EventRecord>) -> OSErr
func AEProcessEvent(inEvent: EventRef) -> OSStatus
func AEResetTimer(reply: UnsafePointer<AppleEvent>) -> OSErr
typealias AEInteractAllowed = Int8
var kAEInteractWithSelf: Int { get }
var kAEInteractWithLocal: Int { get }
var kAEInteractWithAll: Int { get }
func AEGetInteractionAllowed(level: UnsafeMutablePointer<AEInteractAllowed>) -> OSErr
func AESetInteractionAllowed(level: AEInteractAllowed) -> OSErr
func AEInteractWithUser(timeOutInTicks: Int32, _ nmReqPtr: NMRecPtr, _ idleProc: AEIdleUPP!) -> OSErr
func AESuspendTheCurrentEvent(theAppleEvent: UnsafePointer<AppleEvent>) -> OSErr
var kAEDoNotIgnoreHandler: Int { get }
var kAEIgnoreAppPhacHandler: Int { get }
var kAEIgnoreAppEventHandler: Int { get }
var kAEIgnoreSysPhacHandler: Int { get }
var kAEIgnoreSysEventHandler: Int { get }
var kAEIngoreBuiltInEventHandler: Int { get }
var kAEDontDisposeOnResume: Int { get }
var kAENoDispatch: Int { get }
var kAEUseStandardDispatch: Int { get }
func AEResumeTheCurrentEvent(theAppleEvent: UnsafePointer<AppleEvent>, _ reply: UnsafePointer<AppleEvent>, _ dispatcher: AEEventHandlerUPP!, _ handlerRefcon: SRefCon) -> OSErr
func AEGetTheCurrentEvent(theAppleEvent: UnsafeMutablePointer<AppleEvent>) -> OSErr
func AESetTheCurrentEvent(theAppleEvent: UnsafePointer<AppleEvent>) -> OSErr
func NewAEIdleUPP(userRoutine: AEIdleProcPtr!) -> AEIdleUPP!
func NewAEFilterUPP(userRoutine: AEFilterProcPtr!) -> AEFilterUPP!
func DisposeAEIdleUPP(userUPP: AEIdleUPP!)
func DisposeAEFilterUPP(userUPP: AEFilterUPP!)
func InvokeAEIdleUPP(theEvent: UnsafeMutablePointer<EventRecord>, _ sleepTime: UnsafeMutablePointer<Int32>, _ mouseRgn: UnsafeMutablePointer<RgnHandle>, _ userUPP: AEIdleUPP!) -> Bool
func InvokeAEFilterUPP(theEvent: UnsafeMutablePointer<EventRecord>, _ returnID: Int32, _ transactionID: AETransactionID, _ sender: UnsafePointer<AEAddressDesc>, _ userUPP: AEFilterUPP!) -> Bool
var kAppearanceEventClass: Int { get }
var kAEAppearanceChanged: Int { get }
var kAESystemFontChanged: Int { get }
var kAESmallSystemFontChanged: Int { get }
var kAEViewsFontChanged: Int { get }
var kThemeDataFileType: Int { get }
var kThemePlatinumFileType: Int { get }
var kThemeCustomThemesFileType: Int { get }
var kThemeSoundTrackFileType: Int { get }
var kThemeAppearancePlatinum: String { get }
var kThemeAppearanceAqua: String { get }
var kThemeAppearanceAquaBlue: String { get }
var kThemeAppearanceAquaGraphite: String { get }
typealias AppearancePartCode = Int16
var kAppearancePartMetaNone: Int { get }
var kAppearancePartMetaDisabled: Int { get }
var kAppearancePartMetaInactive: Int { get }
var kAppearancePartIndicator: Int { get }
var kAppearancePartUpButton: Int { get }
var kAppearancePartDownButton: Int { get }
var kAppearancePartLeftButton: Int { get }
var kAppearancePartRightButton: Int { get }
var kAppearancePartPageUpArea: Int { get }
var kAppearancePartPageDownArea: Int { get }
var kAppearancePartPageLeftArea: Int { get }
var kAppearancePartPageRightArea: Int { get }
typealias AppearanceRegionCode = UInt16
var kAppearanceRegionTitleBar: Int { get }
var kAppearanceRegionTitleText: Int { get }
var kAppearanceRegionCloseBox: Int { get }
var kAppearanceRegionZoomBox: Int { get }
var kAppearanceRegionDrag: Int { get }
var kAppearanceRegionGrow: Int { get }
var kAppearanceRegionCollapseBox: Int { get }
var kAppearanceRegionTitleProxyIcon: Int { get }
var kAppearanceRegionStructure: Int { get }
var kAppearanceRegionContent: Int { get }
var kAppearanceRegionToolbarButton: Int { get }
var kThemeBrushDialogBackgroundActive: Int { get }
var kThemeBrushDialogBackgroundInactive: Int { get }
var kThemeBrushAlertBackgroundActive: Int { get }
var kThemeBrushAlertBackgroundInactive: Int { get }
var kThemeBrushModelessDialogBackgroundActive: Int { get }
var kThemeBrushModelessDialogBackgroundInactive: Int { get }
var kThemeBrushUtilityWindowBackgroundActive: Int { get }
var kThemeBrushUtilityWindowBackgroundInactive: Int { get }
var kThemeBrushListViewSortColumnBackground: Int { get }
var kThemeBrushListViewBackground: Int { get }
var kThemeBrushIconLabelBackground: Int { get }
var kThemeBrushListViewSeparator: Int { get }
var kThemeBrushChasingArrows: Int { get }
var kThemeBrushDragHilite: Int { get }
var kThemeBrushDocumentWindowBackground: Int { get }
var kThemeBrushFinderWindowBackground: Int { get }
var kThemeBrushScrollBarDelimiterActive: Int { get }
var kThemeBrushScrollBarDelimiterInactive: Int { get }
var kThemeBrushFocusHighlight: Int { get }
var kThemeBrushPopupArrowActive: Int { get }
var kThemeBrushPopupArrowPressed: Int { get }
var kThemeBrushPopupArrowInactive: Int { get }
var kThemeBrushAppleGuideCoachmark: Int { get }
var kThemeBrushIconLabelBackgroundSelected: Int { get }
var kThemeBrushStaticAreaFill: Int { get }
var kThemeBrushActiveAreaFill: Int { get }
var kThemeBrushButtonFrameActive: Int { get }
var kThemeBrushButtonFrameInactive: Int { get }
var kThemeBrushButtonFaceActive: Int { get }
var kThemeBrushButtonFaceInactive: Int { get }
var kThemeBrushButtonFacePressed: Int { get }
var kThemeBrushButtonActiveDarkShadow: Int { get }
var kThemeBrushButtonActiveDarkHighlight: Int { get }
var kThemeBrushButtonActiveLightShadow: Int { get }
var kThemeBrushButtonActiveLightHighlight: Int { get }
var kThemeBrushButtonInactiveDarkShadow: Int { get }
var kThemeBrushButtonInactiveDarkHighlight: Int { get }
var kThemeBrushButtonInactiveLightShadow: Int { get }
var kThemeBrushButtonInactiveLightHighlight: Int { get }
var kThemeBrushButtonPressedDarkShadow: Int { get }
var kThemeBrushButtonPressedDarkHighlight: Int { get }
var kThemeBrushButtonPressedLightShadow: Int { get }
var kThemeBrushButtonPressedLightHighlight: Int { get }
var kThemeBrushBevelActiveLight: Int { get }
var kThemeBrushBevelActiveDark: Int { get }
var kThemeBrushBevelInactiveLight: Int { get }
var kThemeBrushBevelInactiveDark: Int { get }
var kThemeBrushNotificationWindowBackground: Int { get }
var kThemeBrushMovableModalBackground: Int { get }
var kThemeBrushSheetBackgroundOpaque: Int { get }
var kThemeBrushDrawerBackground: Int { get }
var kThemeBrushToolbarBackground: Int { get }
var kThemeBrushSheetBackgroundTransparent: Int { get }
var kThemeBrushMenuBackground: Int { get }
var kThemeBrushMenuBackgroundSelected: Int { get }
var kThemeBrushListViewOddRowBackground: Int { get }
var kThemeBrushListViewEvenRowBackground: Int { get }
var kThemeBrushListViewColumnDivider: Int { get }
var kThemeBrushSheetBackground: Int { get }
var kThemeBrushBlack: Int { get }
var kThemeBrushWhite: Int { get }
var kThemeBrushPrimaryHighlightColor: Int { get }
var kThemeBrushSecondaryHighlightColor: Int { get }
var kThemeBrushAlternatePrimaryHighlightColor: Int { get }
typealias ThemeBrush = Int16
var kThemeTextColorDialogActive: Int { get }
var kThemeTextColorDialogInactive: Int { get }
var kThemeTextColorAlertActive: Int { get }
var kThemeTextColorAlertInactive: Int { get }
var kThemeTextColorModelessDialogActive: Int { get }
var kThemeTextColorModelessDialogInactive: Int { get }
var kThemeTextColorWindowHeaderActive: Int { get }
var kThemeTextColorWindowHeaderInactive: Int { get }
var kThemeTextColorPlacardActive: Int { get }
var kThemeTextColorPlacardInactive: Int { get }
var kThemeTextColorPlacardPressed: Int { get }
var kThemeTextColorPushButtonActive: Int { get }
var kThemeTextColorPushButtonInactive: Int { get }
var kThemeTextColorPushButtonPressed: Int { get }
var kThemeTextColorBevelButtonActive: Int { get }
var kThemeTextColorBevelButtonInactive: Int { get }
var kThemeTextColorBevelButtonPressed: Int { get }
var kThemeTextColorPopupButtonActive: Int { get }
var kThemeTextColorPopupButtonInactive: Int { get }
var kThemeTextColorPopupButtonPressed: Int { get }
var kThemeTextColorIconLabel: Int { get }
var kThemeTextColorListView: Int { get }
var kThemeTextColorDocumentWindowTitleActive: Int { get }
var kThemeTextColorDocumentWindowTitleInactive: Int { get }
var kThemeTextColorMovableModalWindowTitleActive: Int { get }
var kThemeTextColorMovableModalWindowTitleInactive: Int { get }
var kThemeTextColorUtilityWindowTitleActive: Int { get }
var kThemeTextColorUtilityWindowTitleInactive: Int { get }
var kThemeTextColorPopupWindowTitleActive: Int { get }
var kThemeTextColorPopupWindowTitleInactive: Int { get }
var kThemeTextColorRootMenuActive: Int { get }
var kThemeTextColorRootMenuSelected: Int { get }
var kThemeTextColorRootMenuDisabled: Int { get }
var kThemeTextColorMenuItemActive: Int { get }
var kThemeTextColorMenuItemSelected: Int { get }
var kThemeTextColorMenuItemDisabled: Int { get }
var kThemeTextColorPopupLabelActive: Int { get }
var kThemeTextColorPopupLabelInactive: Int { get }
var kThemeTextColorTabFrontActive: Int { get }
var kThemeTextColorTabNonFrontActive: Int { get }
var kThemeTextColorTabNonFrontPressed: Int { get }
var kThemeTextColorTabFrontInactive: Int { get }
var kThemeTextColorTabNonFrontInactive: Int { get }
var kThemeTextColorIconLabelSelected: Int { get }
var kThemeTextColorBevelButtonStickyActive: Int { get }
var kThemeTextColorBevelButtonStickyInactive: Int { get }
var kThemeTextColorNotification: Int { get }
var kThemeTextColorSystemDetail: Int { get }
var kThemeTextColorBlack: Int { get }
var kThemeTextColorWhite: Int { get }
typealias ThemeTextColor = Int16
var kThemeStateInactive: Int { get }
var kThemeStateActive: Int { get }
var kThemeStatePressed: Int { get }
var kThemeStateRollover: Int { get }
var kThemeStateUnavailable: Int { get }
var kThemeStateUnavailableInactive: Int { get }
var kThemeStateDisabled: Int { get }
var kThemeStatePressedUp: Int { get }
var kThemeStatePressedDown: Int { get }
typealias ThemeDrawState = UInt32
var kThemeArrowCursor: Int { get }
var kThemeCopyArrowCursor: Int { get }
var kThemeAliasArrowCursor: Int { get }
var kThemeContextualMenuArrowCursor: Int { get }
var kThemeIBeamCursor: Int { get }
var kThemeCrossCursor: Int { get }
var kThemePlusCursor: Int { get }
var kThemeWatchCursor: Int { get }
var kThemeClosedHandCursor: Int { get }
var kThemeOpenHandCursor: Int { get }
var kThemePointingHandCursor: Int { get }
var kThemeCountingUpHandCursor: Int { get }
var kThemeCountingDownHandCursor: Int { get }
var kThemeCountingUpAndDownHandCursor: Int { get }
var kThemeSpinningCursor: Int { get }
var kThemeResizeLeftCursor: Int { get }
var kThemeResizeRightCursor: Int { get }
var kThemeResizeLeftRightCursor: Int { get }
var kThemeNotAllowedCursor: Int { get }
var kThemeResizeUpCursor: Int { get }
var kThemeResizeDownCursor: Int { get }
var kThemeResizeUpDownCursor: Int { get }
var kThemePoofCursor: Int { get }
typealias ThemeCursor = UInt32
var kThemeMenuBarNormal: Int { get }
var kThemeMenuBarSelected: Int { get }
var kThemeMenuBarInactive: Int { get }
typealias ThemeMenuBarState = UInt16
var kThemeMenuSquareMenuBar: Int { get }
var kThemeMenuActive: Int { get }
var kThemeMenuSelected: Int { get }
var kThemeMenuDisabled: Int { get }
typealias ThemeMenuState = UInt16
var kThemeMenuTypePullDown: Int { get }
var kThemeMenuTypePopUp: Int { get }
var kThemeMenuTypeHierarchical: Int { get }
var kThemeMenuTypeInactive: Int { get }
typealias ThemeMenuType = UInt16
var kThemeMenuItemPlain: Int { get }
var kThemeMenuItemHierarchical: Int { get }
var kThemeMenuItemScrollUpArrow: Int { get }
var kThemeMenuItemScrollDownArrow: Int { get }
var kThemeMenuItemAtTop: Int { get }
var kThemeMenuItemAtBottom: Int { get }
var kThemeMenuItemHierBackground: Int { get }
var kThemeMenuItemPopUpBackground: Int { get }
var kThemeMenuItemHasIcon: Int { get }
var kThemeMenuItemNoBackground: Int { get }
var kThemeMenuItemAlignRight: Int { get }
typealias ThemeMenuItemType = UInt16
var kThemeBackgroundTabPane: Int { get }
var kThemeBackgroundPlacard: Int { get }
var kThemeBackgroundWindowHeader: Int { get }
var kThemeBackgroundListViewWindowHeader: Int { get }
var kThemeBackgroundSecondaryGroupBox: Int { get }
var kThemeBackgroundMetal: Int { get }
typealias ThemeBackgroundKind = UInt32
var kThemeNameTag: Int { get }
var kThemeVariantNameTag: Int { get }
var kThemeVariantBaseTintTag: Int { get }
var kThemeHighlightColorTag: Int { get }
var kThemeScrollBarArrowStyleTag: Int { get }
var kThemeScrollBarThumbStyleTag: Int { get }
var kThemeSoundsEnabledTag: Int { get }
var kThemeDblClickCollapseTag: Int { get }
var kThemeAppearanceFileNameTag: Int { get }
var kThemeSystemFontTag: Int { get }
var kThemeSmallSystemFontTag: Int { get }
var kThemeViewsFontTag: Int { get }
var kThemeViewsFontSizeTag: Int { get }
var kThemeDesktopPatternNameTag: Int { get }
var kThemeDesktopPatternTag: Int { get }
var kThemeDesktopPictureNameTag: Int { get }
var kThemeDesktopPictureAliasTag: Int { get }
var kThemeDesktopPictureAlignmentTag: Int { get }
var kThemeHighlightColorNameTag: Int { get }
var kThemeExamplePictureIDTag: Int { get }
var kThemeSoundTrackNameTag: Int { get }
var kThemeSoundMaskTag: Int { get }
var kThemeUserDefinedTag: Int { get }
var kThemeSmoothFontEnabledTag: Int { get }
var kThemeSmoothFontMinSizeTag: Int { get }
var kTiledOnScreen: Int { get }
var kCenterOnScreen: Int { get }
var kFitToScreen: Int { get }
var kFillScreen: Int { get }
var kUseBestGuess: Int { get }
var kThemeCheckBoxClassicX: Int { get }
var kThemeCheckBoxCheckMark: Int { get }
typealias ThemeCheckBoxStyle = UInt16
var kThemeScrollBarArrowsSingle: Int { get }
var kThemeScrollBarArrowsLowerRight: Int { get }
typealias ThemeScrollBarArrowStyle = UInt16
var kThemeScrollBarThumbNormal: Int { get }
var kThemeScrollBarThumbProportional: Int { get }
typealias ThemeScrollBarThumbStyle = UInt16
var kThemeSystemFont: Int { get }
var kThemeSmallSystemFont: Int { get }
var kThemeSmallEmphasizedSystemFont: Int { get }
var kThemeViewsFont: Int { get }
var kThemeEmphasizedSystemFont: Int { get }
var kThemeApplicationFont: Int { get }
var kThemeLabelFont: Int { get }
var kThemeSystemFontDetail: Int { get }
var kThemeSystemFontDetailEmphasized: Int { get }
var kThemeMenuTitleFont: Int { get }
var kThemeMenuItemFont: Int { get }
var kThemeMenuItemMarkFont: Int { get }
var kThemeMenuItemCmdKeyFont: Int { get }
var kThemeWindowTitleFont: Int { get }
var kThemePushButtonFont: Int { get }
var kThemeUtilityWindowTitleFont: Int { get }
var kThemeAlertHeaderFont: Int { get }
var kThemeToolbarFont: Int { get }
var kThemeMiniSystemFont: Int { get }
var kThemeCurrentPortFont: Int { get }
var kThemeSpecifiedFont: Int { get }
var kPublicThemeFontCount: Int { get }
typealias ThemeFontID = UInt16
var kThemeTabNonFront: Int { get }
var kThemeTabNonFrontPressed: Int { get }
var kThemeTabNonFrontInactive: Int { get }
var kThemeTabFront: Int { get }
var kThemeTabFrontInactive: Int { get }
var kThemeTabNonFrontUnavailable: Int { get }
var kThemeTabFrontUnavailable: Int { get }
typealias ThemeTabStyle = UInt16
var kThemeTabNorth: Int { get }
var kThemeTabSouth: Int { get }
var kThemeTabEast: Int { get }
var kThemeTabWest: Int { get }
typealias ThemeTabDirection = UInt16
var kThemeSmallTabHeight: Int { get }
var kThemeLargeTabHeight: Int { get }
var kThemeTabPaneOverlap: Int { get }
var kThemeSmallTabHeightMax: Int { get }
var kThemeLargeTabHeightMax: Int { get }
var kThemeScrollBarMedium: Int { get }
var kThemeScrollBarSmall: Int { get }
var kThemeSliderMedium: Int { get }
var kThemeProgressBarMedium: Int { get }
var kThemeIndeterminateBarMedium: Int { get }
var kThemeRelevanceBar: Int { get }
var kThemeSliderSmall: Int { get }
var kThemeProgressBarLarge: Int { get }
var kThemeIndeterminateBarLarge: Int { get }
var kThemeScrollBarMini: Int { get }
var kThemeSliderMini: Int { get }
var kThemeProgressBarMini: Int { get }
var kThemeIndeterminateBarMini: Int { get }
var kThemeMediumScrollBar: Int { get }
var kThemeSmallScrollBar: Int { get }
var kThemeMediumSlider: Int { get }
var kThemeMediumProgressBar: Int { get }
var kThemeMediumIndeterminateBar: Int { get }
var kThemeSmallSlider: Int { get }
var kThemeLargeProgressBar: Int { get }
var kThemeLargeIndeterminateBar: Int { get }
var kThemeMiniScrollBar: Int { get }
var kThemeMiniSlider: Int { get }
var kThemeMiniProgressBar: Int { get }
var kThemeMiniIndeterminateBar: Int { get }
typealias ThemeTrackKind = UInt16
var kThemeTrackActive: Int { get }
var kThemeTrackDisabled: Int { get }
var kThemeTrackNothingToScroll: Int { get }
var kThemeTrackInactive: Int { get }
typealias ThemeTrackEnableState = UInt8
var kThemeLeftOutsideArrowPressed: Int { get }
var kThemeLeftInsideArrowPressed: Int { get }
var kThemeLeftTrackPressed: Int { get }
var kThemeThumbPressed: Int { get }
var kThemeRightTrackPressed: Int { get }
var kThemeRightInsideArrowPressed: Int { get }
var kThemeRightOutsideArrowPressed: Int { get }
var kThemeTopOutsideArrowPressed: Int { get }
var kThemeTopInsideArrowPressed: Int { get }
var kThemeTopTrackPressed: Int { get }
var kThemeBottomTrackPressed: Int { get }
var kThemeBottomInsideArrowPressed: Int { get }
var kThemeBottomOutsideArrowPressed: Int { get }
typealias ThemeTrackPressState = UInt8
var kThemeThumbPlain: Int { get }
var kThemeThumbUpward: Int { get }
var kThemeThumbDownward: Int { get }
typealias ThemeThumbDirection = UInt8
var kThemeTrackHorizontal: Int { get }
var kThemeTrackRightToLeft: Int { get }
var kThemeTrackShowThumb: Int { get }
var kThemeTrackThumbRgnIsNotGhost: Int { get }
var kThemeTrackNoScrollBarArrows: Int { get }
var kThemeTrackHasFocus: Int { get }
var kThemeTrackHideTrack: Int { get }
typealias ThemeTrackAttributes = UInt16
struct ScrollBarTrackInfo {
  var viewsize: Int32
  var pressState: ThemeTrackPressState
  init()
  init(viewsize: Int32, pressState: ThemeTrackPressState)
}
struct SliderTrackInfo {
  var thumbDir: ThemeThumbDirection
  var pressState: ThemeTrackPressState
  init()
  init(thumbDir: ThemeThumbDirection, pressState: ThemeTrackPressState)
}
struct ProgressTrackInfo {
  var phase: UInt8
  init()
  init(phase: UInt8)
}
struct ThemeTrackDrawInfo {
  struct __Unnamed_union_trackInfo {
    var scrollbar: ScrollBarTrackInfo
    var slider: SliderTrackInfo
    var progress: ProgressTrackInfo
    init(scrollbar: ScrollBarTrackInfo)
    init(slider: SliderTrackInfo)
    init(progress: ProgressTrackInfo)
    init()
  }
  var kind: ThemeTrackKind
  var bounds: Rect
  var min: Int32
  var max: Int32
  var value: Int32
  var reserved: UInt32
  var attributes: ThemeTrackAttributes
  var enableState: ThemeTrackEnableState
  var filler1: UInt8
  var trackInfo: ThemeTrackDrawInfo.__Unnamed_union_trackInfo
  init()
  init(kind: ThemeTrackKind, bounds: Rect, min: Int32, max: Int32, value: Int32, reserved: UInt32, attributes: ThemeTrackAttributes, enableState: ThemeTrackEnableState, filler1: UInt8, trackInfo: ThemeTrackDrawInfo.__Unnamed_union_trackInfo)
}
var kThemeWindowHasGrow: Int { get }
var kThemeWindowHasHorizontalZoom: Int { get }
var kThemeWindowHasVerticalZoom: Int { get }
var kThemeWindowHasFullZoom: Int { get }
var kThemeWindowHasCloseBox: Int { get }
var kThemeWindowHasCollapseBox: Int { get }
var kThemeWindowHasTitleText: Int { get }
var kThemeWindowIsCollapsed: Int { get }
var kThemeWindowHasDirty: Int { get }
var kThemeWindowHasToolbarButton: Int { get }
typealias ThemeWindowAttributes = UInt32
var kThemeDocumentWindow: Int { get }
var kThemeDialogWindow: Int { get }
var kThemeMovableDialogWindow: Int { get }
var kThemeAlertWindow: Int { get }
var kThemeMovableAlertWindow: Int { get }
var kThemePlainDialogWindow: Int { get }
var kThemeShadowDialogWindow: Int { get }
var kThemePopupWindow: Int { get }
var kThemeUtilityWindow: Int { get }
var kThemeUtilitySideWindow: Int { get }
var kThemeSheetWindow: Int { get }
var kThemeDrawerWindow: Int { get }
typealias ThemeWindowType = UInt16
var kThemeWidgetCloseBox: Int { get }
var kThemeWidgetZoomBox: Int { get }
var kThemeWidgetCollapseBox: Int { get }
var kThemeWidgetDirtyCloseBox: Int { get }
var kThemeWidgetToolbarButton: Int { get }
typealias ThemeTitleBarWidget = UInt16
var kThemeArrowLeft: Int { get }
var kThemeArrowDown: Int { get }
var kThemeArrowRight: Int { get }
var kThemeArrowUp: Int { get }
typealias ThemeArrowOrientation = UInt16
var kThemeArrow3pt: Int { get }
var kThemeArrow5pt: Int { get }
var kThemeArrow7pt: Int { get }
var kThemeArrow9pt: Int { get }
typealias ThemePopupArrowSize = UInt16
var kThemeGrowLeft: Int { get }
var kThemeGrowRight: Int { get }
var kThemeGrowUp: Int { get }
var kThemeGrowDown: Int { get }
typealias ThemeGrowDirection = UInt16
var kThemePushButton: Int { get }
var kThemeCheckBox: Int { get }
var kThemeRadioButton: Int { get }
var kThemeBevelButton: Int { get }
var kThemeArrowButton: Int { get }
var kThemePopupButton: Int { get }
var kThemeDisclosureTriangle: Int { get }
var kThemeIncDecButton: Int { get }
var kThemeBevelButtonSmall: Int { get }
var kThemeBevelButtonMedium: Int { get }
var kThemeBevelButtonLarge: Int { get }
var kThemeListHeaderButton: Int { get }
var kThemeRoundButton: Int { get }
var kThemeRoundButtonLarge: Int { get }
var kThemeCheckBoxSmall: Int { get }
var kThemeRadioButtonSmall: Int { get }
var kThemeRoundedBevelButton: Int { get }
var kThemeComboBox: Int { get }
var kThemeComboBoxSmall: Int { get }
var kThemeComboBoxMini: Int { get }
var kThemeCheckBoxMini: Int { get }
var kThemeRadioButtonMini: Int { get }
var kThemeIncDecButtonSmall: Int { get }
var kThemeIncDecButtonMini: Int { get }
var kThemeArrowButtonSmall: Int { get }
var kThemeArrowButtonMini: Int { get }
var kThemePushButtonNormal: Int { get }
var kThemePushButtonSmall: Int { get }
var kThemePushButtonMini: Int { get }
var kThemePopupButtonNormal: Int { get }
var kThemePopupButtonSmall: Int { get }
var kThemePopupButtonMini: Int { get }
var kThemeBevelButtonInset: Int { get }
var kThemePushButtonTextured: Int { get }
var kThemePushButtonTexturedSmall: Int { get }
var kThemeRoundButtonHelp: Int { get }
var kThemePushButtonInset: Int { get }
var kThemePushButtonInsetSmall: Int { get }
var kThemeNormalCheckBox: Int { get }
var kThemeNormalRadioButton: Int { get }
var kThemeLargeBevelButton: Int { get }
var kThemeMediumBevelButton: Int { get }
var kThemeMiniCheckBox: Int { get }
var kThemeMiniRadioButton: Int { get }
var kThemeSmallBevelButton: Int { get }
var kThemeSmallCheckBox: Int { get }
var kThemeSmallRadioButton: Int { get }
var kThemeLargeRoundButton: Int { get }
var kThemeDisclosureButton: Int { get }
typealias ThemeButtonKind = UInt16
var kThemeButtonOff: Int { get }
var kThemeButtonOn: Int { get }
var kThemeButtonMixed: Int { get }
var kThemeDisclosureRight: Int { get }
var kThemeDisclosureDown: Int { get }
var kThemeDisclosureLeft: Int { get }
typealias ThemeButtonValue = UInt16
var kThemeAdornmentNone: Int { get }
var kThemeAdornmentDefault: Int { get }
var kThemeAdornmentFocus: Int { get }
var kThemeAdornmentRightToLeft: Int { get }
var kThemeAdornmentDrawIndicatorOnly: Int { get }
var kThemeAdornmentHeaderButtonLeftNeighborSelected: Int { get }
var kThemeAdornmentHeaderButtonRightNeighborSelected: Int { get }
var kThemeAdornmentHeaderButtonSortUp: Int { get }
var kThemeAdornmentHeaderMenuButton: Int { get }
var kThemeAdornmentHeaderButtonNoShadow: Int { get }
var kThemeAdornmentHeaderButtonShadowOnly: Int { get }
var kThemeAdornmentHeaderButtonNoSortArrow: Int { get }
var kThemeAdornmentArrowLeftArrow: Int { get }
var kThemeAdornmentArrowDownArrow: Int { get }
var kThemeAdornmentArrowDoubleArrow: Int { get }
var kThemeAdornmentArrowUpArrow: Int { get }
var kThemeAdornmentArrowRightArrow: Int { get }
var kThemeAdornmentNoShadow: Int { get }
var kThemeAdornmentShadowOnly: Int { get }
typealias ThemeButtonAdornment = UInt16
struct ThemeButtonDrawInfo {
  var state: ThemeDrawState
  var value: ThemeButtonValue
  var adornment: ThemeButtonAdornment
  init()
  init(state: ThemeDrawState, value: ThemeButtonValue, adornment: ThemeButtonAdornment)
}
typealias ThemeButtonDrawInfoPtr = UnsafeMutablePointer<ThemeButtonDrawInfo>
var kThemeNoSounds: Int { get }
var kThemeWindowSoundsMask: Int { get }
var kThemeMenuSoundsMask: Int { get }
var kThemeControlSoundsMask: Int { get }
var kThemeFinderSoundsMask: Int { get }
var kThemeDragSoundNone: Int { get }
var kThemeDragSoundMoveWindow: Int { get }
var kThemeDragSoundGrowWindow: Int { get }
var kThemeDragSoundMoveUtilWindow: Int { get }
var kThemeDragSoundGrowUtilWindow: Int { get }
var kThemeDragSoundMoveDialog: Int { get }
var kThemeDragSoundMoveAlert: Int { get }
var kThemeDragSoundMoveIcon: Int { get }
var kThemeDragSoundSliderThumb: Int { get }
var kThemeDragSoundSliderGhost: Int { get }
var kThemeDragSoundScrollBarThumb: Int { get }
var kThemeDragSoundScrollBarGhost: Int { get }
var kThemeDragSoundScrollBarArrowDecreasing: Int { get }
var kThemeDragSoundScrollBarArrowIncreasing: Int { get }
var kThemeDragSoundDragging: Int { get }
typealias ThemeDragSoundKind = OSType
var kThemeSoundNone: Int { get }
var kThemeSoundMenuOpen: Int { get }
var kThemeSoundMenuClose: Int { get }
var kThemeSoundMenuItemHilite: Int { get }
var kThemeSoundMenuItemRelease: Int { get }
var kThemeSoundWindowClosePress: Int { get }
var kThemeSoundWindowCloseEnter: Int { get }
var kThemeSoundWindowCloseExit: Int { get }
var kThemeSoundWindowCloseRelease: Int { get }
var kThemeSoundWindowZoomPress: Int { get }
var kThemeSoundWindowZoomEnter: Int { get }
var kThemeSoundWindowZoomExit: Int { get }
var kThemeSoundWindowZoomRelease: Int { get }
var kThemeSoundWindowCollapsePress: Int { get }
var kThemeSoundWindowCollapseEnter: Int { get }
var kThemeSoundWindowCollapseExit: Int { get }
var kThemeSoundWindowCollapseRelease: Int { get }
var kThemeSoundWindowDragBoundary: Int { get }
var kThemeSoundUtilWinClosePress: Int { get }
var kThemeSoundUtilWinCloseEnter: Int { get }
var kThemeSoundUtilWinCloseExit: Int { get }
var kThemeSoundUtilWinCloseRelease: Int { get }
var kThemeSoundUtilWinZoomPress: Int { get }
var kThemeSoundUtilWinZoomEnter: Int { get }
var kThemeSoundUtilWinZoomExit: Int { get }
var kThemeSoundUtilWinZoomRelease: Int { get }
var kThemeSoundUtilWinCollapsePress: Int { get }
var kThemeSoundUtilWinCollapseEnter: Int { get }
var kThemeSoundUtilWinCollapseExit: Int { get }
var kThemeSoundUtilWinCollapseRelease: Int { get }
var kThemeSoundUtilWinDragBoundary: Int { get }
var kThemeSoundWindowOpen: Int { get }
var kThemeSoundWindowClose: Int { get }
var kThemeSoundWindowZoomIn: Int { get }
var kThemeSoundWindowZoomOut: Int { get }
var kThemeSoundWindowCollapseUp: Int { get }
var kThemeSoundWindowCollapseDown: Int { get }
var kThemeSoundWindowActivate: Int { get }
var kThemeSoundUtilWindowOpen: Int { get }
var kThemeSoundUtilWindowClose: Int { get }
var kThemeSoundUtilWindowZoomIn: Int { get }
var kThemeSoundUtilWindowZoomOut: Int { get }
var kThemeSoundUtilWindowCollapseUp: Int { get }
var kThemeSoundUtilWindowCollapseDown: Int { get }
var kThemeSoundUtilWindowActivate: Int { get }
var kThemeSoundDialogOpen: Int { get }
var kThemeSoundDialogClose: Int { get }
var kThemeSoundAlertOpen: Int { get }
var kThemeSoundAlertClose: Int { get }
var kThemeSoundPopupWindowOpen: Int { get }
var kThemeSoundPopupWindowClose: Int { get }
var kThemeSoundButtonPress: Int { get }
var kThemeSoundButtonEnter: Int { get }
var kThemeSoundButtonExit: Int { get }
var kThemeSoundButtonRelease: Int { get }
var kThemeSoundDefaultButtonPress: Int { get }
var kThemeSoundDefaultButtonEnter: Int { get }
var kThemeSoundDefaultButtonExit: Int { get }
var kThemeSoundDefaultButtonRelease: Int { get }
var kThemeSoundCancelButtonPress: Int { get }
var kThemeSoundCancelButtonEnter: Int { get }
var kThemeSoundCancelButtonExit: Int { get }
var kThemeSoundCancelButtonRelease: Int { get }
var kThemeSoundCheckboxPress: Int { get }
var kThemeSoundCheckboxEnter: Int { get }
var kThemeSoundCheckboxExit: Int { get }
var kThemeSoundCheckboxRelease: Int { get }
var kThemeSoundRadioPress: Int { get }
var kThemeSoundRadioEnter: Int { get }
var kThemeSoundRadioExit: Int { get }
var kThemeSoundRadioRelease: Int { get }
var kThemeSoundScrollArrowPress: Int { get }
var kThemeSoundScrollArrowEnter: Int { get }
var kThemeSoundScrollArrowExit: Int { get }
var kThemeSoundScrollArrowRelease: Int { get }
var kThemeSoundScrollEndOfTrack: Int { get }
var kThemeSoundScrollTrackPress: Int { get }
var kThemeSoundSliderEndOfTrack: Int { get }
var kThemeSoundSliderTrackPress: Int { get }
var kThemeSoundBalloonOpen: Int { get }
var kThemeSoundBalloonClose: Int { get }
var kThemeSoundBevelPress: Int { get }
var kThemeSoundBevelEnter: Int { get }
var kThemeSoundBevelExit: Int { get }
var kThemeSoundBevelRelease: Int { get }
var kThemeSoundLittleArrowUpPress: Int { get }
var kThemeSoundLittleArrowDnPress: Int { get }
var kThemeSoundLittleArrowEnter: Int { get }
var kThemeSoundLittleArrowExit: Int { get }
var kThemeSoundLittleArrowUpRelease: Int { get }
var kThemeSoundLittleArrowDnRelease: Int { get }
var kThemeSoundPopupPress: Int { get }
var kThemeSoundPopupEnter: Int { get }
var kThemeSoundPopupExit: Int { get }
var kThemeSoundPopupRelease: Int { get }
var kThemeSoundDisclosurePress: Int { get }
var kThemeSoundDisclosureEnter: Int { get }
var kThemeSoundDisclosureExit: Int { get }
var kThemeSoundDisclosureRelease: Int { get }
var kThemeSoundTabPressed: Int { get }
var kThemeSoundTabEnter: Int { get }
var kThemeSoundTabExit: Int { get }
var kThemeSoundTabRelease: Int { get }
var kThemeSoundDragTargetHilite: Int { get }
var kThemeSoundDragTargetUnhilite: Int { get }
var kThemeSoundDragTargetDrop: Int { get }
var kThemeSoundEmptyTrash: Int { get }
var kThemeSoundSelectItem: Int { get }
var kThemeSoundNewItem: Int { get }
var kThemeSoundReceiveDrop: Int { get }
var kThemeSoundCopyDone: Int { get }
var kThemeSoundResolveAlias: Int { get }
var kThemeSoundLaunchApp: Int { get }
var kThemeSoundDiskInsert: Int { get }
var kThemeSoundDiskEject: Int { get }
var kThemeSoundFinderDragOnIcon: Int { get }
var kThemeSoundFinderDragOffIcon: Int { get }
typealias ThemeSoundKind = OSType
var kThemePopupTabNormalPosition: Int { get }
var kThemePopupTabCenterOnWindow: Int { get }
var kThemePopupTabCenterOnOffset: Int { get }
struct ThemeWindowMetrics {
  var metricSize: UInt16
  var titleHeight: Int16
  var titleWidth: Int16
  var popupTabOffset: Int16
  var popupTabWidth: Int16
  var popupTabPosition: UInt16
  init()
  init(metricSize: UInt16, titleHeight: Int16, titleWidth: Int16, popupTabOffset: Int16, popupTabWidth: Int16, popupTabPosition: UInt16)
}
typealias ThemeWindowMetricsPtr = UnsafeMutablePointer<ThemeWindowMetrics>
typealias ThemeDrawingState = COpaquePointer
typealias ThemeTabTitleDrawProcPtr = @convention(c) (UnsafePointer<Rect>, ThemeTabStyle, ThemeTabDirection, Int16, DarwinBoolean, URefCon) -> Void
typealias ThemeEraseProcPtr = @convention(c) (UnsafePointer<Rect>, URefCon, Int16, DarwinBoolean) -> Void
typealias ThemeButtonDrawProcPtr = @convention(c) (UnsafePointer<Rect>, ThemeButtonKind, UnsafePointer<ThemeButtonDrawInfo>, URefCon, Int16, DarwinBoolean) -> Void
typealias WindowTitleDrawingProcPtr = @convention(c) (UnsafePointer<Rect>, Int16, DarwinBoolean, URefCon) -> Void
typealias ThemeIteratorProcPtr = @convention(c) (ConstStr255Param, Int16, Collection, PRefCon) -> DarwinBoolean
typealias ThemeTabTitleDrawUPP = ThemeTabTitleDrawProcPtr
typealias ThemeEraseUPP = ThemeEraseProcPtr
typealias ThemeButtonDrawUPP = ThemeButtonDrawProcPtr
typealias WindowTitleDrawingUPP = WindowTitleDrawingProcPtr
typealias ThemeIteratorUPP = ThemeIteratorProcPtr
typealias MenuTitleDrawingProcPtr = @convention(c) (UnsafePointer<Rect>, Int16, DarwinBoolean, SRefCon) -> Void
typealias MenuItemDrawingProcPtr = @convention(c) (UnsafePointer<Rect>, Int16, DarwinBoolean, SRefCon) -> Void
typealias MenuTitleDrawingUPP = MenuTitleDrawingProcPtr
typealias MenuItemDrawingUPP = MenuItemDrawingProcPtr
var appearanceBadBrushIndexErr: Int { get }
var appearanceProcessRegisteredErr: Int { get }
var appearanceProcessNotRegisteredErr: Int { get }
var appearanceBadTextColorIndexErr: Int { get }
var appearanceThemeHasNoAccents: Int { get }
var appearanceBadCursorIndexErr: Int { get }
var kThemeActiveDialogBackgroundBrush: Int { get }
var kThemeInactiveDialogBackgroundBrush: Int { get }
var kThemeActiveAlertBackgroundBrush: Int { get }
var kThemeInactiveAlertBackgroundBrush: Int { get }
var kThemeActiveModelessDialogBackgroundBrush: Int { get }
var kThemeInactiveModelessDialogBackgroundBrush: Int { get }
var kThemeActiveUtilityWindowBackgroundBrush: Int { get }
var kThemeInactiveUtilityWindowBackgroundBrush: Int { get }
var kThemeListViewSortColumnBackgroundBrush: Int { get }
var kThemeListViewBackgroundBrush: Int { get }
var kThemeIconLabelBackgroundBrush: Int { get }
var kThemeListViewSeparatorBrush: Int { get }
var kThemeChasingArrowsBrush: Int { get }
var kThemeDragHiliteBrush: Int { get }
var kThemeDocumentWindowBackgroundBrush: Int { get }
var kThemeFinderWindowBackgroundBrush: Int { get }
var kThemeActiveScrollBarDelimiterBrush: Int { get }
var kThemeInactiveScrollBarDelimiterBrush: Int { get }
var kThemeFocusHighlightBrush: Int { get }
var kThemeActivePopupArrowBrush: Int { get }
var kThemePressedPopupArrowBrush: Int { get }
var kThemeInactivePopupArrowBrush: Int { get }
var kThemeAppleGuideCoachmarkBrush: Int { get }
var kThemeActiveDialogTextColor: Int { get }
var kThemeInactiveDialogTextColor: Int { get }
var kThemeActiveAlertTextColor: Int { get }
var kThemeInactiveAlertTextColor: Int { get }
var kThemeActiveModelessDialogTextColor: Int { get }
var kThemeInactiveModelessDialogTextColor: Int { get }
var kThemeActiveWindowHeaderTextColor: Int { get }
var kThemeInactiveWindowHeaderTextColor: Int { get }
var kThemeActivePlacardTextColor: Int { get }
var kThemeInactivePlacardTextColor: Int { get }
var kThemePressedPlacardTextColor: Int { get }
var kThemeActivePushButtonTextColor: Int { get }
var kThemeInactivePushButtonTextColor: Int { get }
var kThemePressedPushButtonTextColor: Int { get }
var kThemeActiveBevelButtonTextColor: Int { get }
var kThemeInactiveBevelButtonTextColor: Int { get }
var kThemePressedBevelButtonTextColor: Int { get }
var kThemeActivePopupButtonTextColor: Int { get }
var kThemeInactivePopupButtonTextColor: Int { get }
var kThemePressedPopupButtonTextColor: Int { get }
var kThemeIconLabelTextColor: Int { get }
var kThemeListViewTextColor: Int { get }
var kThemeActiveDocumentWindowTitleTextColor: Int { get }
var kThemeInactiveDocumentWindowTitleTextColor: Int { get }
var kThemeActiveMovableModalWindowTitleTextColor: Int { get }
var kThemeInactiveMovableModalWindowTitleTextColor: Int { get }
var kThemeActiveUtilityWindowTitleTextColor: Int { get }
var kThemeInactiveUtilityWindowTitleTextColor: Int { get }
var kThemeActivePopupWindowTitleColor: Int { get }
var kThemeInactivePopupWindowTitleColor: Int { get }
var kThemeActiveRootMenuTextColor: Int { get }
var kThemeSelectedRootMenuTextColor: Int { get }
var kThemeDisabledRootMenuTextColor: Int { get }
var kThemeActiveMenuItemTextColor: Int { get }
var kThemeSelectedMenuItemTextColor: Int { get }
var kThemeDisabledMenuItemTextColor: Int { get }
var kThemeActivePopupLabelTextColor: Int { get }
var kThemeInactivePopupLabelTextColor: Int { get }
var kAEThemeSwitch: Int { get }
var kThemeNoAdornment: Int { get }
var kThemeDefaultAdornment: Int { get }
var kThemeFocusAdornment: Int { get }
var kThemeRightToLeftAdornment: Int { get }
var kThemeDrawIndicatorOnly: Int { get }
var kThemeBrushPassiveAreaFill: Int { get }
var kThemeScrollBar: Int { get }
var kThemeSlider: Int { get }
var kThemeProgressBar: Int { get }
var kThemeIndeterminateBar: Int { get }
var kEventParamPostTarget: Int { get }
var typeEventTargetRef: Int { get }
var kEventParamPostOptions: Int { get }
var typeEventTargetOptions: Int { get }
var kEventParamWindowRef: Int { get }
var kEventParamGrafPort: Int { get }
var kEventParamMenuRef: Int { get }
var kEventParamEventRef: Int { get }
var kEventParamControlRef: Int { get }
var kEventParamRgnHandle: Int { get }
var kEventParamEnabled: Int { get }
var kEventParamDimensions: Int { get }
var kEventParamBounds: Int { get }
var kEventParamAvailableBounds: Int { get }
var kEventParamAEEventID: Int { get }
var kEventParamAEEventClass: Int { get }
var kEventParamCGContextRef: Int { get }
var kEventParamCGImageRef: Int { get }
var kEventParamDeviceDepth: Int { get }
var kEventParamDeviceColor: Int { get }
var kEventParamMutableArray: Int { get }
var kEventParamResult: Int { get }
var kEventParamMinimumSize: Int { get }
var kEventParamMaximumSize: Int { get }
var kEventParamAttributes: Int { get }
var kEventParamReason: Int { get }
var kEventParamTransactionID: Int { get }
var kEventParamDisplayDevice: Int { get }
var kEventParamGDevice: Int { get }
var kEventParamIndex: Int { get }
var kEventParamUserData: Int { get }
var kEventParamShape: Int { get }
var typeWindowRef: Int { get }
var typeGrafPtr: Int { get }
var typeGWorldPtr: Int { get }
var typeMenuRef: Int { get }
var typeControlRef: Int { get }
var typeCollection: Int { get }
var typeQDRgnHandle: Int { get }
var typeOSStatus: Int { get }
var typeCFIndex: Int { get }
var typeCGContextRef: Int { get }
var typeCGImageRef: Int { get }
var typeHIPoint: Int { get }
var typeHISize: Int { get }
var typeHIRect: Int { get }
var typeHIShapeRef: Int { get }
var typeVoidPtr: Int { get }
var typeGDHandle: Int { get }
var typeCGDisplayID: Int { get }
var typeCGFloat: Int { get }
var typeHIPoint72DPIGlobal: Int { get }
var typeHIPointScreenPixel: Int { get }
var typeHISize72DPIGlobal: Int { get }
var typeHISizeScreenPixel: Int { get }
var typeHIRect72DPIGlobal: Int { get }
var typeHIRectScreenPixel: Int { get }
var typeCGFloat72DPIGlobal: Int { get }
var typeCGFloatScreenPixel: Int { get }
var kEventParamDisplayChangeFlags: Int { get }
var typeCGDisplayChangeFlags: Int { get }
var typeRefCon: Int { get }
var typeByteCount: Int { get }
var typeByteOffset: Int { get }
var typeSignedByteCount: Int { get }
var typeSignedByteOffset: Int { get }
var kEventParamMouseLocation: Int { get }
var kEventParamWindowMouseLocation: Int { get }
var kEventParamMouseButton: Int { get }
var kEventParamClickCount: Int { get }
var kEventParamMouseWheelAxis: Int { get }
var kEventParamMouseWheelDelta: Int { get }
var kEventParamMouseWheelSmoothVerticalDelta: Int { get }
var kEventParamMouseWheelSmoothHorizontalDelta: Int { get }
var kEventParamDirectionInverted: Int { get }
var kEventParamMouseDelta: Int { get }
var kEventParamMouseChord: Int { get }
var kEventParamTabletEventType: Int { get }
var kEventParamMouseTrackingRef: Int { get }
var typeMouseButton: Int { get }
var typeMouseWheelAxis: Int { get }
var typeMouseTrackingRef: Int { get }
var kEventParamMagnificationAmount: Int { get }
var kEventParamRotationAmount: Int { get }
var kEventParamSwipeDirection: Int { get }
var kEventParamKeyCode: Int { get }
var kEventParamKeyMacCharCodes: Int { get }
var kEventParamKeyModifiers: Int { get }
var kEventParamKeyUnicodes: Int { get }
var kEventParamKeyboardType: Int { get }
var typeEventHotKeyID: Int { get }
var kEventParamTSMSendRefCon: Int { get }
var kEventParamTSMSendComponentInstance: Int { get }
var kEventParamTextInputSendRefCon: Int { get }
var kEventParamTextInputSendComponentInstance: Int { get }
var kEventParamTextInputSendSLRec: Int { get }
var kEventParamTextInputReplySLRec: Int { get }
var kEventParamTextInputSendText: Int { get }
var kEventParamTextInputReplyText: Int { get }
var kEventParamTextInputSendAttributedString: Int { get }
var kEventParamTextInputReplyAttributedString: Int { get }
var kEventParamTextInputSendUpdateRng: Int { get }
var kEventParamTextInputSendHiliteRng: Int { get }
var kEventParamTextInputSendClauseRng: Int { get }
var kEventParamTextInputSendPinRng: Int { get }
var kEventParamTextInputSendFixLen: Int { get }
var kEventParamTextInputSendLeadingEdge: Int { get }
var kEventParamTextInputReplyLeadingEdge: Int { get }
var kEventParamTextInputSendTextOffset: Int { get }
var kEventParamTextInputReplyTextOffset: Int { get }
var kEventParamTextInputReplyRegionClass: Int { get }
var kEventParamTextInputSendCurrentPoint: Int { get }
var kEventParamTextInputSendDraggingMode: Int { get }
var kEventParamTextInputReplyPoint: Int { get }
var kEventParamTextInputReplyFont: Int { get }
var kEventParamTextInputReplyFMFont: Int { get }
var kEventParamTextInputReplyPointSize: Int { get }
var kEventParamTextInputReplyLineHeight: Int { get }
var kEventParamTextInputReplyLineAscent: Int { get }
var kEventParamTextInputReplyCTFontRef: Int { get }
var kEventParamTextInputReplyATSFont: Int { get }
var kEventParamTextInputReplyTextAngle: Int { get }
var kEventParamTextInputSendShowHide: Int { get }
var kEventParamTextInputReplyShowHide: Int { get }
var kEventParamTextInputSendKeyboardEvent: Int { get }
var kEventParamTextInputSendTextServiceEncoding: Int { get }
var kEventParamTextInputSendTextServiceMacEncoding: Int { get }
var kEventParamTextInputReplyMacEncoding: Int { get }
var kEventParamTextInputGlyphInfoArray: Int { get }
var kEventParamTextInputSendGlyphInfoArray: Int { get }
var kEventParamTextInputReplyGlyphInfoArray: Int { get }
var kEventParamTextInputSendReplaceRange: Int { get }
var kEventParamTextInputSendMouseEvent: Int { get }
var kEventParamTSMDocAccessSendRefCon: Int { get }
var kEventParamTSMDocAccessSendComponentInstance: Int { get }
var kEventParamTSMDocAccessCharacterCount: Int { get }
var kEventParamTSMDocAccessReplyCharacterRange: Int { get }
var kEventParamTSMDocAccessReplyCharactersPtr: Int { get }
var kEventParamTSMDocAccessSendCharacterIndex: Int { get }
var kEventParamTSMDocAccessSendCharacterRange: Int { get }
var kEventParamTSMDocAccessSendCharactersPtr: Int { get }
var kEventParamTSMDocAccessRequestedCharacterAttributes: Int { get }
var kEventParamTSMDocAccessReplyCTFontRef: Int { get }
var kEventParamTSMDocAccessReplyATSFont: Int { get }
var kEventParamTSMDocAccessReplyFontSize: Int { get }
var kEventParamTSMDocAccessEffectiveRange: Int { get }
var kEventParamTSMDocAccessReplyCTGlyphInfoRef: Int { get }
var kEventParamTSMDocAccessReplyATSUGlyphSelector: Int { get }
var kEventParamTSMDocAccessLockCount: Int { get }
var kEventParamTSMDocAccessLineBounds: Int { get }
var kEventParamTSMDocAccessBaselineDelta: Int { get }
var typeATSFontRef: Int { get }
var typeGlyphSelector: Int { get }
var kEventParamHICommand: Int { get }
var typeHICommand: Int { get }
var kEventParamWindowFeatures: Int { get }
var kEventParamWindowDefPart: Int { get }
var kEventParamWindowPartCode: Int { get }
var kEventParamCurrentBounds: Int { get }
var kEventParamOriginalBounds: Int { get }
var kEventParamPreviousBounds: Int { get }
var kEventParamClickActivation: Int { get }
var kEventParamWindowRegionCode: Int { get }
var kEventParamWindowContentBounds: Int { get }
var kEventParamWindowDragHiliteFlag: Int { get }
var kEventParamWindowModifiedFlag: Int { get }
var kEventParamWindowProxyGWorldPtr: Int { get }
var kEventParamWindowProxyImageRgn: Int { get }
var kEventParamWindowProxyOutlineRgn: Int { get }
var kEventParamWindowStateChangedFlags: Int { get }
var kEventParamWindowTitleFullWidth: Int { get }
var kEventParamWindowTitleTextWidth: Int { get }
var kEventParamWindowGrowRect: Int { get }
var kEventParamPreviousDockRect: Int { get }
var kEventParamPreviousDockDevice: Int { get }
var kEventParamCurrentDockRect: Int { get }
var kEventParamCurrentDockDevice: Int { get }
var kEventParamWindowTransitionAction: Int { get }
var kEventParamWindowTransitionEffect: Int { get }
var typeWindowRegionCode: Int { get }
var typeWindowDefPartCode: Int { get }
var typeWindowPartCode: Int { get }
var typeClickActivationResult: Int { get }
var typeWindowTransitionAction: Int { get }
var typeWindowTransitionEffect: Int { get }
var kEventParamControlPart: Int { get }
var kEventParamInitCollection: Int { get }
var kEventParamControlMessage: Int { get }
var kEventParamControlParam: Int { get }
var kEventParamControlResult: Int { get }
var kEventParamControlRegion: Int { get }
var kEventParamControlAction: Int { get }
var kEventParamControlIndicatorDragConstraint: Int { get }
var kEventParamControlIndicatorRegion: Int { get }
var kEventParamControlIsGhosting: Int { get }
var kEventParamControlIndicatorOffset: Int { get }
var kEventParamControlClickActivationResult: Int { get }
var kEventParamControlSubControl: Int { get }
var kEventParamControlOptimalBounds: Int { get }
var kEventParamControlOptimalBaselineOffset: Int { get }
var kEventParamControlDataTag: Int { get }
var kEventParamControlDataBuffer: Int { get }
var kEventParamControlDataBufferSize: Int { get }
var kEventParamControlDrawDepth: Int { get }
var kEventParamControlDrawInColor: Int { get }
var kEventParamControlDrawEngraved: Int { get }
var kEventParamControlFeatures: Int { get }
var kEventParamControlPartBounds: Int { get }
var kEventParamControlOriginalOwningWindow: Int { get }
var kEventParamControlCurrentOwningWindow: Int { get }
var kEventParamControlFocusEverything: Int { get }
var kEventParamNextControl: Int { get }
var kEventParamStartControl: Int { get }
var kEventParamControlSubview: Int { get }
var kEventParamControlPreviousPart: Int { get }
var kEventParamControlCurrentPart: Int { get }
var kEventParamControlInvalRgn: Int { get }
var kEventParamControlValue: Int { get }
var kEventParamControlHit: Int { get }
var kEventParamControlPartAutoRepeats: Int { get }
var kEventParamControlFrameMetrics: Int { get }
var kEventParamControlWouldAcceptDrop: Int { get }
var kEventParamControlPrefersShape: Int { get }
var typeControlActionUPP: Int { get }
var typeIndicatorDragConstraint: Int { get }
var typeControlPartCode: Int { get }
var typeControlFrameMetrics: Int { get }
var kEventParamCurrentMenuTrackingMode: Int { get }
var kEventParamNewMenuTrackingMode: Int { get }
var kEventParamMenuFirstOpen: Int { get }
var kEventParamMenuItemIndex: Int { get }
var kEventParamMenuCommand: Int { get }
var kEventParamEnableMenuForKeyEvent: Int { get }
var kEventParamMenuEventOptions: Int { get }
var kEventParamMenuContext: Int { get }
var kEventParamMenuDismissed: Int { get }
var kEventParamMenuItemBounds: Int { get }
var kEventParamMenuMarkBounds: Int { get }
var kEventParamMenuIconBounds: Int { get }
var kEventParamMenuTextBounds: Int { get }
var kEventParamMenuTextBaseline: Int { get }
var kEventParamMenuCommandKeyBounds: Int { get }
var kEventParamMenuVirtualTop: Int { get }
var kEventParamMenuVirtualBottom: Int { get }
var kEventParamMenuDrawState: Int { get }
var kEventParamMenuItemType: Int { get }
var kEventParamMenuItemWidth: Int { get }
var kEventParamMenuItemHeight: Int { get }
var kEventParamMenuFrameView: Int { get }
var kEventParamMenuType: Int { get }
var kEventParamMenuIsPopup: Int { get }
var kEventParamMenuDirection: Int { get }
var kEventParamParentMenu: Int { get }
var kEventParamParentMenuItem: Int { get }
var kEventParamMenuPopupItem: Int { get }
var kEventParamMenuContextHeight: Int { get }
var typeMenuItemIndex: Int { get }
var typeMenuCommand: Int { get }
var typeMenuTrackingMode: Int { get }
var typeMenuEventOptions: Int { get }
var typeThemeMenuState: Int { get }
var typeThemeMenuItemType: Int { get }
var typeMenuDirection: Int { get }
var typeThemeMenuType: Int { get }
var kEventParamProcessID: Int { get }
var kEventParamLaunchRefCon: Int { get }
var kEventParamLaunchErr: Int { get }
var kEventParamSystemUIMode: Int { get }
var kEventParamSystemUIOptions: Int { get }
var kEventParamIsInInstantMouser: Int { get }
var kEventParamPreviousWindow: Int { get }
var kEventParamCurrentWindow: Int { get }
var kEventParamTabletPointRec: Int { get }
var kEventParamTabletProximityRec: Int { get }
var typeTabletPointRec: Int { get }
var typeTabletProximityRec: Int { get }
var kEventParamNewScrollBarVariant: Int { get }
var kEventParamPasteboardRef: Int { get }
var kEventParamScrapRef: Int { get }
var kEventParamServiceCopyTypes: Int { get }
var kEventParamServicePasteTypes: Int { get }
var kEventParamServiceMessageName: Int { get }
var kEventParamServiceUserData: Int { get }
var typePasteboardRef: Int { get }
var typeScrapRef: Int { get }
var kEventParamAccessibleObject: Int { get }
var kEventParamAccessibleChild: Int { get }
var kEventParamAccessibleAttributeName: Int { get }
var kEventParamAccessibleAttributeNames: Int { get }
var kEventParamAccessibleAttributeValue: Int { get }
var kEventParamAccessibleAttributeSettable: Int { get }
var kEventParamAccessibleAttributeParameter: Int { get }
var kEventParamAccessibleActionName: Int { get }
var kEventParamAccessibleActionNames: Int { get }
var kEventParamAccessibleActionDescription: Int { get }
var kEventParamAccessibilityEventQueued: Int { get }
var typeCFRange: Int { get }
var kEventParamAppleEvent: Int { get }
var kEventParamAppleEventReply: Int { get }
typealias MouseTrackingResult = UInt16
var kMouseTrackingMouseDown: Int { get }
var kMouseTrackingMouseUp: Int { get }
var kMouseTrackingMouseExited: Int { get }
var kMouseTrackingMouseEntered: Int { get }
var kMouseTrackingMouseDragged: Int { get }
var kMouseTrackingKeyModifiersChanged: Int { get }
var kMouseTrackingUserCancelled: Int { get }
var kMouseTrackingTimedOut: Int { get }
var kMouseTrackingMouseMoved: Int { get }
var kMouseTrackingClientEvent: Int { get }
var kMouseTrackingScrollWheel: Int { get }
var kTrackMouseLocationOptionDontConsumeMouseUp: Int { get }
var kTrackMouseLocationOptionIncludeScrollWheel: Int { get }
func CheckEventQueueForUserCancel() -> Bool
func IsUserCancelEventRef(event: EventRef) -> Bool
var kMouseParamsSticky: Int { get }
var kMouseParamsProxyIcon: Int { get }
var kMouseParamsClickAndHold: Int { get }
var kMouseParamsDragInitiation: Int { get }
func HIMouseTrackingGetParameters(inSelector: OSType, _ outTime: UnsafeMutablePointer<EventTime>, _ outDistance: UnsafeMutablePointer<HISize>) -> OSStatus
var kEventClassMouse: Int { get }
var kEventClassKeyboard: Int { get }
var kEventClassTextInput: Int { get }
var kEventClassApplication: Int { get }
var kEventClassAppleEvent: Int { get }
var kEventClassMenu: Int { get }
var kEventClassWindow: Int { get }
var kEventClassControl: Int { get }
var kEventClassCommand: Int { get }
var kEventClassTablet: Int { get }
var kEventClassVolume: Int { get }
var kEventClassAppearance: Int { get }
var kEventClassService: Int { get }
var kEventClassToolbar: Int { get }
var kEventClassToolbarItem: Int { get }
var kEventClassToolbarItemView: Int { get }
var kEventClassAccessibility: Int { get }
var kEventClassSystem: Int { get }
var kEventClassInk: Int { get }
var kEventClassTSMDocumentAccess: Int { get }
var kEventClassGesture: Int { get }
typealias EventMouseButton = UInt16
var kEventMouseButtonPrimary: Int { get }
var kEventMouseButtonSecondary: Int { get }
var kEventMouseButtonTertiary: Int { get }
typealias EventMouseWheelAxis = UInt16
var kEventMouseWheelAxisX: Int { get }
var kEventMouseWheelAxisY: Int { get }
var kEventMouseDown: Int { get }
var kEventMouseUp: Int { get }
var kEventMouseMoved: Int { get }
var kEventMouseDragged: Int { get }
var kEventMouseEntered: Int { get }
var kEventMouseExited: Int { get }
var kEventMouseWheelMoved: Int { get }
var kEventMouseScroll: Int { get }
var kEventGestureStarted: Int { get }
var kEventGestureEnded: Int { get }
var kEventGestureMagnify: Int { get }
var kEventGestureSwipe: Int { get }
var kEventGestureRotate: Int { get }
var kEventTSMDocumentAccessGetLength: Int { get }
var kEventTSMDocumentAccessGetSelectedRange: Int { get }
var kEventTSMDocumentAccessGetCharactersPtr: Int { get }
var kEventTSMDocumentAccessGetCharactersPtrForLargestBuffer: Int { get }
var kEventTSMDocumentAccessGetCharacters: Int { get }
var kTSMDocAccessFontSizeAttributeBit: Int { get }
var kTSMDocAccessEffectiveRangeAttributeBit: Int { get }
typealias TSMDocAccessAttributes = UInt32
var kTSMDocAccessFontSizeAttribute: Int { get }
var kTSMDocAccessEffectiveRangeAttribute: Int { get }
var kEventTSMDocumentAccessGetFont: Int { get }
var kEventTSMDocumentAccessGetGlyphInfo: Int { get }
var kEventTSMDocumentAccessGetFirstRectForRange: Int { get }
var kEventTSMDocumentAccessLockDocument: Int { get }
var kEventTSMDocumentAccessUnlockDocument: Int { get }
var kEventTextInputUpdateActiveInputArea: Int { get }
var kEventTextInputUnicodeForKeyEvent: Int { get }
var kEventTextInputOffsetToPos: Int { get }
var kEventTextInputPosToOffset: Int { get }
var kEventTextInputShowHideBottomWindow: Int { get }
var kEventTextInputGetSelectedText: Int { get }
var kEventTextInputUnicodeText: Int { get }
var kEventTextInputFilterText: Int { get }
var kEventTextInputIsMouseEventInInlineInputArea: Int { get }
var kEventRawKeyDown: Int { get }
var kEventRawKeyRepeat: Int { get }
var kEventRawKeyUp: Int { get }
var kEventRawKeyModifiersChanged: Int { get }
var kEventHotKeyPressed: Int { get }
var kEventHotKeyReleased: Int { get }
var kEventKeyModifierNumLockBit: Int { get }
var kEventKeyModifierFnBit: Int { get }
var kEventKeyModifierNumLockMask: Int { get }
var kEventKeyModifierFnMask: Int { get }
var kEventAppActivated: Int { get }
var kEventAppDeactivated: Int { get }
var kEventAppQuit: Int { get }
var kEventAppLaunchNotification: Int { get }
var kEventAppLaunched: Int { get }
var kEventAppTerminated: Int { get }
var kEventAppFrontSwitched: Int { get }
var kEventAppHidden: Int { get }
var kEventAppShown: Int { get }
var kEventAppSystemUIModeChanged: Int { get }
var kAvailBoundsChangedForDock: Int { get }
var kAvailBoundsChangedForDisplay: Int { get }
var kAvailBoundsChangedForMenuBar: Int { get }
var kEventAppAvailableWindowBoundsChanged: Int { get }
var kEventAppActiveWindowChanged: Int { get }
var kEventAppGetDockTileMenu: Int { get }
var kEventAppUpdateDockTile: Int { get }
var kEventAppFocusMenuBar: Int { get }
var kEventAppFocusNextDocumentWindow: Int { get }
var kEventAppFocusNextFloatingWindow: Int { get }
var kEventAppFocusToolbar: Int { get }
var kEventAppFocusDrawer: Int { get }
var kEventAppIsEventInInstantMouser: Int { get }
var kEventAppleEvent: Int { get }
var kEventWindowActivated: Int { get }
var kEventWindowDeactivated: Int { get }
var kEventWindowHandleActivate: Int { get }
var kEventWindowHandleDeactivate: Int { get }
var kEventWindowGetClickActivation: Int { get }
var kHIModalClickIsModal: Int { get }
var kHIModalClickAllowEvent: Int { get }
var kHIModalClickAnnounce: Int { get }
var kHIModalClickRaiseWindow: Int { get }
typealias HIModalClickResult = UInt32
var typeModalClickResult: Int { get }
var typeWindowModality: Int { get }
var kEventParamModalClickResult: Int { get }
var kEventParamModalWindow: Int { get }
var kEventParamWindowModality: Int { get }
var kEventWindowGetClickModality: Int { get }
var kWindowBoundsChangeUserDrag: Int { get }
var kWindowBoundsChangeUserResize: Int { get }
var kWindowBoundsChangeSizeChanged: Int { get }
var kWindowBoundsChangeOriginChanged: Int { get }
var kWindowBoundsChangeZoom: Int { get }
var kEventWindowShowing: Int { get }
var kEventWindowHiding: Int { get }
var kEventWindowShown: Int { get }
var kEventWindowHidden: Int { get }
var kEventWindowCollapsing: Int { get }
var kEventWindowCollapsed: Int { get }
var kEventWindowExpanding: Int { get }
var kEventWindowExpanded: Int { get }
var kEventWindowZoomed: Int { get }
var kEventWindowBoundsChanging: Int { get }
var kEventWindowBoundsChanged: Int { get }
var kEventWindowResizeStarted: Int { get }
var kEventWindowResizeCompleted: Int { get }
var kEventWindowDragStarted: Int { get }
var kEventWindowDragCompleted: Int { get }
var kEventWindowClosed: Int { get }
var kEventWindowTransitionStarted: Int { get }
var kEventWindowTransitionCompleted: Int { get }
var kEventWindowCursorChange: Int { get }
var kEventWindowCollapse: Int { get }
var kEventWindowCollapseAll: Int { get }
var kEventWindowExpand: Int { get }
var kEventWindowExpandAll: Int { get }
var kEventWindowClose: Int { get }
var kEventWindowCloseAll: Int { get }
var kEventWindowZoom: Int { get }
var kEventWindowZoomAll: Int { get }
var kEventWindowContextualMenuSelect: Int { get }
var kEventWindowPathSelect: Int { get }
var kEventWindowGetIdealSize: Int { get }
var kEventWindowGetIdealStandardState: Int { get }
var kEventWindowGetMinimumSize: Int { get }
var kEventWindowGetMaximumSize: Int { get }
var kEventWindowConstrain: Int { get }
var kEventWindowRestoreFromDock: Int { get }
var kEventWindowProxyBeginDrag: Int { get }
var kEventWindowProxyEndDrag: Int { get }
var kEventWindowGetDockTileMenu: Int { get }
var kEventWindowUpdateDockTile: Int { get }
var kEventWindowColorSpaceChanged: Int { get }
var kEventWindowRestoredAfterRelaunch: Int { get }
var kEventWindowToolbarSwitchMode: Int { get }
var kEventWindowFocusAcquired: Int { get }
var kEventWindowFocusRelinquish: Int { get }
var kEventWindowFocusLost: Int { get }
var kEventWindowFocusRestored: Int { get }
var kEventWindowFocusContent: Int { get }
var kEventWindowFocusToolbar: Int { get }
var kEventWindowFocusDrawer: Int { get }
var kEventWindowSheetOpening: Int { get }
var kEventWindowSheetOpened: Int { get }
var kEventWindowSheetClosing: Int { get }
var kEventWindowSheetClosed: Int { get }
var kEventWindowDrawerOpening: Int { get }
var kEventWindowDrawerOpened: Int { get }
var kEventWindowDrawerClosing: Int { get }
var kEventWindowDrawerClosed: Int { get }
var kEventWindowDrawFrame: Int { get }
var kEventWindowDrawPart: Int { get }
var kEventWindowGetRegion: Int { get }
var kEventWindowHitTest: Int { get }
var kEventWindowInit: Int { get }
var kEventWindowDispose: Int { get }
var kEventWindowDragHilite: Int { get }
var kEventWindowModified: Int { get }
var kEventWindowSetupProxyDragImage: Int { get }
var kEventWindowStateChanged: Int { get }
var kEventWindowMeasureTitle: Int { get }
var kEventWindowDrawGrowBox: Int { get }
var kEventWindowGetGrowImageRegion: Int { get }
var kEventWindowPaint: Int { get }
var kEventWindowAttributesChanged: Int { get }
var kEventWindowTitleChanged: Int { get }
var kEventWindowGetFullScreenContentSize: Int { get }
var kEventWindowFullScreenEnterStarted: Int { get }
var kEventWindowFullScreenEnterCompleted: Int { get }
var kEventWindowFullScreenExitStarted: Int { get }
var kEventWindowFullScreenExitCompleted: Int { get }
var kMenuContextMenuBar: Int { get }
var kMenuContextPullDown: Int { get }
var kMenuContextPopUp: Int { get }
var kMenuContextSubmenu: Int { get }
var kMenuContextMenuBarTracking: Int { get }
var kMenuContextPopUpTracking: Int { get }
var kMenuContextKeyMatching: Int { get }
var kMenuContextMenuEnabling: Int { get }
var kMenuContextCommandIDSearch: Int { get }
var kMenuContextInspection: Int { get }
var kMenuContextContextualMenu: Int { get }
var kMenuContextDontUpdateText: Int { get }
var kMenuContextDontUpdateKey: Int { get }
var kMenuContextDontUpdateIcon: Int { get }
var kMenuContextDontUpdateEnabled: Int { get }
var kHIMenuRightDirection: Int { get }
var kHIMenuLeftDirection: Int { get }
var kHIMenuCenterDirection: Int { get }
var kEventMenuBeginTracking: Int { get }
var kEventMenuEndTracking: Int { get }
var kEventMenuChangeTrackingMode: Int { get }
var kEventMenuOpening: Int { get }
var kEventMenuClosed: Int { get }
var kEventMenuTargetItem: Int { get }
var kEventMenuMatchKey: Int { get }
var kEventMenuEnableItems: Int { get }
var kEventMenuPopulate: Int { get }
var kEventMenuDispose: Int { get }
var kEventMenuMeasureItemWidth: Int { get }
var kEventMenuMeasureItemHeight: Int { get }
var kEventMenuDrawItem: Int { get }
var kEventMenuDrawItemContent: Int { get }
var kEventMenuCalculateSize: Int { get }
var kEventMenuCreateFrameView: Int { get }
var kEventMenuGetFrameBounds: Int { get }
var kEventMenuBecomeScrollable: Int { get }
var kEventMenuCeaseToBeScrollable: Int { get }
var kEventMenuBarShown: Int { get }
var kEventMenuBarHidden: Int { get }
var kEventCommandProcess: Int { get }
var kEventCommandUpdateStatus: Int { get }
var kHICommandOK: Int { get }
var kHICommandCancel: Int { get }
var kHICommandQuit: Int { get }
var kHICommandQuitAndDiscardWindows: Int { get }
var kHICommandQuitAndKeepWindows: Int { get }
var kHICommandUndo: Int { get }
var kHICommandRedo: Int { get }
var kHICommandCut: Int { get }
var kHICommandCopy: Int { get }
var kHICommandPaste: Int { get }
var kHICommandClear: Int { get }
var kHICommandSelectAll: Int { get }
var kHICommandHide: Int { get }
var kHICommandHideOthers: Int { get }
var kHICommandShowAll: Int { get }
var kHICommandPreferences: Int { get }
var kHICommandZoomWindow: Int { get }
var kHICommandMinimizeWindow: Int { get }
var kHICommandMinimizeAll: Int { get }
var kHICommandMaximizeWindow: Int { get }
var kHICommandMaximizeAll: Int { get }
var kHICommandArrangeInFront: Int { get }
var kHICommandBringAllToFront: Int { get }
var kHICommandWindowListSeparator: Int { get }
var kHICommandWindowListTerminator: Int { get }
var kHICommandSelectWindow: Int { get }
var kHICommandRotateWindowsForward: Int { get }
var kHICommandRotateWindowsBackward: Int { get }
var kHICommandRotateFloatingWindowsForward: Int { get }
var kHICommandRotateFloatingWindowsBackward: Int { get }
var kHICommandToggleFullScreen: Int { get }
var kHICommandAbout: Int { get }
var kHICommandNew: Int { get }
var kHICommandOpen: Int { get }
var kHICommandClose: Int { get }
var kHICommandCloseAll: Int { get }
var kHICommandCloseFile: Int { get }
var kHICommandSave: Int { get }
var kHICommandSaveAs: Int { get }
var kHICommandRevert: Int { get }
var kHICommandPrint: Int { get }
var kHICommandPageSetup: Int { get }
var kHICommandAppHelp: Int { get }
var kHICommandShowCharacterPalette: Int { get }
var kHICommandShowSpellingPanel: Int { get }
var kHICommandCheckSpelling: Int { get }
var kHICommandChangeSpelling: Int { get }
var kHICommandCheckSpellingAsYouType: Int { get }
var kHICommandIgnoreSpelling: Int { get }
var kHICommandLearnWord: Int { get }
var kHICommandStartDictation: Int { get }
var kHICommandFromMenu: Int { get }
var kHICommandFromControl: Int { get }
var kHICommandFromWindow: Int { get }
struct HICommand {
  struct __Unnamed_struct_menu {
    var menuRef: Unmanaged<Menu>!
    var menuItemIndex: MenuItemIndex
    init()
    init(menuRef: Unmanaged<Menu>!, menuItemIndex: MenuItemIndex)
  }
  var attributes: UInt32
  var commandID: UInt32
  var menu: HICommand.__Unnamed_struct_menu
  init()
  init(attributes: UInt32, commandID: UInt32, menu: HICommand.__Unnamed_struct_menu)
}
struct HICommandExtended {
  struct __Unnamed_union_source {
    struct __Unnamed_struct_menu {
      var menuRef: Unmanaged<Menu>!
      var menuItemIndex: MenuItemIndex
      init()
      init(menuRef: Unmanaged<Menu>!, menuItemIndex: MenuItemIndex)
    }
    var control: Unmanaged<Control>!
    var window: WindowRef
    var menu: HICommandExtended.__Unnamed_union_source.__Unnamed_struct_menu
    init(control: Unmanaged<Control>!)
    init(window: WindowRef)
    init(menu: HICommandExtended.__Unnamed_union_source.__Unnamed_struct_menu)
    init()
  }
  var attributes: UInt32
  var commandID: UInt32
  var source: HICommandExtended.__Unnamed_union_source
  init()
  init(attributes: UInt32, commandID: UInt32, source: HICommandExtended.__Unnamed_union_source)
}
var kEventControlClick: Int { get }
var kEventControlHit: Int { get }
var kEventControlInitialize: Int { get }
var kEventControlDispose: Int { get }
var kEventControlGetOptimalBounds: Int { get }
var kEventControlOptimalBoundsChanged: Int { get }
var kEventControlSimulateHit: Int { get }
var kEventControlHitTest: Int { get }
var kEventControlDraw: Int { get }
var kEventControlApplyTextColor: Int { get }
var kEventControlGetNextFocusCandidate: Int { get }
var kEventControlGetAutoToggleValue: Int { get }
var kEventControlInterceptSubviewClick: Int { get }
var kEventControlGetClickActivation: Int { get }
var kEventControlDragEnter: Int { get }
var kEventControlDragWithin: Int { get }
var kEventControlDragLeave: Int { get }
var kEventControlDragReceive: Int { get }
var kEventControlSetFocusPart: Int { get }
var kEventControlGetFocusPart: Int { get }
var kEventControlActivate: Int { get }
var kEventControlDeactivate: Int { get }
var kEventControlSetCursor: Int { get }
var kEventControlContextualMenuClick: Int { get }
var kEventControlTrack: Int { get }
var kEventControlGetScrollToHereStartPoint: Int { get }
var kEventControlGetIndicatorDragConstraint: Int { get }
var kEventControlIndicatorMoved: Int { get }
var kEventControlGhostingFinished: Int { get }
var kEventControlGetActionProcPart: Int { get }
var kEventControlGetPartRegion: Int { get }
var kEventControlGetPartBounds: Int { get }
var kEventControlSetData: Int { get }
var kEventControlGetData: Int { get }
var kEventControlGetSizeConstraints: Int { get }
var kEventControlGetFrameMetrics: Int { get }
var kEventControlValueFieldChanged: Int { get }
var kEventControlAddedSubControl: Int { get }
var kEventControlRemovingSubControl: Int { get }
var kEventControlBoundsChanged: Int { get }
var kEventControlInvalidateForSizeChange: Int { get }
var kEventControlVisibilityChanged: Int { get }
var kEventControlOwningWindowChanged: Int { get }
var kEventControlTitleChanged: Int { get }
var kEventControlHiliteChanged: Int { get }
var kEventControlEnabledStateChanged: Int { get }
var kEventControlLayoutInfoChanged: Int { get }
var kEventControlFocusPartChanged: Int { get }
var kControlBoundsChangeSizeChanged: Int { get }
var kControlBoundsChangePositionChanged: Int { get }
var kEventTabletPoint: Int { get }
var kEventTabletProximity: Int { get }
struct TabletPointRec {
  var absX: Int32
  var absY: Int32
  var absZ: Int32
  var buttons: UInt16
  var pressure: UInt16
  var tiltX: Int16
  var tiltY: Int16
  var rotation: UInt16
  var tangentialPressure: Int16
  var deviceID: UInt16
  var vendor1: Int16
  var vendor2: Int16
  var vendor3: Int16
  init()
  init(absX: Int32, absY: Int32, absZ: Int32, buttons: UInt16, pressure: UInt16, tiltX: Int16, tiltY: Int16, rotation: UInt16, tangentialPressure: Int16, deviceID: UInt16, vendor1: Int16, vendor2: Int16, vendor3: Int16)
}
typealias TabletPointerRec = TabletPointRec
struct TabletProximityRec {
  var vendorID: UInt16
  var tabletID: UInt16
  var pointerID: UInt16
  var deviceID: UInt16
  var systemTabletID: UInt16
  var vendorPointerType: UInt16
  var pointerSerialNumber: UInt32
  var uniqueID: UInt64
  var capabilityMask: UInt32
  var pointerType: UInt8
  var enterProximity: UInt8
  init()
  init(vendorID: UInt16, tabletID: UInt16, pointerID: UInt16, deviceID: UInt16, systemTabletID: UInt16, vendorPointerType: UInt16, pointerSerialNumber: UInt32, uniqueID: UInt64, capabilityMask: UInt32, pointerType: UInt8, enterProximity: UInt8)
}
var typeFSVolumeRefNum: Int { get }
var kEventVolumeMounted: Int { get }
var kEventVolumeUnmounted: Int { get }
var kEventAppearanceScrollBarVariantChanged: Int { get }
var kEventServiceCopy: Int { get }
var kEventServicePaste: Int { get }
var kEventServiceGetTypes: Int { get }
var kEventServicePerform: Int { get }
var kHIServicesMenuProviderName: String { get }
var kHIServicesMenuItemName: String { get }
var kHIServicesMenuCharCode: String { get }
var kHIServicesMenuKeyModifiers: String { get }
var kEventSystemTimeDateChanged: Int { get }
var kEventSystemDisplaysAsleep: Int { get }
var kEventSystemDisplaysAwake: Int { get }
var kEventSystemDisplayReconfigured: Int { get }
var kEventSystemUserSessionActivated: Int { get }
var kEventSystemUserSessionDeactivated: Int { get }
func GetApplicationEventTarget() -> EventTargetRef
func GetEventDispatcherTarget() -> EventTargetRef
func GetEventMonitorTarget() -> EventTargetRef
func ProcessHICommand(inCommand: UnsafePointer<HICommand>) -> OSStatus
struct EventHotKeyID {
  var signature: OSType
  var id: UInt32
  init()
  init(signature: OSType, id: UInt32)
}
typealias EventHotKeyRef = COpaquePointer
var kEventHotKeyNoOptions: Int { get }
var kEventHotKeyExclusive: Int { get }
func RegisterEventHotKey(inHotKeyCode: UInt32, _ inHotKeyModifiers: UInt32, _ inHotKeyID: EventHotKeyID, _ inTarget: EventTargetRef, _ inOptions: OptionBits, _ outRef: UnsafeMutablePointer<EventHotKeyRef>) -> OSStatus
func UnregisterEventHotKey(inHotKey: EventHotKeyRef) -> OSStatus
var kHISymbolicHotKeyCode: String { get }
var kHISymbolicHotKeyModifiers: String { get }
var kHISymbolicHotKeyEnabled: String { get }
func CopySymbolicHotKeys(outHotKeyArray: UnsafeMutablePointer<Unmanaged<CFArray>?>) -> OSStatus
var kHIHotKeyModeAllEnabled: Int { get }
var kHIHotKeyModeAllDisabled: Int { get }
var kHIHotKeyModeAllDisabledExceptUniversalAccess: Int { get }
func PushSymbolicHotKeyMode(inOptions: OptionBits) -> UnsafeMutablePointer<Void>
func PopSymbolicHotKeyMode(inToken: UnsafeMutablePointer<Void>)
func GetSymbolicHotKeyMode() -> OptionBits
var kEventParamInkTextRef: Int { get }
var kEventParamInkKeyboardShortcut: Int { get }
var kEventParamInkGestureKind: Int { get }
var kEventParamInkGestureBounds: Int { get }
var kEventParamInkGestureHotspot: Int { get }
var kEventInkPoint: Int { get }
var kEventInkGesture: Int { get }
var kEventInkText: Int { get }
typealias ToolboxObjectClassRef = COpaquePointer
var kEventParamTabletPointerRec: Int { get }
var typeTabletPointerRec: Int { get }
var kEventWindowDefDrawFrame: Int { get }
var kEventWindowDefDrawPart: Int { get }
var kEventWindowDefGetRegion: Int { get }
var kEventWindowDefHitTest: Int { get }
var kEventWindowDefInit: Int { get }
var kEventWindowDefDispose: Int { get }
var kEventWindowDefDragHilite: Int { get }
var kEventWindowDefModified: Int { get }
var kEventWindowDefSetupProxyDragImage: Int { get }
var kEventWindowDefStateChanged: Int { get }
var kEventWindowDefMeasureTitle: Int { get }
var kEventWindowDefDrawGrowBox: Int { get }
var kEventWindowDefGetGrowImageRegion: Int { get }
var kEventClassEPPC: Int { get }
var kEventHighLevelEvent: Int { get }
var kEventUpdateActiveInputArea: Int { get }
var kEventUnicodeForKeyEvent: Int { get }
var kEventOffsetToPos: Int { get }
var kEventPosToOffset: Int { get }
var kEventShowHideBottomWindow: Int { get }
var kEventGetSelectedText: Int { get }
var kEventProcessCommand: Int { get }
var kEventTabletPointer: Int { get }
typealias EventClassID = UInt32
typealias EventClass = UInt32
typealias EventType = UInt32
var kMouseTrackingMousePressed: Int { get }
var kMouseTrackingMouseReleased: Int { get }
var kEventControlGetSubviewForMouseEvent: Int { get }
typealias EventRef = COpaquePointer
var eventAlreadyPostedErr: Int { get }
var eventTargetBusyErr: Int { get }
var eventClassInvalidErr: Int { get }
var eventClassIncorrectErr: Int { get }
var eventDeferAccessibilityEventErr: Int { get }
var eventHandlerAlreadyInstalledErr: Int { get }
var eventInternalErr: Int { get }
var eventKindIncorrectErr: Int { get }
var eventParameterNotFoundErr: Int { get }
var eventNotHandledErr: Int { get }
var eventLoopTimedOutErr: Int { get }
var eventLoopQuitErr: Int { get }
var eventNotInQueueErr: Int { get }
var eventHotKeyExistsErr: Int { get }
var eventHotKeyInvalidErr: Int { get }
var eventPassToNextTargetErr: Int { get }
var kEventParamDirectObject: Int { get }
var kEventParamDragRef: Int { get }
var typeDragRef: Int { get }
var typeCTFontRef: Int { get }
var typeCTGlyphInfoRef: Int { get }
typealias EventPriority = Int16
var kEventPriorityLow: Int { get }
var kEventPriorityStandard: Int { get }
var kEventPriorityHigh: Int { get }
var kEventLeaveInQueue: Int { get }
var kEventRemoveFromQueue: Int { get }
typealias EventTime = Double
typealias EventTimeout = EventTime
typealias EventTimerInterval = EventTime
struct EventTypeSpec {
  var eventClass: OSType
  var eventKind: UInt32
  init()
  init(eventClass: OSType, eventKind: UInt32)
}
typealias EventParamName = OSType
typealias EventParamType = OSType
typealias EventLoopRef = COpaquePointer
func GetCurrentEventLoop() -> EventLoopRef
func GetMainEventLoop() -> EventLoopRef
func RunCurrentEventLoop(inTimeout: EventTimeout) -> OSStatus
func QuitEventLoop(inEventLoop: EventLoopRef) -> OSStatus
func GetCFRunLoopFromEventLoop(inEventLoop: EventLoopRef) -> Unmanaged<AnyObject>!
func ReceiveNextEvent(inNumTypes: Int, _ inList: UnsafePointer<EventTypeSpec>, _ inTimeout: EventTimeout, _ inPullEvent: Bool, _ outEvent: UnsafeMutablePointer<EventRef>) -> OSStatus
typealias EventAttributes = UInt32
var kEventAttributeNone: Int { get }
var kEventAttributeUserEvent: Int { get }
var kEventAttributeMonitored: Int { get }
func CreateEvent(inAllocator: CFAllocator!, _ inClassID: OSType, _ inKind: UInt32, _ inWhen: EventTime, _ inAttributes: EventAttributes, _ outEvent: UnsafeMutablePointer<EventRef>) -> OSStatus
func CopyEvent(inOther: EventRef) -> EventRef
func CopyEventAs(inAllocator: CFAllocator!, _ inOther: EventRef, _ inEventClass: OSType, _ inEventKind: UInt32) -> EventRef
func RetainEvent(inEvent: EventRef) -> EventRef
func GetEventRetainCount(inEvent: EventRef) -> Int
func ReleaseEvent(inEvent: EventRef)
func SetEventParameter(inEvent: EventRef, _ inName: EventParamName, _ inType: EventParamType, _ inSize: Int, _ inDataPtr: UnsafePointer<Void>) -> OSStatus
func GetEventParameter(inEvent: EventRef, _ inName: EventParamName, _ inDesiredType: EventParamType, _ outActualType: UnsafeMutablePointer<EventParamType>, _ inBufferSize: Int, _ outActualSize: UnsafeMutablePointer<Int>, _ outData: UnsafeMutablePointer<Void>) -> OSStatus
func RemoveEventParameter(inEvent: EventRef, _ inName: EventParamName) -> OSStatus
func GetEventClass(inEvent: EventRef) -> OSType
func GetEventKind(inEvent: EventRef) -> UInt32
func GetEventTime(inEvent: EventRef) -> EventTime
func SetEventTime(inEvent: EventRef, _ inTime: EventTime) -> OSStatus
func CreateEventWithCGEvent(inAllocator: CFAllocator!, _ inEvent: CGEvent!, _ inAttributes: EventAttributes, _ outEvent: UnsafeMutablePointer<EventRef>) -> OSStatus
func CopyEventCGEvent(inEvent: EventRef) -> Unmanaged<CGEvent>!
typealias EventQueueRef = COpaquePointer
func GetCurrentEventQueue() -> EventQueueRef
func GetMainEventQueue() -> EventQueueRef
typealias EventComparatorProcPtr = @convention(c) (EventRef, UnsafeMutablePointer<Void>) -> DarwinBoolean
typealias EventComparatorUPP = EventComparatorProcPtr
func NewEventComparatorUPP(userRoutine: EventComparatorProcPtr!) -> EventComparatorUPP!
func DisposeEventComparatorUPP(userUPP: EventComparatorUPP!)
func InvokeEventComparatorUPP(inEvent: EventRef, _ inCompareData: UnsafeMutablePointer<Void>, _ userUPP: EventComparatorUPP!) -> Bool
func PostEventToQueue(inQueue: EventQueueRef, _ inEvent: EventRef, _ inPriority: EventPriority) -> OSStatus
func FlushEventsMatchingListFromQueue(inQueue: EventQueueRef, _ inNumTypes: Int, _ inList: UnsafePointer<EventTypeSpec>) -> OSStatus
func FlushSpecificEventsFromQueue(inQueue: EventQueueRef, _ inComparator: EventComparatorUPP!, _ inCompareData: UnsafeMutablePointer<Void>) -> OSStatus
func FlushEventQueue(inQueue: EventQueueRef) -> OSStatus
func FindSpecificEventInQueue(inQueue: EventQueueRef, _ inComparator: EventComparatorUPP!, _ inCompareData: UnsafeMutablePointer<Void>) -> EventRef
func GetNumEventsInQueue(inQueue: EventQueueRef) -> Int
func RemoveEventFromQueue(inQueue: EventQueueRef, _ inEvent: EventRef) -> OSStatus
func IsEventInQueue(inQueue: EventQueueRef, _ inEvent: EventRef) -> Bool
var kEventQueueOptionsNone: Int { get }
func AcquireFirstMatchingEventInQueue(inQueue: EventQueueRef, _ inNumTypes: Int, _ inList: UnsafePointer<EventTypeSpec>, _ inOptions: OptionBits) -> EventRef
func GetCurrentEvent() -> EventRef
func GetCurrentEventButtonState() -> UInt32
func GetCurrentEventKeyModifiers() -> UInt32
func HIGetMousePosition(inSpace: HICoordinateSpace, _ inObject: UnsafeMutablePointer<Void>, _ outPoint: UnsafeMutablePointer<HIPoint>) -> UnsafeMutablePointer<HIPoint>
func GetCurrentButtonState() -> UInt32
func GetCurrentKeyModifiers() -> UInt32
func GetCurrentEventTime() -> EventTime
typealias EventLoopTimerRef = EventLoopTimer
class EventLoopTimer {
}
typealias EventLoopTimerProcPtr = @convention(c) (EventLoopTimer!, UnsafeMutablePointer<Void>) -> Void
var kEventLoopIdleTimerStarted: Int { get }
var kEventLoopIdleTimerIdling: Int { get }
var kEventLoopIdleTimerStopped: Int { get }
typealias EventLoopIdleTimerMessage = UInt16
typealias EventLoopIdleTimerProcPtr = @convention(c) (EventLoopTimer!, EventLoopIdleTimerMessage, UnsafeMutablePointer<Void>) -> Void
typealias EventLoopTimerUPP = EventLoopTimerProcPtr
typealias EventLoopIdleTimerUPP = EventLoopIdleTimerProcPtr
func NewEventLoopTimerUPP(userRoutine: EventLoopTimerProcPtr!) -> EventLoopTimerUPP!
func NewEventLoopIdleTimerUPP(userRoutine: EventLoopIdleTimerProcPtr!) -> EventLoopIdleTimerUPP!
func DisposeEventLoopTimerUPP(userUPP: EventLoopTimerUPP!)
func DisposeEventLoopIdleTimerUPP(userUPP: EventLoopIdleTimerUPP!)
func InvokeEventLoopTimerUPP(inTimer: EventLoopTimer!, _ inUserData: UnsafeMutablePointer<Void>, _ userUPP: EventLoopTimerUPP!)
func InvokeEventLoopIdleTimerUPP(inTimer: EventLoopTimer!, _ inState: EventLoopIdleTimerMessage, _ inUserData: UnsafeMutablePointer<Void>, _ userUPP: EventLoopIdleTimerUPP!)
func InstallEventLoopTimer(inEventLoop: EventLoopRef, _ inFireDelay: EventTimerInterval, _ inInterval: EventTimerInterval, _ inTimerProc: EventLoopTimerUPP!, _ inTimerData: UnsafeMutablePointer<Void>, _ outTimer: UnsafeMutablePointer<Unmanaged<EventLoopTimer>?>) -> OSStatus
func RemoveEventLoopTimer(inTimer: EventLoopTimer!) -> OSStatus
func SetEventLoopTimerNextFireTime(inTimer: EventLoopTimer!, _ inNextFire: EventTimerInterval) -> OSStatus
typealias EventHandlerRef = COpaquePointer
typealias EventHandlerCallRef = COpaquePointer
typealias EventHandlerProcPtr = @convention(c) (EventHandlerCallRef, EventRef, UnsafeMutablePointer<Void>) -> OSStatus
typealias EventHandlerUPP = EventHandlerProcPtr
func NewEventHandlerUPP(userRoutine: EventHandlerProcPtr!) -> EventHandlerUPP!
func DisposeEventHandlerUPP(userUPP: EventHandlerUPP!)
func InvokeEventHandlerUPP(inHandlerCallRef: EventHandlerCallRef, _ inEvent: EventRef, _ inUserData: UnsafeMutablePointer<Void>, _ userUPP: EventHandlerUPP!) -> OSStatus
typealias EventTargetRef = COpaquePointer
func InstallEventHandler(inTarget: EventTargetRef, _ inHandler: EventHandlerUPP!, _ inNumTypes: Int, _ inList: UnsafePointer<EventTypeSpec>, _ inUserData: UnsafeMutablePointer<Void>, _ outRef: UnsafeMutablePointer<EventHandlerRef>) -> OSStatus
func RemoveEventHandler(inHandlerRef: EventHandlerRef) -> OSStatus
func AddEventTypesToHandler(inHandlerRef: EventHandlerRef, _ inNumTypes: Int, _ inList: UnsafePointer<EventTypeSpec>) -> OSStatus
func RemoveEventTypesFromHandler(inHandlerRef: EventHandlerRef, _ inNumTypes: Int, _ inList: UnsafePointer<EventTypeSpec>) -> OSStatus
func CallNextEventHandler(inCallRef: EventHandlerCallRef, _ inEvent: EventRef) -> OSStatus
var kEventTargetDontPropagate: Int { get }
var kEventTargetSendToAllHandlers: Int { get }
func SendEventToEventTarget(inEvent: EventRef, _ inTarget: EventTargetRef) -> OSStatus
func SendEventToEventTargetWithOptions(inEvent: EventRef, _ inTarget: EventTargetRef, _ inOptions: OptionBits) -> OSStatus
func EnableSecureEventInput() -> OSStatus
func DisableSecureEventInput() -> OSStatus
func IsSecureEventInputEnabled() -> Bool
var pushButProc: Int { get }
var checkBoxProc: Int { get }
var radioButProc: Int { get }
var scrollBarProc: Int { get }
var popupMenuProc: Int { get }
var kControlLabelPart: Int { get }
var kControlMenuPart: Int { get }
var kControlTrianglePart: Int { get }
var kControlEditTextPart: Int { get }
var kControlPicturePart: Int { get }
var kControlIconPart: Int { get }
var kControlClockPart: Int { get }
var kControlListBoxPart: Int { get }
var kControlListBoxDoubleClickPart: Int { get }
var kControlImageWellPart: Int { get }
var kControlRadioGroupPart: Int { get }
var kControlButtonPart: Int { get }
var kControlCheckBoxPart: Int { get }
var kControlRadioButtonPart: Int { get }
var kControlUpButtonPart: Int { get }
var kControlDownButtonPart: Int { get }
var kControlPageUpPart: Int { get }
var kControlPageDownPart: Int { get }
var kControlClockHourDayPart: Int { get }
var kControlClockMinuteMonthPart: Int { get }
var kControlClockSecondYearPart: Int { get }
var kControlClockAMPMPart: Int { get }
var kControlDataBrowserPart: Int { get }
var kControlDataBrowserDraggedPart: Int { get }
var kControlEditTextProc: Int { get }
var kControlEditTextPasswordProc: Int { get }
var kControlEditTextInlineInputProc: Int { get }
var kControlKindEditText: Int { get }
var kControlEditTextTEHandleTag: Int { get }
var kControlEditTextInlinePreUpdateProcTag: Int { get }
var kControlEditTextInlinePostUpdateProcTag: Int { get }
var kControlPictureProc: Int { get }
var kControlPictureNoTrackProc: Int { get }
var kControlKindPicture: Int { get }
var kHIPictureViewClassID: String { get }
var kControlPictureHandleTag: Int { get }
var kControlListBoxProc: Int { get }
var kControlListBoxAutoSizeProc: Int { get }
var kControlKindListBox: Int { get }
var kControlListBoxListHandleTag: Int { get }
var kControlListBoxKeyFilterTag: Int { get }
var kControlListBoxFontStyleTag: Int { get }
var kControlListBoxDoubleClickTag: Int { get }
var kControlListBoxLDEFTag: Int { get }
var kControlListDescResType: Int { get }
var kControlScrollTextBoxProc: Int { get }
var kControlScrollTextBoxAutoScrollProc: Int { get }
var kControlKindScrollingTextBox: Int { get }
var kControlScrollTextBoxDelayBeforeAutoScrollTag: Int { get }
var kControlScrollTextBoxDelayBetweenAutoScrollTag: Int { get }
var kControlScrollTextBoxAutoScrollAmountTag: Int { get }
var kControlScrollTextBoxContentsTag: Int { get }
var kControlScrollTextBoxAnimatingTag: Int { get }
var kControlDefProcType: Int { get }
var kControlTemplateResourceType: Int { get }
var kControlColorTableResourceType: Int { get }
var kControlDefProcResourceType: Int { get }
struct ControlTemplate {
  var controlRect: Rect
  var controlValue: Int16
  var controlVisible: DarwinBoolean
  var fill: UInt8
  var controlMaximum: Int16
  var controlMinimum: Int16
  var controlDefProcID: Int16
  var controlReference: Int32
  var controlTitle: Str255
  init()
  init(controlRect: Rect, controlValue: Int16, controlVisible: DarwinBoolean, fill: UInt8, controlMaximum: Int16, controlMinimum: Int16, controlDefProcID: Int16, controlReference: Int32, controlTitle: Str255)
}
typealias ControlTemplatePtr = UnsafeMutablePointer<ControlTemplate>
typealias ControlTemplateHandle = UnsafeMutablePointer<ControlTemplatePtr>
typealias ControlPartCode = Int16
typealias ControlActionProcPtr = @convention(c) (Control!, ControlPartCode) -> Void
typealias ControlActionUPP = ControlActionProcPtr
func NewControlActionUPP(userRoutine: ControlActionProcPtr!) -> ControlActionUPP!
func DisposeControlActionUPP(userUPP: ControlActionUPP!)
func InvokeControlActionUPP(theControl: Control!, _ partCode: ControlPartCode, _ userUPP: ControlActionUPP!)
var cFrameColor: Int { get }
var cBodyColor: Int { get }
var cTextColor: Int { get }
var cThumbColor: Int { get }
var kNumberCtlCTabEntries: Int { get }
struct CtlCTab {
  var ccSeed: Int32
  var ccRider: Int16
  var ctSize: Int16
  var ctTable: (ColorSpec, ColorSpec, ColorSpec, ColorSpec)
  init()
  init(ccSeed: Int32, ccRider: Int16, ctSize: Int16, ctTable: (ColorSpec, ColorSpec, ColorSpec, ColorSpec))
}
typealias CCTabPtr = UnsafeMutablePointer<CtlCTab>
typealias CCTabHandle = UnsafeMutablePointer<CCTabPtr>
typealias ControlVariant = Int16
var kControlNoVariant: Int { get }
var kControlUsesOwningWindowsFontVariant: Int { get }
var kControlNoPart: Int { get }
var kControlIndicatorPart: Int { get }
var kControlDisabledPart: Int { get }
var kControlInactivePart: Int { get }
var kControlEntireControl: Int { get }
var kControlStructureMetaPart: Int { get }
var kControlContentMetaPart: Int { get }
var kControlOpaqueMetaPart: Int { get }
var kControlClickableMetaPart: Int { get }
var kControlFocusNoPart: Int { get }
var kControlFocusNextPart: Int { get }
var kControlFocusPrevPart: Int { get }
typealias ControlFocusPart = ControlPartCode
var kControlCollectionTagBounds: Int { get }
var kControlCollectionTagValue: Int { get }
var kControlCollectionTagMinimum: Int { get }
var kControlCollectionTagMaximum: Int { get }
var kControlCollectionTagViewSize: Int { get }
var kControlCollectionTagVisibility: Int { get }
var kControlCollectionTagRefCon: Int { get }
var kControlCollectionTagTitle: Int { get }
var kControlCollectionTagUnicodeTitle: Int { get }
var kControlCollectionTagIDSignature: Int { get }
var kControlCollectionTagIDID: Int { get }
var kControlCollectionTagCommand: Int { get }
var kControlCollectionTagVarCode: Int { get }
var kControlContentTextOnly: Int { get }
var kControlNoContent: Int { get }
var kControlContentIconSuiteRes: Int { get }
var kControlContentCIconRes: Int { get }
var kControlContentPictRes: Int { get }
var kControlContentICONRes: Int { get }
var kControlContentAlertIconRes: Int { get }
var kControlContentIconSuiteHandle: Int { get }
var kControlContentCIconHandle: Int { get }
var kControlContentPictHandle: Int { get }
var kControlContentIconRef: Int { get }
var kControlContentICON: Int { get }
var kControlContentCGImageRef: Int { get }
typealias ControlContentType = Int16
struct ControlImageContentInfo {
  struct __Unnamed_union_u {
    var resID: Int16
    var iconRef: IconRef
    var imageRef: Unmanaged<CGImage>!
    init(resID: Int16)
    init(iconRef: IconRef)
    init(imageRef: Unmanaged<CGImage>!)
    init()
  }
  var contentType: ControlContentType
  var u: ControlImageContentInfo.__Unnamed_union_u
  init()
  init(contentType: ControlContentType, u: ControlImageContentInfo.__Unnamed_union_u)
}
typealias ControlImageContentInfoPtr = UnsafeMutablePointer<ControlImageContentInfo>
typealias ControlButtonContentInfo = ControlImageContentInfo
typealias ControlButtonContentInfoPtr = UnsafeMutablePointer<ControlButtonContentInfo>
var kControlKeyScriptBehaviorAllowAnyScript: Int { get }
var kControlKeyScriptBehaviorPrefersRoman: Int { get }
var kControlKeyScriptBehaviorRequiresRoman: Int { get }
typealias ControlKeyScriptBehavior = UInt32
var kControlFontBigSystemFont: Int { get }
var kControlFontSmallSystemFont: Int { get }
var kControlFontSmallBoldSystemFont: Int { get }
var kControlFontViewSystemFont: Int { get }
var kControlFontMiniSystemFont: Int { get }
var kControlUseFontMask: Int { get }
var kControlUseFaceMask: Int { get }
var kControlUseSizeMask: Int { get }
var kControlUseForeColorMask: Int { get }
var kControlUseBackColorMask: Int { get }
var kControlUseModeMask: Int { get }
var kControlUseJustMask: Int { get }
var kControlUseAllMask: Int { get }
var kControlAddFontSizeMask: Int { get }
var kControlAddToMetaFontMask: Int { get }
var kControlUseThemeFontIDMask: Int { get }
struct ControlFontStyleRec {
  var flags: Int16
  var font: Int16
  var size: Int16
  var style: Int16
  var mode: Int16
  var just: Int16
  var foreColor: RGBColor
  var backColor: RGBColor
  init()
  init(flags: Int16, font: Int16, size: Int16, style: Int16, mode: Int16, just: Int16, foreColor: RGBColor, backColor: RGBColor)
}
typealias ControlFontStylePtr = UnsafeMutablePointer<ControlFontStyleRec>
var kDoNotActivateAndIgnoreClick: Int { get }
var kDoNotActivateAndHandleClick: Int { get }
var kActivateAndIgnoreClick: Int { get }
var kActivateAndHandleClick: Int { get }
typealias ClickActivationResult = UInt32
var kControlFontStyleTag: Int { get }
var kControlKeyFilterTag: Int { get }
var kControlKindTag: Int { get }
var kControlSizeTag: Int { get }
var kControlContentTag: Int { get }
var kControlThemeTextFontTag: Int { get }
var kControlThemeTextHorizontalFlushTag: Int { get }
var kControlThemeTextVerticalFlushTag: Int { get }
var kControlThemeTextTruncationTag: Int { get }
var kControlThemeTextInfoTag: Int { get }
var kControlSupportsGhosting: Int { get }
var kControlSupportsEmbedding: Int { get }
var kControlSupportsFocus: Int { get }
var kControlWantsIdle: Int { get }
var kControlWantsActivate: Int { get }
var kControlHandlesTracking: Int { get }
var kControlSupportsDataAccess: Int { get }
var kControlHasSpecialBackground: Int { get }
var kControlGetsFocusOnClick: Int { get }
var kControlSupportsCalcBestRect: Int { get }
var kControlSupportsLiveFeedback: Int { get }
var kControlHasRadioBehavior: Int { get }
var kControlSupportsDragAndDrop: Int { get }
var kControlAutoToggles: Int { get }
var kControlSupportsGetRegion: Int { get }
var kControlSupportsFlattening: Int { get }
var kControlSupportsSetCursor: Int { get }
var kControlSupportsContextualMenus: Int { get }
var kControlSupportsClickActivation: Int { get }
var kControlIdlesWithTimer: Int { get }
var kControlInvertsUpDownValueMeaning: Int { get }
var kControlSizeNormal: Int { get }
var kControlSizeSmall: Int { get }
var kControlSizeLarge: Int { get }
var kControlSizeMini: Int { get }
var kControlSizeAuto: Int { get }
typealias ControlSize = UInt16
var kDrawControlEntireControl: Int { get }
var kDrawControlIndicatorOnly: Int { get }
struct IndicatorDragConstraint {
  var limitRect: Rect
  var slopRect: Rect
  var axis: DragConstraint
  init()
  init(limitRect: Rect, slopRect: Rect, axis: DragConstraint)
}
typealias IndicatorDragConstraintPtr = UnsafeMutablePointer<IndicatorDragConstraint>
var kControlKeyFilterBlockKey: Int { get }
var kControlKeyFilterPassKey: Int { get }
typealias ControlKeyFilterResult = Int16
typealias ControlKeyFilterProcPtr = @convention(c) (Control!, UnsafeMutablePointer<Int16>, UnsafeMutablePointer<Int16>, UnsafeMutablePointer<EventModifiers>) -> ControlKeyFilterResult
typealias ControlKeyFilterUPP = ControlKeyFilterProcPtr
func NewControlKeyFilterUPP(userRoutine: ControlKeyFilterProcPtr!) -> ControlKeyFilterUPP!
func DisposeControlKeyFilterUPP(userUPP: ControlKeyFilterUPP!)
func InvokeControlKeyFilterUPP(theControl: Control!, _ keyCode: UnsafeMutablePointer<Int16>, _ charCode: UnsafeMutablePointer<Int16>, _ modifiers: UnsafeMutablePointer<EventModifiers>, _ userUPP: ControlKeyFilterUPP!) -> ControlKeyFilterResult
var noConstraint: Int { get }
var hAxisOnly: Int { get }
var vAxisOnly: Int { get }
struct ControlID {
  var signature: OSType
  var id: Int32
  init()
  init(signature: OSType, id: Int32)
}
struct ControlKind {
  var signature: OSType
  var kind: OSType
  init()
  init(signature: OSType, kind: OSType)
}
var kControlKindSignatureApple: Int { get }
var kControlPropertyPersistent: Int { get }
var kDragTrackingEnterControl: Int { get }
var kDragTrackingInControl: Int { get }
var kDragTrackingLeaveControl: Int { get }
var kControlDialogItem: Int { get }
var kButtonDialogItem: Int { get }
var kCheckBoxDialogItem: Int { get }
var kRadioButtonDialogItem: Int { get }
var kResourceControlDialogItem: Int { get }
var kStaticTextDialogItem: Int { get }
var kEditTextDialogItem: Int { get }
var kIconDialogItem: Int { get }
var kPictureDialogItem: Int { get }
var kUserDialogItem: Int { get }
var kHelpDialogItem: Int { get }
var kItemDisableBit: Int { get }
var ctrlItem: Int { get }
var btnCtrl: Int { get }
var chkCtrl: Int { get }
var radCtrl: Int { get }
var resCtrl: Int { get }
var statText: Int { get }
var editText: Int { get }
var iconItem: Int { get }
var picItem: Int { get }
var userItem: Int { get }
var itemDisable: Int { get }
var kStdOkItemIndex: Int { get }
var kStdCancelItemIndex: Int { get }
var ok: Int { get }
var cancel: Int { get }
var kStopIcon: Int { get }
var kNoteIcon: Int { get }
var kCautionIcon: Int { get }
var stopIcon: Int { get }
var noteIcon: Int { get }
var cautionIcon: Int { get }
typealias DITLMethod = Int16
var overlayDITL: Int { get }
var appendDITLRight: Int { get }
var appendDITLBottom: Int { get }
typealias StageList = Int16
typealias DialogRef = DialogPtr
struct DialogTemplate {
  var boundsRect: Rect
  var procID: Int16
  var visible: DarwinBoolean
  var filler1: DarwinBoolean
  var goAwayFlag: DarwinBoolean
  var filler2: DarwinBoolean
  var refCon: Int32
  var itemsID: Int16
  var title: Str255
  init()
  init(boundsRect: Rect, procID: Int16, visible: DarwinBoolean, filler1: DarwinBoolean, goAwayFlag: DarwinBoolean, filler2: DarwinBoolean, refCon: Int32, itemsID: Int16, title: Str255)
}
typealias DialogTPtr = UnsafeMutablePointer<DialogTemplate>
typealias DialogTHndl = UnsafeMutablePointer<DialogTPtr>
struct AlertTemplate {
  var boundsRect: Rect
  var itemsID: Int16
  var stages: StageList
  init()
  init(boundsRect: Rect, itemsID: Int16, stages: StageList)
}
typealias AlertTPtr = UnsafeMutablePointer<AlertTemplate>
typealias AlertTHndl = UnsafeMutablePointer<AlertTPtr>
typealias DialogItemIndexZeroBased = Int16
typealias DialogItemIndex = Int16
typealias DialogItemType = Int16
typealias SoundProcPtr = @convention(c) (Int16) -> Void
typealias ModalFilterProcPtr = @convention(c) (DialogRef, UnsafeMutablePointer<EventRecord>, UnsafeMutablePointer<DialogItemIndex>) -> DarwinBoolean
typealias ModalFilterYDProcPtr = @convention(c) (DialogRef, UnsafeMutablePointer<EventRecord>, UnsafeMutablePointer<Int16>, UnsafeMutablePointer<Void>) -> DarwinBoolean
typealias UserItemProcPtr = @convention(c) (DialogRef, DialogItemIndex) -> Void
typealias SoundUPP = SoundProcPtr
typealias ModalFilterUPP = ModalFilterProcPtr
typealias ModalFilterYDUPP = ModalFilterYDProcPtr
typealias UserItemUPP = UserItemProcPtr
func NewModalFilterUPP(userRoutine: ModalFilterProcPtr!) -> ModalFilterUPP!
func NewModalFilterYDUPP(userRoutine: ModalFilterYDProcPtr!) -> ModalFilterYDUPP!
func NewUserItemUPP(userRoutine: UserItemProcPtr!) -> UserItemUPP!
func DisposeModalFilterUPP(userUPP: ModalFilterUPP!)
func DisposeModalFilterYDUPP(userUPP: ModalFilterYDUPP!)
func DisposeUserItemUPP(userUPP: UserItemUPP!)
func InvokeModalFilterUPP(theDialog: DialogRef, _ theEvent: UnsafeMutablePointer<EventRecord>, _ itemHit: UnsafeMutablePointer<DialogItemIndex>, _ userUPP: ModalFilterUPP!) -> Bool
func InvokeModalFilterYDUPP(theDialog: DialogRef, _ theEvent: UnsafeMutablePointer<EventRecord>, _ itemHit: UnsafeMutablePointer<Int16>, _ yourDataPtr: UnsafeMutablePointer<Void>, _ userUPP: ModalFilterYDUPP!) -> Bool
func InvokeUserItemUPP(theDialog: DialogRef, _ itemNo: DialogItemIndex, _ userUPP: UserItemUPP!)
var kAlertStopAlert: Int { get }
var kAlertNoteAlert: Int { get }
var kAlertCautionAlert: Int { get }
var kAlertPlainAlert: Int { get }
typealias AlertType = Int16
var kAlertDefaultOKText: Int { get }
var kAlertDefaultCancelText: Int { get }
var kAlertDefaultOtherText: Int { get }
var kAlertStdAlertOKButton: Int { get }
var kAlertStdAlertCancelButton: Int { get }
var kAlertStdAlertOtherButton: Int { get }
var kAlertStdAlertHelpButton: Int { get }
var kDialogFlagsUseThemeBackground: Int { get }
var kDialogFlagsUseControlHierarchy: Int { get }
var kDialogFlagsHandleMovableModal: Int { get }
var kDialogFlagsUseThemeControls: Int { get }
var kDialogFlagsUseCompositing: Int { get }
var kAlertFlagsUseThemeBackground: Int { get }
var kAlertFlagsUseControlHierarchy: Int { get }
var kAlertFlagsAlertIsMovable: Int { get }
var kAlertFlagsUseThemeControls: Int { get }
var kAlertFlagsUseCompositing: Int { get }
var kDialogFontNoFontStyle: Int { get }
var kDialogFontUseFontMask: Int { get }
var kDialogFontUseFaceMask: Int { get }
var kDialogFontUseSizeMask: Int { get }
var kDialogFontUseForeColorMask: Int { get }
var kDialogFontUseBackColorMask: Int { get }
var kDialogFontUseModeMask: Int { get }
var kDialogFontUseJustMask: Int { get }
var kDialogFontUseAllMask: Int { get }
var kDialogFontAddFontSizeMask: Int { get }
var kDialogFontUseFontNameMask: Int { get }
var kDialogFontAddToMetaFontMask: Int { get }
var kDialogFontUseThemeFontIDMask: Int { get }
struct AlertStdAlertParamRec {
  var movable: DarwinBoolean
  var helpButton: DarwinBoolean
  var filterProc: ModalFilterUPP!
  var defaultText: ConstStringPtr
  var cancelText: ConstStringPtr
  var otherText: ConstStringPtr
  var defaultButton: Int16
  var cancelButton: Int16
  var position: UInt16
  init()
  init(movable: DarwinBoolean, helpButton: DarwinBoolean, filterProc: ModalFilterUPP!, defaultText: ConstStringPtr, cancelText: ConstStringPtr, otherText: ConstStringPtr, defaultButton: Int16, cancelButton: Int16, position: UInt16)
}
typealias AlertStdAlertParamPtr = UnsafeMutablePointer<AlertStdAlertParamRec>
var kHICommandOther: Int { get }
var kStdCFStringAlertVersionOne: Int { get }
var kStdCFStringAlertVersionTwo: Int { get }
var kStdAlertDoNotDisposeSheet: Int { get }
var kStdAlertDoNotAnimateOnDefault: Int { get }
var kStdAlertDoNotAnimateOnCancel: Int { get }
var kStdAlertDoNotAnimateOnOther: Int { get }
var kStdAlertDoNotCloseOnHelp: Int { get }
struct AlertStdCFStringAlertParamRec {
  var version: UInt32
  var movable: DarwinBoolean
  var helpButton: DarwinBoolean
  var defaultText: Unmanaged<CFString>!
  var cancelText: Unmanaged<CFString>!
  var otherText: Unmanaged<CFString>!
  var defaultButton: Int16
  var cancelButton: Int16
  var position: UInt16
  var flags: OptionBits
  var icon: IconRef
  init()
  init(version: UInt32, movable: DarwinBoolean, helpButton: DarwinBoolean, defaultText: Unmanaged<CFString>!, cancelText: Unmanaged<CFString>!, otherText: Unmanaged<CFString>!, defaultButton: Int16, cancelButton: Int16, position: UInt16, flags: OptionBits, icon: IconRef)
}
typealias AlertStdCFStringAlertParamPtr = UnsafeMutablePointer<AlertStdCFStringAlertParamRec>
typealias DragRef = COpaquePointer
typealias DragItemRef = URefCon
typealias FlavorType = OSType
typealias DragAttributes = OptionBits
var kDragHasLeftSenderWindow: Int { get }
var kDragInsideSenderApplication: Int { get }
var kDragInsideSenderWindow: Int { get }
typealias DragBehaviors = OptionBits
var kDragBehaviorNone: Int { get }
var kDragBehaviorZoomBackAnimation: Int { get }
typealias DragImageFlags = OptionBits
var kDragRegionAndImage: Int { get }
var kDragDoNotScaleImage: Int { get }
var kDragStandardTranslucency: Int { get }
var kDragDarkTranslucency: Int { get }
var kDragDarkerTranslucency: Int { get }
var kDragOpaqueTranslucency: Int { get }
typealias FlavorFlags = UInt32
var flavorSenderOnly: Int { get }
var flavorSenderTranslated: Int { get }
var flavorNotSaved: Int { get }
var flavorSystemTranslated: Int { get }
var flavorDataPromised: Int { get }
var kFlavorTypeClippingName: Int { get }
var kFlavorTypeClippingFilename: Int { get }
var kFlavorTypeUnicodeClippingName: Int { get }
var kFlavorTypeUnicodeClippingFilename: Int { get }
var kFlavorTypeDragToTrashOnly: Int { get }
var kFlavorTypeFinderNoTrackingBehavior: Int { get }
typealias DragActions = OptionBits
var kDragActionNothing: UInt32 { get }
var kDragActionCopy: UInt32 { get }
var kDragActionAlias: UInt32 { get }
var kDragActionGeneric: UInt32 { get }
var kDragActionPrivate: UInt32 { get }
var kDragActionMove: UInt32 { get }
var kDragActionDelete: UInt32 { get }
var kDragActionAll: UInt32 { get }
typealias DragInputProcPtr = @convention(c) (UnsafeMutablePointer<Point>, UnsafeMutablePointer<Int16>, UnsafeMutablePointer<Void>, DragRef) -> OSErr
typealias DragInputUPP = DragInputProcPtr
func NewDragInputUPP(userRoutine: DragInputProcPtr!) -> DragInputUPP!
func DisposeDragInputUPP(userUPP: DragInputUPP!)
func InvokeDragInputUPP(mouse: UnsafeMutablePointer<Point>, _ modifiers: UnsafeMutablePointer<Int16>, _ dragInputRefCon: UnsafeMutablePointer<Void>, _ theDrag: DragRef, _ userUPP: DragInputUPP!) -> OSErr
var kDragFlavorTypeHFS: Int { get }
var kDragFlavorTypePromiseHFS: Int { get }
var flavorTypeHFS: Int { get }
var flavorTypePromiseHFS: Int { get }
var kDragPromisedFlavorFindFile: Int { get }
var kDragPromisedFlavor: Int { get }
var kDragPseudoCreatorVolumeOrDirectory: Int { get }
var kDragPseudoFileTypeVolume: Int { get }
var kDragPseudoFileTypeDirectory: Int { get }
struct HFSFlavor {
  var fileType: OSType
  var fileCreator: OSType
  var fdFlags: UInt16
  var fileSpec: FSSpec
  init()
  init(fileType: OSType, fileCreator: OSType, fdFlags: UInt16, fileSpec: FSSpec)
}
struct PromiseHFSFlavor {
  var fileType: OSType
  var fileCreator: OSType
  var fdFlags: UInt16
  var promisedFlavor: FlavorType
  init()
  init(fileType: OSType, fileCreator: OSType, fdFlags: UInt16, promisedFlavor: FlavorType)
}
typealias DragTrackingMessage = Int16
var kDragTrackingEnterHandler: Int { get }
var kDragTrackingEnterWindow: Int { get }
var kDragTrackingInWindow: Int { get }
var kDragTrackingLeaveWindow: Int { get }
var kDragTrackingLeaveHandler: Int { get }
typealias DragRegionMessage = Int16
var kDragRegionBegin: Int { get }
var kDragRegionDraw: Int { get }
var kDragRegionHide: Int { get }
var kDragRegionIdle: Int { get }
var kDragRegionEnd: Int { get }
typealias ZoomAcceleration = Int16
var kZoomNoAcceleration: Int { get }
var kZoomAccelerate: Int { get }
var kZoomDecelerate: Int { get }
var kDragStandardDropLocationTrash: Int { get }
var kDragStandardDropLocationUnknown: Int { get }
typealias StandardDropLocation = OSType
typealias DragSendDataProcPtr = @convention(c) (FlavorType, UnsafeMutablePointer<Void>, DragItemRef, DragRef) -> OSErr
typealias DragTrackingHandlerProcPtr = @convention(c) (DragTrackingMessage, WindowRef, UnsafeMutablePointer<Void>, DragRef) -> OSErr
typealias DragReceiveHandlerProcPtr = @convention(c) (WindowRef, UnsafeMutablePointer<Void>, DragRef) -> OSErr
typealias DragDrawingProcPtr = @convention(c) (DragRegionMessage, RgnHandle, Point, RgnHandle, Point, UnsafeMutablePointer<Void>, DragRef) -> OSErr
typealias DragSendDataUPP = DragSendDataProcPtr
typealias DragTrackingHandlerUPP = DragTrackingHandlerProcPtr
typealias DragReceiveHandlerUPP = DragReceiveHandlerProcPtr
typealias DragDrawingUPP = DragDrawingProcPtr
typealias DragReference = DragRef
typealias ItemReference = DragItemRef
typealias EventKind = UInt16
typealias EventMask = UInt16
var nullEvent: Int { get }
var mouseDown: Int { get }
var mouseUp: Int { get }
var keyDown: Int { get }
var keyUp: Int { get }
var autoKey: Int { get }
var updateEvt: Int { get }
var diskEvt: Int { get }
var activateEvt: Int { get }
var osEvt: Int { get }
var kHighLevelEvent: Int { get }
var mDownMask: Int { get }
var mUpMask: Int { get }
var keyDownMask: Int { get }
var keyUpMask: Int { get }
var autoKeyMask: Int { get }
var updateMask: Int { get }
var diskMask: Int { get }
var activMask: Int { get }
var highLevelEventMask: Int { get }
var osMask: Int { get }
var everyEvent: Int { get }
var charCodeMask: UInt32 { get }
var keyCodeMask: UInt32 { get }
var adbAddrMask: UInt32 { get }
var osEvtMessageMask: UInt32 { get }
var mouseMovedMessage: Int { get }
var suspendResumeMessage: Int { get }
var resumeFlag: Int { get }
typealias EventModifiers = UInt16
var activeFlagBit: Int { get }
var btnStateBit: Int { get }
var cmdKeyBit: Int { get }
var shiftKeyBit: Int { get }
var alphaLockBit: Int { get }
var optionKeyBit: Int { get }
var controlKeyBit: Int { get }
var rightShiftKeyBit: Int { get }
var rightOptionKeyBit: Int { get }
var rightControlKeyBit: Int { get }
var activeFlag: Int { get }
var btnState: Int { get }
var cmdKey: Int { get }
var shiftKey: Int { get }
var alphaLock: Int { get }
var optionKey: Int { get }
var controlKey: Int { get }
var rightShiftKey: Int { get }
var rightOptionKey: Int { get }
var rightControlKey: Int { get }
var kNullCharCode: Int { get }
var kHomeCharCode: Int { get }
var kEnterCharCode: Int { get }
var kEndCharCode: Int { get }
var kHelpCharCode: Int { get }
var kBellCharCode: Int { get }
var kBackspaceCharCode: Int { get }
var kTabCharCode: Int { get }
var kLineFeedCharCode: Int { get }
var kVerticalTabCharCode: Int { get }
var kPageUpCharCode: Int { get }
var kFormFeedCharCode: Int { get }
var kPageDownCharCode: Int { get }
var kReturnCharCode: Int { get }
var kFunctionKeyCharCode: Int { get }
var kCommandCharCode: Int { get }
var kCheckCharCode: Int { get }
var kDiamondCharCode: Int { get }
var kAppleLogoCharCode: Int { get }
var kEscapeCharCode: Int { get }
var kClearCharCode: Int { get }
var kLeftArrowCharCode: Int { get }
var kRightArrowCharCode: Int { get }
var kUpArrowCharCode: Int { get }
var kDownArrowCharCode: Int { get }
var kSpaceCharCode: Int { get }
var kDeleteCharCode: Int { get }
var kBulletCharCode: Int { get }
var kNonBreakingSpaceCharCode: Int { get }
var kShiftUnicode: Int { get }
var kControlUnicode: Int { get }
var kOptionUnicode: Int { get }
var kCommandUnicode: Int { get }
var kPencilUnicode: Int { get }
var kPencilLeftUnicode: Int { get }
var kCheckUnicode: Int { get }
var kDiamondUnicode: Int { get }
var kBulletUnicode: Int { get }
var kAppleLogoUnicode: Int { get }
var kVK_ANSI_A: Int { get }
var kVK_ANSI_S: Int { get }
var kVK_ANSI_D: Int { get }
var kVK_ANSI_F: Int { get }
var kVK_ANSI_H: Int { get }
var kVK_ANSI_G: Int { get }
var kVK_ANSI_Z: Int { get }
var kVK_ANSI_X: Int { get }
var kVK_ANSI_C: Int { get }
var kVK_ANSI_V: Int { get }
var kVK_ANSI_B: Int { get }
var kVK_ANSI_Q: Int { get }
var kVK_ANSI_W: Int { get }
var kVK_ANSI_E: Int { get }
var kVK_ANSI_R: Int { get }
var kVK_ANSI_Y: Int { get }
var kVK_ANSI_T: Int { get }
var kVK_ANSI_1: Int { get }
var kVK_ANSI_2: Int { get }
var kVK_ANSI_3: Int { get }
var kVK_ANSI_4: Int { get }
var kVK_ANSI_6: Int { get }
var kVK_ANSI_5: Int { get }
var kVK_ANSI_Equal: Int { get }
var kVK_ANSI_9: Int { get }
var kVK_ANSI_7: Int { get }
var kVK_ANSI_Minus: Int { get }
var kVK_ANSI_8: Int { get }
var kVK_ANSI_0: Int { get }
var kVK_ANSI_RightBracket: Int { get }
var kVK_ANSI_O: Int { get }
var kVK_ANSI_U: Int { get }
var kVK_ANSI_LeftBracket: Int { get }
var kVK_ANSI_I: Int { get }
var kVK_ANSI_P: Int { get }
var kVK_ANSI_L: Int { get }
var kVK_ANSI_J: Int { get }
var kVK_ANSI_Quote: Int { get }
var kVK_ANSI_K: Int { get }
var kVK_ANSI_Semicolon: Int { get }
var kVK_ANSI_Backslash: Int { get }
var kVK_ANSI_Comma: Int { get }
var kVK_ANSI_Slash: Int { get }
var kVK_ANSI_N: Int { get }
var kVK_ANSI_M: Int { get }
var kVK_ANSI_Period: Int { get }
var kVK_ANSI_Grave: Int { get }
var kVK_ANSI_KeypadDecimal: Int { get }
var kVK_ANSI_KeypadMultiply: Int { get }
var kVK_ANSI_KeypadPlus: Int { get }
var kVK_ANSI_KeypadClear: Int { get }
var kVK_ANSI_KeypadDivide: Int { get }
var kVK_ANSI_KeypadEnter: Int { get }
var kVK_ANSI_KeypadMinus: Int { get }
var kVK_ANSI_KeypadEquals: Int { get }
var kVK_ANSI_Keypad0: Int { get }
var kVK_ANSI_Keypad1: Int { get }
var kVK_ANSI_Keypad2: Int { get }
var kVK_ANSI_Keypad3: Int { get }
var kVK_ANSI_Keypad4: Int { get }
var kVK_ANSI_Keypad5: Int { get }
var kVK_ANSI_Keypad6: Int { get }
var kVK_ANSI_Keypad7: Int { get }
var kVK_ANSI_Keypad8: Int { get }
var kVK_ANSI_Keypad9: Int { get }
var kVK_Return: Int { get }
var kVK_Tab: Int { get }
var kVK_Space: Int { get }
var kVK_Delete: Int { get }
var kVK_Escape: Int { get }
var kVK_Command: Int { get }
var kVK_Shift: Int { get }
var kVK_CapsLock: Int { get }
var kVK_Option: Int { get }
var kVK_Control: Int { get }
var kVK_RightShift: Int { get }
var kVK_RightOption: Int { get }
var kVK_RightControl: Int { get }
var kVK_Function: Int { get }
var kVK_F17: Int { get }
var kVK_VolumeUp: Int { get }
var kVK_VolumeDown: Int { get }
var kVK_Mute: Int { get }
var kVK_F18: Int { get }
var kVK_F19: Int { get }
var kVK_F20: Int { get }
var kVK_F5: Int { get }
var kVK_F6: Int { get }
var kVK_F7: Int { get }
var kVK_F3: Int { get }
var kVK_F8: Int { get }
var kVK_F9: Int { get }
var kVK_F11: Int { get }
var kVK_F13: Int { get }
var kVK_F16: Int { get }
var kVK_F14: Int { get }
var kVK_F10: Int { get }
var kVK_F12: Int { get }
var kVK_F15: Int { get }
var kVK_Help: Int { get }
var kVK_Home: Int { get }
var kVK_PageUp: Int { get }
var kVK_ForwardDelete: Int { get }
var kVK_F4: Int { get }
var kVK_End: Int { get }
var kVK_F2: Int { get }
var kVK_PageDown: Int { get }
var kVK_F1: Int { get }
var kVK_LeftArrow: Int { get }
var kVK_RightArrow: Int { get }
var kVK_DownArrow: Int { get }
var kVK_UpArrow: Int { get }
var kVK_ISO_Section: Int { get }
var kVK_JIS_Yen: Int { get }
var kVK_JIS_Underscore: Int { get }
var kVK_JIS_KeypadComma: Int { get }
var kVK_JIS_Eisu: Int { get }
var kVK_JIS_Kana: Int { get }
struct EventRecord {
  var what: EventKind
  var message: UInt
  var when: UInt32
  var `where`: Point
  var modifiers: EventModifiers
  init()
  init(what: EventKind, message: UInt, when: UInt32, where: Point, modifiers: EventModifiers)
}
typealias FKEYProcPtr = @convention(c) () -> Void
typealias FKEYUPP = FKEYProcPtr
typealias KeyMap = (BigEndianUInt32, BigEndianUInt32, BigEndianUInt32, BigEndianUInt32)
typealias KeyMapByteArray = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
func GetKeys(theKeys: UnsafeMutablePointer<BigEndianUInt32>)
var networkEvt: Int { get }
var driverEvt: Int { get }
var app1Evt: Int { get }
var app2Evt: Int { get }
var app3Evt: Int { get }
var app4Evt: Int { get }
var networkMask: Int { get }
var driverMask: Int { get }
var app1Mask: Int { get }
var app2Mask: Int { get }
var app3Mask: Int { get }
var app4Mask: Int { get }
struct EvQEl {
  var qLink: QElemPtr
  var qType: Int16
  var evtQWhat: EventKind
  var evtQMessage: UInt
  var evtQWhen: UInt32
  var evtQWhere: Point
  var evtQModifiers: EventModifiers
  init()
  init(qLink: QElemPtr, qType: Int16, evtQWhat: EventKind, evtQMessage: UInt, evtQWhen: UInt32, evtQWhere: Point, evtQModifiers: EventModifiers)
}
typealias EvQElPtr = UnsafeMutablePointer<EvQEl>
typealias GetNextEventFilterProcPtr = @convention(c) (UnsafeMutablePointer<EventRecord>, UnsafeMutablePointer<DarwinBoolean>) -> Void
typealias GetNextEventFilterUPP = GetNextEventFilterProcPtr
typealias GNEFilterUPP = GetNextEventFilterUPP
func LMGetKeyThresh() -> Int16
func LMGetKeyRepThresh() -> Int16
func LMGetKbdLast() -> UInt8
func LMGetKbdType() -> UInt8
var kEventAccessibleGetChildAtPoint: Int { get }
var kEventAccessibleGetFocusedChild: Int { get }
var kEventAccessibleGetAllAttributeNames: Int { get }
var kEventAccessibleGetAllParameterizedAttributeNames: Int { get }
var kEventAccessibleGetNamedAttribute: Int { get }
var kEventAccessibleSetNamedAttribute: Int { get }
var kEventAccessibleIsNamedAttributeSettable: Int { get }
var kEventAccessibleGetAllActionNames: Int { get }
var kEventAccessiblePerformNamedAction: Int { get }
var kEventAccessibleGetNamedActionDescription: Int { get }
class HIArchive {
}
typealias HIArchiveRef = HIArchive
var hiArchiveTypeMismatchErr: Int { get }
var hiArchiveKeyNotAvailableErr: Int { get }
var hiArchiveEncodingCompleteErr: Int { get }
var hiArchiveHIObjectIgnoresArchivingErr: Int { get }
var kHIArchiveDecodeSuperclassForUnregisteredObjects: Int { get }
var kHIArchiveDecodingForEditor: Int { get }
var kControlPushButtonProc: Int { get }
var kControlPushButLeftIconProc: Int { get }
var kControlPushButRightIconProc: Int { get }
typealias ControlPushButtonIconAlignment = UInt16
var kControlPushButtonIconOnLeft: Int { get }
var kControlPushButtonIconOnRight: Int { get }
var kControlKindPushButton: Int { get }
var kControlKindPushIconButton: Int { get }
var kHIPushButtonClassID: String { get }
var kControlPushButtonDefaultTag: Int { get }
var kControlPushButtonCancelTag: Int { get }
var kControlPushButtonContentTag: Int { get }
var kControlPushButtonIconAlignmentTag: Int { get }
var kControlPushButtonAnimatingTag: Int { get }
var kControlPushButtonIsTexturedTag: Int { get }
var kControlCheckBoxProc: Int { get }
var kControlCheckBoxAutoToggleProc: Int { get }
var kControlKindCheckBox: Int { get }
var kHICheckBoxClassID: String { get }
var kControlCheckBoxUncheckedValue: Int { get }
var kControlCheckBoxCheckedValue: Int { get }
var kControlCheckBoxMixedValue: Int { get }
var kControlRadioButtonProc: Int { get }
var kControlRadioButtonAutoToggleProc: Int { get }
var kControlRadioButtonUncheckedValue: Int { get }
var kControlRadioButtonCheckedValue: Int { get }
var kControlRadioButtonMixedValue: Int { get }
var kControlKindRadioButton: Int { get }
var kHIRadioButtonClassID: String { get }
var kControlRadioGroupProc: Int { get }
var kControlKindRadioGroup: Int { get }
var kHIRadioGroupClassID: String { get }
var kControlBevelButtonSmallBevelProc: Int { get }
var kControlBevelButtonNormalBevelProc: Int { get }
var kControlBevelButtonLargeBevelProc: Int { get }
var kControlBevelButtonSmallBevelVariant: Int { get }
var kControlBevelButtonNormalBevelVariant: Int { get }
var kControlBevelButtonLargeBevelVariant: Int { get }
var kControlBevelButtonMenuOnRightVariant: Int { get }
typealias ControlBevelThickness = UInt16
var kControlBevelButtonSmallBevel: Int { get }
var kControlBevelButtonNormalBevel: Int { get }
var kControlBevelButtonLargeBevel: Int { get }
var kControlBehaviorPushbutton: Int { get }
var kControlBehaviorToggles: Int { get }
var kControlBehaviorSticky: Int { get }
var kControlBehaviorOffsetContents: Int { get }
var kControlBehaviorSingleValueMenu: Int { get }
var kControlBehaviorMultiValueMenu: Int { get }
var kControlBehaviorCommandMenu: Int { get }
typealias ControlBevelButtonBehavior = UInt16
typealias ControlBevelButtonMenuBehavior = UInt16
typealias ControlBevelButtonMenuPlacement = UInt16
var kControlBevelButtonMenuOnBottom: Int { get }
var kControlBevelButtonMenuOnRight: Int { get }
var kControlKindBevelButton: Int { get }
var kHIBevelButtonClassID: String { get }
typealias ControlButtonGraphicAlignment = Int16
var kControlBevelButtonAlignSysDirection: Int { get }
var kControlBevelButtonAlignCenter: Int { get }
var kControlBevelButtonAlignLeft: Int { get }
var kControlBevelButtonAlignRight: Int { get }
var kControlBevelButtonAlignTop: Int { get }
var kControlBevelButtonAlignBottom: Int { get }
var kControlBevelButtonAlignTopLeft: Int { get }
var kControlBevelButtonAlignBottomLeft: Int { get }
var kControlBevelButtonAlignTopRight: Int { get }
var kControlBevelButtonAlignBottomRight: Int { get }
typealias ControlButtonTextAlignment = Int16
var kControlBevelButtonAlignTextSysDirection: Int { get }
var kControlBevelButtonAlignTextCenter: Int { get }
var kControlBevelButtonAlignTextFlushRight: Int { get }
var kControlBevelButtonAlignTextFlushLeft: Int { get }
typealias ControlButtonTextPlacement = Int16
var kControlBevelButtonPlaceSysDirection: Int { get }
var kControlBevelButtonPlaceNormally: Int { get }
var kControlBevelButtonPlaceToRightOfGraphic: Int { get }
var kControlBevelButtonPlaceToLeftOfGraphic: Int { get }
var kControlBevelButtonPlaceBelowGraphic: Int { get }
var kControlBevelButtonPlaceAboveGraphic: Int { get }
var kControlBevelButtonContentTag: Int { get }
var kControlBevelButtonTransformTag: Int { get }
var kControlBevelButtonTextAlignTag: Int { get }
var kControlBevelButtonTextOffsetTag: Int { get }
var kControlBevelButtonGraphicAlignTag: Int { get }
var kControlBevelButtonGraphicOffsetTag: Int { get }
var kControlBevelButtonTextPlaceTag: Int { get }
var kControlBevelButtonMenuValueTag: Int { get }
var kControlBevelButtonMenuHandleTag: Int { get }
var kControlBevelButtonMenuRefTag: Int { get }
var kControlBevelButtonCenterPopupGlyphTag: Int { get }
var kControlBevelButtonLastMenuTag: Int { get }
var kControlBevelButtonMenuDelayTag: Int { get }
var kControlBevelButtonScaleIconTag: Int { get }
var kControlBevelButtonOwnedMenuRefTag: Int { get }
var kControlBevelButtonKindTag: Int { get }
var kControlBevelButtonIsMultiValueMenuTag: Int { get }
typealias ControlRoundButtonSize = Int16
var kControlRoundButtonNormalSize: Int { get }
var kControlRoundButtonLargeSize: Int { get }
var kControlRoundButtonContentTag: Int { get }
var kControlRoundButtonSizeTag: Int { get }
var kControlKindRoundButton: Int { get }
var kHIRoundButtonClassID: String { get }
var kEventClassClockView: Int { get }
var kEventClockDateOrTimeChanged: Int { get }
var kControlClockTimeProc: Int { get }
var kControlClockTimeSecondsProc: Int { get }
var kControlClockDateProc: Int { get }
var kControlClockMonthYearProc: Int { get }
typealias ControlClockType = UInt16
var kControlClockTypeHourMinute: Int { get }
var kControlClockTypeHourMinuteSecond: Int { get }
var kControlClockTypeMonthDayYear: Int { get }
var kControlClockTypeMonthYear: Int { get }
typealias ControlClockFlags = UInt32
var kControlClockFlagStandard: Int { get }
var kControlClockNoFlags: Int { get }
var kControlClockFlagDisplayOnly: Int { get }
var kControlClockIsDisplayOnly: Int { get }
var kControlClockFlagLive: Int { get }
var kControlClockIsLive: Int { get }
var kControlKindClock: Int { get }
var kHIClockViewClassID: String { get }
var kControlClockLongDateTag: Int { get }
var kControlClockAbsoluteTimeTag: Int { get }
var kControlClockFontStyleTag: Int { get }
var kControlClockAnimatingTag: Int { get }
var kHICocoaViewClassID: String { get }
var kControlKindHICocoaView: Int { get }
var kEventParamNSView: Int { get }
var kHIComboBoxClassID: String { get }
var kEventClassHIComboBox: Int { get }
var kEventParamComboBoxListSelectedItemIndex: Int { get }
var kEventComboBoxListItemSelected: Int { get }
var kHIComboBoxNoAttributes: Int { get }
var kHIComboBoxAutoCompletionAttribute: Int { get }
var kHIComboBoxAutoDisclosureAttribute: Int { get }
var kHIComboBoxAutoSortAttribute: Int { get }
var kHIComboBoxAutoSizeListAttribute: Int { get }
var kHIComboBoxStandardAttributes: Int { get }
var kControlKindHIComboBox: Int { get }
var kHIComboBoxEditTextPart: Int { get }
var kHIComboBoxDisclosurePart: Int { get }
var kHIComboBoxListTag: Int { get }
var kHIComboBoxListPixelWidthTag: Int { get }
var kHIComboBoxListPixelHeightTag: Int { get }
var kHIComboBoxNumVisibleItemsTag: Int { get }
var kControlGroupBoxTextTitleProc: Int { get }
var kControlGroupBoxCheckBoxProc: Int { get }
var kControlGroupBoxPopupButtonProc: Int { get }
var kControlGroupBoxSecondaryTextTitleProc: Int { get }
var kControlGroupBoxSecondaryCheckBoxProc: Int { get }
var kControlGroupBoxSecondaryPopupButtonProc: Int { get }
var kControlKindGroupBox: Int { get }
var kControlKindCheckGroupBox: Int { get }
var kControlKindPopupGroupBox: Int { get }
var kHIGroupBoxClassID: String { get }
var kHICheckBoxGroupClassID: String { get }
var kControlGroupBoxMenuHandleTag: Int { get }
var kControlGroupBoxMenuRefTag: Int { get }
var kControlGroupBoxFontStyleTag: Int { get }
var kControlGroupBoxTitleRectTag: Int { get }
var kControlGroupBoxFrameRectTag: Int { get }
var kControlPlacardProc: Int { get }
var kControlKindPlacard: Int { get }
var kHIPlacardViewClassID: String { get }
var kControlWindowHeaderProc: Int { get }
var kControlWindowListViewHeaderProc: Int { get }
var kControlKindWindowHeader: Int { get }
var kControlWindowHeaderIsListHeaderTag: Int { get }
var kHIWindowHeaderViewClassID: String { get }
var kControlUserPaneProc: Int { get }
var kControlKindUserPane: Int { get }
var kHIUserPaneClassID: String { get }
var kControlUserItemDrawProcTag: Int { get }
var kControlUserPaneDrawProcTag: Int { get }
var kControlUserPaneHitTestProcTag: Int { get }
var kControlUserPaneTrackingProcTag: Int { get }
var kControlUserPaneIdleProcTag: Int { get }
var kControlUserPaneKeyDownProcTag: Int { get }
var kControlUserPaneActivateProcTag: Int { get }
var kControlUserPaneFocusProcTag: Int { get }
var kControlUserPaneBackgroundProcTag: Int { get }
typealias ControlUserPaneDrawProcPtr = @convention(c) (Control!, ControlPartCode) -> Void
typealias ControlUserPaneHitTestProcPtr = @convention(c) (Control!, Point) -> ControlPartCode
typealias ControlUserPaneTrackingProcPtr = @convention(c) (Control!, Point, ControlActionUPP!) -> ControlPartCode
typealias ControlUserPaneIdleProcPtr = @convention(c) (Control!) -> Void
typealias ControlUserPaneKeyDownProcPtr = @convention(c) (Control!, Int16, Int16, Int16) -> ControlPartCode
typealias ControlUserPaneActivateProcPtr = @convention(c) (Control!, DarwinBoolean) -> Void
typealias ControlUserPaneFocusProcPtr = @convention(c) (Control!, ControlFocusPart) -> ControlPartCode
typealias ControlUserPaneDrawUPP = ControlUserPaneDrawProcPtr
typealias ControlUserPaneHitTestUPP = ControlUserPaneHitTestProcPtr
typealias ControlUserPaneTrackingUPP = ControlUserPaneTrackingProcPtr
typealias ControlUserPaneIdleUPP = ControlUserPaneIdleProcPtr
typealias ControlUserPaneKeyDownUPP = ControlUserPaneKeyDownProcPtr
typealias ControlUserPaneActivateUPP = ControlUserPaneActivateProcPtr
typealias ControlUserPaneFocusUPP = ControlUserPaneFocusProcPtr
func NewControlUserPaneDrawUPP(userRoutine: ControlUserPaneDrawProcPtr!) -> ControlUserPaneDrawUPP!
func NewControlUserPaneHitTestUPP(userRoutine: ControlUserPaneHitTestProcPtr!) -> ControlUserPaneHitTestUPP!
func NewControlUserPaneTrackingUPP(userRoutine: ControlUserPaneTrackingProcPtr!) -> ControlUserPaneTrackingUPP!
func NewControlUserPaneIdleUPP(userRoutine: ControlUserPaneIdleProcPtr!) -> ControlUserPaneIdleUPP!
func NewControlUserPaneKeyDownUPP(userRoutine: ControlUserPaneKeyDownProcPtr!) -> ControlUserPaneKeyDownUPP!
func NewControlUserPaneActivateUPP(userRoutine: ControlUserPaneActivateProcPtr!) -> ControlUserPaneActivateUPP!
func NewControlUserPaneFocusUPP(userRoutine: ControlUserPaneFocusProcPtr!) -> ControlUserPaneFocusUPP!
func DisposeControlUserPaneDrawUPP(userUPP: ControlUserPaneDrawUPP!)
func DisposeControlUserPaneHitTestUPP(userUPP: ControlUserPaneHitTestUPP!)
func DisposeControlUserPaneTrackingUPP(userUPP: ControlUserPaneTrackingUPP!)
func DisposeControlUserPaneIdleUPP(userUPP: ControlUserPaneIdleUPP!)
func DisposeControlUserPaneKeyDownUPP(userUPP: ControlUserPaneKeyDownUPP!)
func DisposeControlUserPaneActivateUPP(userUPP: ControlUserPaneActivateUPP!)
func DisposeControlUserPaneFocusUPP(userUPP: ControlUserPaneFocusUPP!)
func InvokeControlUserPaneDrawUPP(control: Control!, _ part: ControlPartCode, _ userUPP: ControlUserPaneDrawUPP!)
func InvokeControlUserPaneHitTestUPP(control: Control!, _ where: Point, _ userUPP: ControlUserPaneHitTestUPP!) -> ControlPartCode
func InvokeControlUserPaneTrackingUPP(control: Control!, _ startPt: Point, _ actionProc: ControlActionUPP!, _ userUPP: ControlUserPaneTrackingUPP!) -> ControlPartCode
func InvokeControlUserPaneIdleUPP(control: Control!, _ userUPP: ControlUserPaneIdleUPP!)
func InvokeControlUserPaneKeyDownUPP(control: Control!, _ keyCode: Int16, _ charCode: Int16, _ modifiers: Int16, _ userUPP: ControlUserPaneKeyDownUPP!) -> ControlPartCode
func InvokeControlUserPaneActivateUPP(control: Control!, _ activating: Bool, _ userUPP: ControlUserPaneActivateUPP!)
func InvokeControlUserPaneFocusUPP(control: Control!, _ action: ControlFocusPart, _ userUPP: ControlUserPaneFocusUPP!) -> ControlPartCode
var kHIDataBrowserClassID: String { get }
var kControlKindDataBrowser: Int { get }
var errDataBrowserNotConfigured: Int { get }
var errDataBrowserItemNotFound: Int { get }
var errDataBrowserItemNotAdded: Int { get }
var errDataBrowserPropertyNotFound: Int { get }
var errDataBrowserInvalidPropertyPart: Int { get }
var errDataBrowserInvalidPropertyData: Int { get }
var errDataBrowserPropertyNotSupported: Int { get }
var kControlDataBrowserIncludesFrameAndFocusTag: Int { get }
var kControlDataBrowserKeyFilterTag: Int { get }
var kControlDataBrowserEditTextKeyFilterTag: Int { get }
var kControlDataBrowserEditTextValidationProcTag: Int { get }
typealias DataBrowserViewStyle = OSType
var kDataBrowserNoView: Int { get }
var kDataBrowserListView: Int { get }
var kDataBrowserColumnView: Int { get }
typealias DataBrowserSelectionFlags = UInt32
var kDataBrowserDragSelect: Int { get }
var kDataBrowserSelectOnlyOne: Int { get }
var kDataBrowserResetSelection: Int { get }
var kDataBrowserCmdTogglesSelection: Int { get }
var kDataBrowserNoDisjointSelection: Int { get }
var kDataBrowserAlwaysExtendSelection: Int { get }
var kDataBrowserNeverEmptySelectionSet: Int { get }
typealias DataBrowserSortOrder = UInt16
var kDataBrowserOrderUndefined: Int { get }
var kDataBrowserOrderIncreasing: Int { get }
var kDataBrowserOrderDecreasing: Int { get }
typealias DataBrowserItemID = UInt
var kDataBrowserNoItem: Int { get }
typealias DataBrowserItemState = UInt32
var kDataBrowserItemNoState: UInt32 { get }
var kDataBrowserItemAnyState: UInt32 { get }
var kDataBrowserItemIsSelected: UInt32 { get }
var kDataBrowserContainerIsOpen: UInt32 { get }
var kDataBrowserItemIsDragTarget: UInt32 { get }
typealias DataBrowserRevealOptions = UInt8
var kDataBrowserRevealOnly: Int { get }
var kDataBrowserRevealAndCenterInView: Int { get }
var kDataBrowserRevealWithoutSelecting: Int { get }
typealias DataBrowserSetOption = UInt32
var kDataBrowserItemsAdd: Int { get }
var kDataBrowserItemsAssign: Int { get }
var kDataBrowserItemsToggle: Int { get }
var kDataBrowserItemsRemove: Int { get }
typealias DataBrowserSelectionAnchorDirection = UInt32
var kDataBrowserSelectionAnchorUp: Int { get }
var kDataBrowserSelectionAnchorDown: Int { get }
var kDataBrowserSelectionAnchorLeft: Int { get }
var kDataBrowserSelectionAnchorRight: Int { get }
typealias DataBrowserEditCommand = UInt32
var kDataBrowserEditMsgUndo: Int { get }
var kDataBrowserEditMsgRedo: Int { get }
var kDataBrowserEditMsgCut: Int { get }
var kDataBrowserEditMsgCopy: Int { get }
var kDataBrowserEditMsgPaste: Int { get }
var kDataBrowserEditMsgClear: Int { get }
var kDataBrowserEditMsgSelectAll: Int { get }
typealias DataBrowserItemNotification = UInt32
var kDataBrowserItemAdded: Int { get }
var kDataBrowserItemRemoved: Int { get }
var kDataBrowserEditStarted: Int { get }
var kDataBrowserEditStopped: Int { get }
var kDataBrowserItemSelected: Int { get }
var kDataBrowserItemDeselected: Int { get }
var kDataBrowserItemDoubleClicked: Int { get }
var kDataBrowserContainerOpened: Int { get }
var kDataBrowserContainerClosing: Int { get }
var kDataBrowserContainerClosed: Int { get }
var kDataBrowserContainerSorting: Int { get }
var kDataBrowserContainerSorted: Int { get }
var kDataBrowserUserToggledContainer: Int { get }
var kDataBrowserTargetChanged: Int { get }
var kDataBrowserUserStateChanged: Int { get }
var kDataBrowserSelectionSetChanged: Int { get }
var kDataBrowserItemNoProperty: Int { get }
var kDataBrowserItemIsActiveProperty: Int { get }
var kDataBrowserItemIsSelectableProperty: Int { get }
var kDataBrowserItemIsEditableProperty: Int { get }
var kDataBrowserItemIsContainerProperty: Int { get }
var kDataBrowserContainerIsOpenableProperty: Int { get }
var kDataBrowserContainerIsClosableProperty: Int { get }
var kDataBrowserContainerIsSortableProperty: Int { get }
var kDataBrowserItemSelfIdentityProperty: Int { get }
var kDataBrowserContainerAliasIDProperty: Int { get }
var kDataBrowserColumnViewPreviewProperty: Int { get }
var kDataBrowserItemParentContainerProperty: Int { get }
typealias DataBrowserPropertyID = UInt
typealias DataBrowserPropertyType = OSType
var kDataBrowserCustomType: Int { get }
var kDataBrowserIconType: Int { get }
var kDataBrowserTextType: Int { get }
var kDataBrowserDateTimeType: Int { get }
var kDataBrowserSliderType: Int { get }
var kDataBrowserCheckboxType: Int { get }
var kDataBrowserProgressBarType: Int { get }
var kDataBrowserRelevanceRankType: Int { get }
var kDataBrowserPopupMenuType: Int { get }
var kDataBrowserIconAndTextType: Int { get }
typealias DataBrowserPropertyPart = OSType
var kDataBrowserPropertyEnclosingPart: Int { get }
var kDataBrowserPropertyContentPart: Int { get }
var kDataBrowserPropertyDisclosurePart: Int { get }
var kDataBrowserPropertyTextPart: Int { get }
var kDataBrowserPropertyIconPart: Int { get }
var kDataBrowserPropertySliderPart: Int { get }
var kDataBrowserPropertyCheckboxPart: Int { get }
var kDataBrowserPropertyProgressBarPart: Int { get }
var kDataBrowserPropertyRelevanceRankPart: Int { get }
typealias DataBrowserPropertyFlags = UInt32
var kDataBrowserUniversalPropertyFlagsMask: Int { get }
var kDataBrowserPropertyIsMutable: Int { get }
var kDataBrowserDefaultPropertyFlags: Int { get }
var kDataBrowserUniversalPropertyFlags: Int { get }
var kDataBrowserPropertyIsEditable: Int { get }
var kDataBrowserPropertyFlagsOffset: Int { get }
var kDataBrowserPropertyFlagsMask: Int { get }
var kDataBrowserCheckboxTriState: Int { get }
var kDataBrowserDateTimeRelative: Int { get }
var kDataBrowserDateTimeDateOnly: Int { get }
var kDataBrowserDateTimeTimeOnly: Int { get }
var kDataBrowserDateTimeSecondsToo: Int { get }
var kDataBrowserSliderPlainThumb: Int { get }
var kDataBrowserSliderUpwardThumb: Int { get }
var kDataBrowserSliderDownwardThumb: Int { get }
var kDataBrowserDoNotTruncateText: Int { get }
var kDataBrowserTruncateTextAtEnd: Int { get }
var kDataBrowserTruncateTextMiddle: Int { get }
var kDataBrowserTruncateTextAtStart: Int { get }
var kDataBrowserPopupMenuButtonless: Int { get }
var kDataBrowserPropertyModificationFlags: Int { get }
var kDataBrowserRelativeDateTime: Int { get }
var kDataBrowserViewSpecificFlagsOffset: Int { get }
var kDataBrowserViewSpecificFlagsMask: Int { get }
var kDataBrowserViewSpecificPropertyFlags: Int { get }
var kDataBrowserClientPropertyFlagsOffset: Int { get }
var kDataBrowserClientPropertyFlagsMask: Int { get }
struct DataBrowserPropertyDesc {
  var propertyID: DataBrowserPropertyID
  var propertyType: DataBrowserPropertyType
  var propertyFlags: DataBrowserPropertyFlags
  init()
  init(propertyID: DataBrowserPropertyID, propertyType: DataBrowserPropertyType, propertyFlags: DataBrowserPropertyFlags)
}
typealias DataBrowserItemProcPtr = @convention(c) (DataBrowserItemID, DataBrowserItemState, UnsafeMutablePointer<Void>) -> Void
typealias DataBrowserItemUPP = DataBrowserItemProcPtr
func NewDataBrowserItemUPP(userRoutine: DataBrowserItemProcPtr!) -> DataBrowserItemUPP!
func DisposeDataBrowserItemUPP(userUPP: DataBrowserItemUPP!)
func InvokeDataBrowserItemUPP(item: DataBrowserItemID, _ state: DataBrowserItemState, _ clientData: UnsafeMutablePointer<Void>, _ userUPP: DataBrowserItemUPP!)
var kDataBrowserAttributeNone: Int { get }
var kDataBrowserAttributeColumnViewResizeWindow: Int { get }
var kDataBrowserAttributeListViewAlternatingRowColors: Int { get }
var kDataBrowserAttributeListViewDrawColumnDividers: Int { get }
var kDataBrowserAttributeAutoHideScrollBars: Int { get }
var kDataBrowserAttributeReserveGrowBoxSpace: Int { get }
var kDataBrowserMetricCellContentInset: Int { get }
var kDataBrowserMetricIconAndTextGap: Int { get }
var kDataBrowserMetricDisclosureColumnEdgeInset: Int { get }
var kDataBrowserMetricDisclosureTriangleAndContentGap: Int { get }
var kDataBrowserMetricDisclosureColumnPerDepthGap: Int { get }
var kDataBrowserMetricLast: Int { get }
typealias DataBrowserMetric = UInt32
typealias DataBrowserItemDataRef = UnsafeMutablePointer<Void>
typealias DataBrowserItemDataProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, DataBrowserItemDataRef, DarwinBoolean) -> OSStatus
typealias DataBrowserItemDataUPP = DataBrowserItemDataProcPtr
typealias DataBrowserItemCompareProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserItemID, DataBrowserPropertyID) -> DarwinBoolean
typealias DataBrowserItemCompareUPP = DataBrowserItemCompareProcPtr
typealias DataBrowserItemNotificationWithItemProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserItemNotification, DataBrowserItemDataRef) -> Void
typealias DataBrowserItemNotificationProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserItemNotification) -> Void
typealias DataBrowserItemNotificationWithItemUPP = DataBrowserItemNotificationWithItemProcPtr
typealias DataBrowserItemNotificationUPP = DataBrowserItemNotificationProcPtr
typealias DataBrowserAddDragItemProcPtr = @convention(c) (Control!, DragReference, DataBrowserItemID, UnsafeMutablePointer<ItemReference>) -> DarwinBoolean
typealias DataBrowserAcceptDragProcPtr = @convention(c) (Control!, DragReference, DataBrowserItemID) -> DarwinBoolean
typealias DataBrowserReceiveDragProcPtr = @convention(c) (Control!, DragReference, DataBrowserItemID) -> DarwinBoolean
typealias DataBrowserPostProcessDragProcPtr = @convention(c) (Control!, DragReference, OSStatus) -> Void
typealias DataBrowserAddDragItemUPP = DataBrowserAddDragItemProcPtr
typealias DataBrowserAcceptDragUPP = DataBrowserAcceptDragProcPtr
typealias DataBrowserReceiveDragUPP = DataBrowserReceiveDragProcPtr
typealias DataBrowserPostProcessDragUPP = DataBrowserPostProcessDragProcPtr
typealias DataBrowserGetContextualMenuProcPtr = @convention(c) (Control!, UnsafeMutablePointer<Unmanaged<Menu>?>, UnsafeMutablePointer<UInt32>, UnsafeMutablePointer<Unmanaged<CFString>?>, UnsafeMutablePointer<AEDesc>) -> Void
typealias DataBrowserSelectContextualMenuProcPtr = @convention(c) (Control!, Menu!, UInt32, Int16, MenuItemIndex) -> Void
typealias DataBrowserGetContextualMenuUPP = DataBrowserGetContextualMenuProcPtr
typealias DataBrowserSelectContextualMenuUPP = DataBrowserSelectContextualMenuProcPtr
typealias DataBrowserItemHelpContentProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, HMContentRequest, UnsafeMutablePointer<HMContentProvidedType>, UnsafeMutablePointer<HMHelpContentRec>) -> Void
typealias DataBrowserItemHelpContentUPP = DataBrowserItemHelpContentProcPtr
func NewDataBrowserItemDataUPP(userRoutine: DataBrowserItemDataProcPtr!) -> DataBrowserItemDataUPP!
func NewDataBrowserItemCompareUPP(userRoutine: DataBrowserItemCompareProcPtr!) -> DataBrowserItemCompareUPP!
func NewDataBrowserItemNotificationWithItemUPP(userRoutine: DataBrowserItemNotificationWithItemProcPtr!) -> DataBrowserItemNotificationWithItemUPP!
func NewDataBrowserItemNotificationUPP(userRoutine: DataBrowserItemNotificationProcPtr!) -> DataBrowserItemNotificationUPP!
func NewDataBrowserAddDragItemUPP(userRoutine: DataBrowserAddDragItemProcPtr!) -> DataBrowserAddDragItemUPP!
func NewDataBrowserAcceptDragUPP(userRoutine: DataBrowserAcceptDragProcPtr!) -> DataBrowserAcceptDragUPP!
func NewDataBrowserReceiveDragUPP(userRoutine: DataBrowserReceiveDragProcPtr!) -> DataBrowserReceiveDragUPP!
func NewDataBrowserPostProcessDragUPP(userRoutine: DataBrowserPostProcessDragProcPtr!) -> DataBrowserPostProcessDragUPP!
func NewDataBrowserGetContextualMenuUPP(userRoutine: DataBrowserGetContextualMenuProcPtr!) -> DataBrowserGetContextualMenuUPP!
func NewDataBrowserSelectContextualMenuUPP(userRoutine: DataBrowserSelectContextualMenuProcPtr!) -> DataBrowserSelectContextualMenuUPP!
func NewDataBrowserItemHelpContentUPP(userRoutine: DataBrowserItemHelpContentProcPtr!) -> DataBrowserItemHelpContentUPP!
func DisposeDataBrowserItemDataUPP(userUPP: DataBrowserItemDataUPP!)
func DisposeDataBrowserItemCompareUPP(userUPP: DataBrowserItemCompareUPP!)
func DisposeDataBrowserItemNotificationWithItemUPP(userUPP: DataBrowserItemNotificationWithItemUPP!)
func DisposeDataBrowserItemNotificationUPP(userUPP: DataBrowserItemNotificationUPP!)
func DisposeDataBrowserAddDragItemUPP(userUPP: DataBrowserAddDragItemUPP!)
func DisposeDataBrowserAcceptDragUPP(userUPP: DataBrowserAcceptDragUPP!)
func DisposeDataBrowserReceiveDragUPP(userUPP: DataBrowserReceiveDragUPP!)
func DisposeDataBrowserPostProcessDragUPP(userUPP: DataBrowserPostProcessDragUPP!)
func DisposeDataBrowserGetContextualMenuUPP(userUPP: DataBrowserGetContextualMenuUPP!)
func DisposeDataBrowserSelectContextualMenuUPP(userUPP: DataBrowserSelectContextualMenuUPP!)
func DisposeDataBrowserItemHelpContentUPP(userUPP: DataBrowserItemHelpContentUPP!)
func InvokeDataBrowserItemDataUPP(browser: Control!, _ item: DataBrowserItemID, _ property: DataBrowserPropertyID, _ itemData: DataBrowserItemDataRef, _ setValue: Bool, _ userUPP: DataBrowserItemDataUPP!) -> OSStatus
func InvokeDataBrowserItemCompareUPP(browser: Control!, _ itemOne: DataBrowserItemID, _ itemTwo: DataBrowserItemID, _ sortProperty: DataBrowserPropertyID, _ userUPP: DataBrowserItemCompareUPP!) -> Bool
func InvokeDataBrowserItemNotificationWithItemUPP(browser: Control!, _ item: DataBrowserItemID, _ message: DataBrowserItemNotification, _ itemData: DataBrowserItemDataRef, _ userUPP: DataBrowserItemNotificationWithItemUPP!)
func InvokeDataBrowserItemNotificationUPP(browser: Control!, _ item: DataBrowserItemID, _ message: DataBrowserItemNotification, _ userUPP: DataBrowserItemNotificationUPP!)
func InvokeDataBrowserAddDragItemUPP(browser: Control!, _ theDrag: DragReference, _ item: DataBrowserItemID, _ itemRef: UnsafeMutablePointer<ItemReference>, _ userUPP: DataBrowserAddDragItemUPP!) -> Bool
func InvokeDataBrowserAcceptDragUPP(browser: Control!, _ theDrag: DragReference, _ item: DataBrowserItemID, _ userUPP: DataBrowserAcceptDragUPP!) -> Bool
func InvokeDataBrowserReceiveDragUPP(browser: Control!, _ theDrag: DragReference, _ item: DataBrowserItemID, _ userUPP: DataBrowserReceiveDragUPP!) -> Bool
func InvokeDataBrowserPostProcessDragUPP(browser: Control!, _ theDrag: DragReference, _ trackDragResult: OSStatus, _ userUPP: DataBrowserPostProcessDragUPP!)
func InvokeDataBrowserGetContextualMenuUPP(browser: Control!, _ menu: UnsafeMutablePointer<Unmanaged<Menu>?>, _ helpType: UnsafeMutablePointer<UInt32>, _ helpItemString: UnsafeMutablePointer<Unmanaged<CFString>?>, _ selection: UnsafeMutablePointer<AEDesc>, _ userUPP: DataBrowserGetContextualMenuUPP!)
func InvokeDataBrowserSelectContextualMenuUPP(browser: Control!, _ menu: Menu!, _ selectionType: UInt32, _ menuID: Int16, _ menuItem: MenuItemIndex, _ userUPP: DataBrowserSelectContextualMenuUPP!)
func InvokeDataBrowserItemHelpContentUPP(browser: Control!, _ item: DataBrowserItemID, _ property: DataBrowserPropertyID, _ inRequest: HMContentRequest, _ outContentProvided: UnsafeMutablePointer<HMContentProvidedType>, _ ioHelpContent: UnsafeMutablePointer<HMHelpContentRec>, _ userUPP: DataBrowserItemHelpContentUPP!)
var kDataBrowserLatestCallbacks: Int { get }
struct DataBrowserCallbacks {
  struct __Unnamed_union_u {
    struct __Unnamed_struct_v1 {
      var itemDataCallback: DataBrowserItemDataUPP!
      var itemCompareCallback: DataBrowserItemCompareUPP!
      var itemNotificationCallback: DataBrowserItemNotificationUPP!
      var addDragItemCallback: DataBrowserAddDragItemUPP!
      var acceptDragCallback: DataBrowserAcceptDragUPP!
      var receiveDragCallback: DataBrowserReceiveDragUPP!
      var postProcessDragCallback: DataBrowserPostProcessDragUPP!
      var itemHelpContentCallback: DataBrowserItemHelpContentUPP!
      var getContextualMenuCallback: DataBrowserGetContextualMenuUPP!
      var selectContextualMenuCallback: DataBrowserSelectContextualMenuUPP!
      init()
      init(itemDataCallback: DataBrowserItemDataUPP!, itemCompareCallback: DataBrowserItemCompareUPP!, itemNotificationCallback: DataBrowserItemNotificationUPP!, addDragItemCallback: DataBrowserAddDragItemUPP!, acceptDragCallback: DataBrowserAcceptDragUPP!, receiveDragCallback: DataBrowserReceiveDragUPP!, postProcessDragCallback: DataBrowserPostProcessDragUPP!, itemHelpContentCallback: DataBrowserItemHelpContentUPP!, getContextualMenuCallback: DataBrowserGetContextualMenuUPP!, selectContextualMenuCallback: DataBrowserSelectContextualMenuUPP!)
    }
    var v1: DataBrowserCallbacks.__Unnamed_union_u.__Unnamed_struct_v1
    init(v1: DataBrowserCallbacks.__Unnamed_union_u.__Unnamed_struct_v1)
    init()
  }
  var version: UInt32
  var u: DataBrowserCallbacks.__Unnamed_union_u
  init()
  init(version: UInt32, u: DataBrowserCallbacks.__Unnamed_union_u)
}
var kEventClassDataBrowser: Int { get }
var kEventParamDataBrowserItemID: Int { get }
var kEventParamDataBrowserPropertyID: Int { get }
var kEventParamDataBrowserItemState: Int { get }
var kEventDataBrowserDrawCustomItem: Int { get }
typealias DataBrowserDragFlags = UInt32
typealias DataBrowserTrackingResult = Int16
var kDataBrowserContentHit: Int { get }
var kDataBrowserNothingHit: Int { get }
var kDataBrowserStopTracking: Int { get }
typealias DataBrowserDrawItemProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, DataBrowserItemState, UnsafePointer<Rect>, Int16, DarwinBoolean) -> Void
typealias DataBrowserEditItemProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, CFString!, UnsafeMutablePointer<Rect>, UnsafeMutablePointer<DarwinBoolean>) -> DarwinBoolean
typealias DataBrowserHitTestProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, UnsafePointer<Rect>, UnsafePointer<Rect>) -> DarwinBoolean
typealias DataBrowserTrackingProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, UnsafePointer<Rect>, Point, EventModifiers) -> DataBrowserTrackingResult
typealias DataBrowserItemDragRgnProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, UnsafePointer<Rect>, RgnHandle) -> Void
typealias DataBrowserItemAcceptDragProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, UnsafePointer<Rect>, DragReference) -> DataBrowserDragFlags
typealias DataBrowserItemReceiveDragProcPtr = @convention(c) (Control!, DataBrowserItemID, DataBrowserPropertyID, DataBrowserDragFlags, DragReference) -> DarwinBoolean
typealias DataBrowserDrawItemUPP = DataBrowserDrawItemProcPtr
typealias DataBrowserEditItemUPP = DataBrowserEditItemProcPtr
typealias DataBrowserHitTestUPP = DataBrowserHitTestProcPtr
typealias DataBrowserTrackingUPP = DataBrowserTrackingProcPtr
typealias DataBrowserItemDragRgnUPP = DataBrowserItemDragRgnProcPtr
typealias DataBrowserItemAcceptDragUPP = DataBrowserItemAcceptDragProcPtr
typealias DataBrowserItemReceiveDragUPP = DataBrowserItemReceiveDragProcPtr
func NewDataBrowserDrawItemUPP(userRoutine: DataBrowserDrawItemProcPtr!) -> DataBrowserDrawItemUPP!
func NewDataBrowserEditItemUPP(userRoutine: DataBrowserEditItemProcPtr!) -> DataBrowserEditItemUPP!
func NewDataBrowserHitTestUPP(userRoutine: DataBrowserHitTestProcPtr!) -> DataBrowserHitTestUPP!
func NewDataBrowserTrackingUPP(userRoutine: DataBrowserTrackingProcPtr!) -> DataBrowserTrackingUPP!
func NewDataBrowserItemDragRgnUPP(userRoutine: DataBrowserItemDragRgnProcPtr!) -> DataBrowserItemDragRgnUPP!
func NewDataBrowserItemAcceptDragUPP(userRoutine: DataBrowserItemAcceptDragProcPtr!) -> DataBrowserItemAcceptDragUPP!
func NewDataBrowserItemReceiveDragUPP(userRoutine: DataBrowserItemReceiveDragProcPtr!) -> DataBrowserItemReceiveDragUPP!
func DisposeDataBrowserDrawItemUPP(userUPP: DataBrowserDrawItemUPP!)
func DisposeDataBrowserEditItemUPP(userUPP: DataBrowserEditItemUPP!)
func DisposeDataBrowserHitTestUPP(userUPP: DataBrowserHitTestUPP!)
func DisposeDataBrowserTrackingUPP(userUPP: DataBrowserTrackingUPP!)
func DisposeDataBrowserItemDragRgnUPP(userUPP: DataBrowserItemDragRgnUPP!)
func DisposeDataBrowserItemAcceptDragUPP(userUPP: DataBrowserItemAcceptDragUPP!)
func DisposeDataBrowserItemReceiveDragUPP(userUPP: DataBrowserItemReceiveDragUPP!)
func InvokeDataBrowserDrawItemUPP(browser: Control!, _ item: DataBrowserItemID, _ property: DataBrowserPropertyID, _ itemState: DataBrowserItemState, _ theRect: UnsafePointer<Rect>, _ gdDepth: Int16, _ colorDevice: Bool, _ userUPP: DataBrowserDrawItemUPP!)
func InvokeDataBrowserEditItemUPP(browser: Control!, _ item: DataBrowserItemID, _ property: DataBrowserPropertyID, _ theString: CFString!, _ maxEditTextRect: UnsafeMutablePointer<Rect>, _ shrinkToFit: UnsafeMutablePointer<DarwinBoolean>, _ userUPP: DataBrowserEditItemUPP!) -> Bool
func InvokeDataBrowserHitTestUPP(browser: Control!, _ itemID: DataBrowserItemID, _ property: DataBrowserPropertyID, _ theRect: UnsafePointer<Rect>, _ mouseRect: UnsafePointer<Rect>, _ userUPP: DataBrowserHitTestUPP!) -> Bool
func InvokeDataBrowserTrackingUPP(browser: Control!, _ itemID: DataBrowserItemID, _ property: DataBrowserPropertyID, _ theRect: UnsafePointer<Rect>, _ startPt: Point, _ modifiers: EventModifiers, _ userUPP: DataBrowserTrackingUPP!) -> DataBrowserTrackingResult
func InvokeDataBrowserItemDragRgnUPP(browser: Control!, _ itemID: DataBrowserItemID, _ property: DataBrowserPropertyID, _ theRect: UnsafePointer<Rect>, _ dragRgn: RgnHandle, _ userUPP: DataBrowserItemDragRgnUPP!)
func InvokeDataBrowserItemAcceptDragUPP(browser: Control!, _ itemID: DataBrowserItemID, _ property: DataBrowserPropertyID, _ theRect: UnsafePointer<Rect>, _ theDrag: DragReference, _ userUPP: DataBrowserItemAcceptDragUPP!) -> DataBrowserDragFlags
func InvokeDataBrowserItemReceiveDragUPP(browser: Control!, _ itemID: DataBrowserItemID, _ property: DataBrowserPropertyID, _ dragFlags: DataBrowserDragFlags, _ theDrag: DragReference, _ userUPP: DataBrowserItemReceiveDragUPP!) -> Bool
var kDataBrowserLatestCustomCallbacks: Int { get }
struct DataBrowserCustomCallbacks {
  struct __Unnamed_union_u {
    struct __Unnamed_struct_v1 {
      var drawItemCallback: DataBrowserDrawItemUPP!
      var editTextCallback: DataBrowserEditItemUPP!
      var hitTestCallback: DataBrowserHitTestUPP!
      var trackingCallback: DataBrowserTrackingUPP!
      var dragRegionCallback: DataBrowserItemDragRgnUPP!
      var acceptDragCallback: DataBrowserItemAcceptDragUPP!
      var receiveDragCallback: DataBrowserItemReceiveDragUPP!
      init()
      init(drawItemCallback: DataBrowserDrawItemUPP!, editTextCallback: DataBrowserEditItemUPP!, hitTestCallback: DataBrowserHitTestUPP!, trackingCallback: DataBrowserTrackingUPP!, dragRegionCallback: DataBrowserItemDragRgnUPP!, acceptDragCallback: DataBrowserItemAcceptDragUPP!, receiveDragCallback: DataBrowserItemReceiveDragUPP!)
    }
    var v1: DataBrowserCustomCallbacks.__Unnamed_union_u.__Unnamed_struct_v1
    init(v1: DataBrowserCustomCallbacks.__Unnamed_union_u.__Unnamed_struct_v1)
    init()
  }
  var version: UInt32
  var u: DataBrowserCustomCallbacks.__Unnamed_union_u
  init()
  init(version: UInt32, u: DataBrowserCustomCallbacks.__Unnamed_union_u)
}
typealias DataBrowserTableViewHiliteStyle = UInt32
var kDataBrowserTableViewMinimalHilite: Int { get }
var kDataBrowserTableViewFillHilite: Int { get }
typealias DataBrowserTableViewPropertyFlags = UInt32
var kDataBrowserTableViewSelectionColumn: Int { get }
typealias DataBrowserTableViewRowIndex = UInt
typealias DataBrowserTableViewColumnIndex = UInt
typealias DataBrowserTableViewColumnID = DataBrowserPropertyID
typealias DataBrowserTableViewColumnDesc = DataBrowserPropertyDesc
var kDataBrowserTableViewLastColumn: Int { get }
var kDataBrowserListViewSelectionColumn: Int { get }
var kDataBrowserListViewMovableColumn: Int { get }
var kDataBrowserListViewSortableColumn: Int { get }
var kDataBrowserListViewTypeSelectColumn: Int { get }
var kDataBrowserListViewNoGapForIconInHeaderButton: Int { get }
var kDataBrowserListViewDefaultColumnFlags: Int { get }
typealias DataBrowserListViewPropertyFlags = DataBrowserPropertyFlags
var kDataBrowserListViewLatestHeaderDesc: Int { get }
struct DataBrowserListViewHeaderDesc {
  var version: UInt32
  var minimumWidth: UInt16
  var maximumWidth: UInt16
  var titleOffset: Int16
  var titleString: Unmanaged<CFString>!
  var initialOrder: DataBrowserSortOrder
  var btnFontStyle: ControlFontStyleRec
  var btnContentInfo: ControlButtonContentInfo
  init()
  init(version: UInt32, minimumWidth: UInt16, maximumWidth: UInt16, titleOffset: Int16, titleString: Unmanaged<CFString>!, initialOrder: DataBrowserSortOrder, btnFontStyle: ControlFontStyleRec, btnContentInfo: ControlButtonContentInfo)
}
struct DataBrowserListViewColumnDesc {
  var propertyDesc: DataBrowserTableViewColumnDesc
  var headerBtnDesc: DataBrowserListViewHeaderDesc
  init()
  init(propertyDesc: DataBrowserTableViewColumnDesc, headerBtnDesc: DataBrowserListViewHeaderDesc)
}
var kDataBrowserListViewAppendColumn: Int { get }
struct DataBrowserAccessibilityItemInfoV0 {
  var container: DataBrowserItemID
  var item: DataBrowserItemID
  var columnProperty: DataBrowserPropertyID
  var propertyPart: DataBrowserPropertyPart
  init()
  init(container: DataBrowserItemID, item: DataBrowserItemID, columnProperty: DataBrowserPropertyID, propertyPart: DataBrowserPropertyPart)
}
struct DataBrowserAccessibilityItemInfoV1 {
  var container: DataBrowserItemID
  var item: DataBrowserItemID
  var columnProperty: DataBrowserPropertyID
  var propertyPart: DataBrowserPropertyPart
  var rowIndex: DataBrowserTableViewRowIndex
  var columnIndex: DataBrowserTableViewColumnIndex
  init()
  init(container: DataBrowserItemID, item: DataBrowserItemID, columnProperty: DataBrowserPropertyID, propertyPart: DataBrowserPropertyPart, rowIndex: DataBrowserTableViewRowIndex, columnIndex: DataBrowserTableViewColumnIndex)
}
struct DataBrowserAccessibilityItemInfo {
  struct __Unnamed_union_u {
    var v0: DataBrowserAccessibilityItemInfoV0
    var v1: DataBrowserAccessibilityItemInfoV1
    init(v0: DataBrowserAccessibilityItemInfoV0)
    init(v1: DataBrowserAccessibilityItemInfoV1)
    init()
  }
  var version: UInt32
  var u: DataBrowserAccessibilityItemInfo.__Unnamed_union_u
  init()
  init(version: UInt32, u: DataBrowserAccessibilityItemInfo.__Unnamed_union_u)
}
var kHIDisclosureButtonClassID: String { get }
var kControlKindDisclosureButton: Int { get }
var kControlDisclosureButtonClosed: Int { get }
var kControlDisclosureButtonDisclosed: Int { get }
var kControlTriangleProc: Int { get }
var kControlTriangleLeftFacingProc: Int { get }
var kControlTriangleAutoToggleProc: Int { get }
var kControlTriangleLeftFacingAutoToggleProc: Int { get }
typealias ControlDisclosureTriangleOrientation = UInt16
var kControlDisclosureTrianglePointDefault: Int { get }
var kControlDisclosureTrianglePointRight: Int { get }
var kControlDisclosureTrianglePointLeft: Int { get }
var kControlKindDisclosureTriangle: Int { get }
var kHIDisclosureTriangleClassID: String { get }
var kControlTriangleLastValueTag: Int { get }
typealias HIPoint = CGPoint
typealias HISize = CGSize
typealias HIRect = CGRect
typealias HICoordinateSpace = UInt32
var kHICoordSpace72DPIGlobal: Int { get }
var kHICoordSpaceScreenPixel: Int { get }
var kHICoordSpaceWindow: Int { get }
var kHICoordSpaceView: Int { get }
func HIPointConvert(ioPoint: UnsafeMutablePointer<HIPoint>, _ inSourceSpace: HICoordinateSpace, _ inSourceObject: UnsafeMutablePointer<Void>, _ inDestinationSpace: HICoordinateSpace, _ inDestinationObject: UnsafeMutablePointer<Void>)
func HIRectConvert(ioRect: UnsafeMutablePointer<HIRect>, _ inSourceSpace: HICoordinateSpace, _ inSourceObject: UnsafeMutablePointer<Void>, _ inDestinationSpace: HICoordinateSpace, _ inDestinationObject: UnsafeMutablePointer<Void>)
func HISizeConvert(ioSize: UnsafeMutablePointer<HISize>, _ inSourceSpace: HICoordinateSpace, _ inSourceObject: UnsafeMutablePointer<Void>, _ inDestinationSpace: HICoordinateSpace, _ inDestinationObject: UnsafeMutablePointer<Void>)
var kHIImageViewClassID: String { get }
var kControlKindHIImageView: Int { get }
typealias HIImageViewAutoTransformOptions = UInt32
var kHIImageViewAutoTransformNone: Int { get }
var kHIImageViewAutoTransformOnDisable: Int { get }
var kHIImageViewAutoTransformOnDeactivate: Int { get }
var kHIImageViewImageTag: Int { get }
var kControlIconProc: Int { get }
var kControlIconNoTrackProc: Int { get }
var kControlIconSuiteProc: Int { get }
var kControlIconSuiteNoTrackProc: Int { get }
var kControlIconRefProc: Int { get }
var kControlIconRefNoTrackProc: Int { get }
var kControlKindIcon: Int { get }
var kHIIconViewClassID: String { get }
var kControlIconTransformTag: Int { get }
var kControlIconAlignmentTag: Int { get }
var kControlIconResourceIDTag: Int { get }
var kControlIconContentTag: Int { get }
var kControlImageWellProc: Int { get }
var kControlKindImageWell: Int { get }
var kHIImageWellClassID: String { get }
var kControlImageWellContentTag: Int { get }
var kControlImageWellTransformTag: Int { get }
var kControlImageWellIsDragDestinationTag: Int { get }
var kControlLittleArrowsProc: Int { get }
var kControlKindLittleArrows: Int { get }
var kControlLittleArrowsIncrementValueTag: Int { get }
var kHILittleArrowsClassID: String { get }
var kHIMenuViewClassID: String { get }
var kHIStandardMenuViewClassID: String { get }
var kControlKindHIMenuView: Int { get }
var kControlKindHIStandardMenuView: Int { get }
let kHIViewMenuContentID: HIViewID
class HIObjectClass {
}
typealias HIObjectClassRef = HIObjectClass
typealias HIObjectRef = HIObject
class HIObject {
}
var hiObjectClassExistsErr: Int { get }
var hiObjectClassHasInstancesErr: Int { get }
var hiObjectClassHasSubclassesErr: Int { get }
var hiObjectClassIsAbstractErr: Int { get }
var hiObjectCannotSubclassSingletonErr: Int { get }
var hiObjectDelegateAlreadyExistsErr: Int { get }
var hiObjectDelegateNotFoundErr: Int { get }
var kHIClassOptionSingleton: Int { get }
var kEventClassHIObject: Int { get }
var kEventParamHIObjectInstance: Int { get }
var kEventParamHIArchive: Int { get }
var kEventParamBeforeDelegates: Int { get }
var kEventParamAfterDelegates: Int { get }
var kEventParamDecodingForEditor: Int { get }
var kEventParamInitParameters: Int { get }
var typeHIObjectRef: Int { get }
let kHIObjectInitParamUserName: CFString!
let kHIObjectInitParamDescription: CFString!
let kHIObjectInitParamEventName: CFString!
let kHIObjectInitParamEventType: CFString!
var kEventHIObjectConstruct: Int { get }
var kEventHIObjectInitialize: Int { get }
var kEventHIObjectDestruct: Int { get }
var kEventHIObjectIsEqual: Int { get }
var kEventHIObjectPrintDebugInfo: Int { get }
var kEventHIObjectEncode: Int { get }
var kEventHIObjectCreatedFromArchive: Int { get }
var kEventHIObjectGetInitParameters: Int { get }
var kEventClassDelegate: Int { get }
var kEventParamDelegateTarget: Int { get }
var kEventParamDelegateTargetClasses: Int { get }
var kEventParamDelegateGroupClasses: Int { get }
var kEventParamDelegateGroupParameters: Int { get }
var kEventDelegateInstalled: Int { get }
var kEventDelegateRemoved: Int { get }
var kEventDelegateGetTargetClasses: Int { get }
var kEventDelegateIsGroup: Int { get }
var kEventDelegateGetGroupClasses: Int { get }
func HIObjectRegisterSubclass(inClassID: CFString!, _ inBaseClassID: CFString!, _ inOptions: OptionBits, _ inConstructProc: EventHandlerUPP!, _ inNumEvents: Int, _ inEventList: UnsafePointer<EventTypeSpec>, _ inConstructData: UnsafeMutablePointer<Void>, _ outClassRef: UnsafeMutablePointer<Unmanaged<HIObjectClass>?>) -> OSStatus
func HIObjectUnregisterClass(inClassRef: HIObjectClass!) -> OSStatus
func HIObjectCreate(inClassID: CFString!, _ inConstructData: EventRef, _ outObject: UnsafeMutablePointer<Unmanaged<HIObject>?>) -> OSStatus
func HIObjectGetEventTarget(inObject: HIObject!) -> EventTargetRef
func HIObjectPrintDebugInfo(inObject: HIObject!)
func HIObjectCopyClassID(inObject: HIObject!) -> Unmanaged<CFString>!
func HIObjectIsOfClass(inObject: HIObject!, _ inObjectClassID: CFString!) -> Bool
func HIObjectDynamicCast(inObject: HIObject!, _ inClassID: CFString!) -> UnsafeMutablePointer<Void>
func HIObjectCreateFromBundle(inBundle: CFBundle!, _ outObject: UnsafeMutablePointer<Unmanaged<HIObject>?>) -> OSStatus
func HIObjectFromEventTarget(inTarget: EventTargetRef) -> Unmanaged<HIObject>!
func HIObjectIsArchivingIgnored(inObject: HIObject!) -> Bool
let kHIObjectCustomDataParameterNamesKey: CFString!
let kHIObjectCustomDataParameterTypesKey: CFString!
let kHIObjectCustomDataParameterValuesKey: CFString!
let kHIObjectCustomDataClassIDKey: CFString!
let kHIObjectCustomDataSuperClassIDKey: CFString!
let kHIObjectCustomDataCDEFProcIDKey: CFString!
let kHIObjectCustomDataDelegateGroupParametersKey: CFString!
typealias HIDelegatePosition = UInt32
var kHIDelegateAll: Int { get }
var kHIDelegateBefore: Int { get }
var kHIDelegateAfter: Int { get }
let kHIDelegateBeforeKey: CFString!
let kHIDelegateAfterKey: CFString!
func HIObjectAddDelegate(inObject: HIObject!, _ inDelegate: HIObject!, _ inPosition: HIDelegatePosition) -> OSStatus
func HIObjectRemoveDelegate(inObject: HIObject!, _ inDelegate: HIObject!, _ inPosition: HIDelegatePosition) -> OSStatus
func HIObjectCopyDelegates(inObject: HIObject!, _ outDelegates: UnsafeMutablePointer<Unmanaged<CFDictionary>?>) -> OSStatus
func HIObjectGetEventHandlerObject(inRef: EventHandlerCallRef) -> Unmanaged<HIObject>!
class Control {
}
typealias ControlRef = Control
typealias ControlHandle = ControlRef
typealias HIViewRef = HIView
typealias HIView = ControlRef
var kControlPopupButtonProc: Int { get }
var kControlPopupFixedWidthVariant: Int { get }
var kControlPopupVariableWidthVariant: Int { get }
var kControlPopupUseAddResMenuVariant: Int { get }
var kControlPopupUseWFontVariant: Int { get }
var kControlKindPopupButton: Int { get }
var kHIPopupButtonClassID: String { get }
var kControlPopupButtonMenuHandleTag: Int { get }
var kControlPopupButtonMenuRefTag: Int { get }
var kControlPopupButtonMenuIDTag: Int { get }
var kControlPopupButtonExtraHeightTag: Int { get }
var kControlPopupButtonOwnedMenuRefTag: Int { get }
var kControlPopupButtonCheckCurrentTag: Int { get }
var kControlPopupArrowEastProc: Int { get }
var kControlPopupArrowWestProc: Int { get }
var kControlPopupArrowNorthProc: Int { get }
var kControlPopupArrowSouthProc: Int { get }
var kControlPopupArrowSmallEastProc: Int { get }
var kControlPopupArrowSmallWestProc: Int { get }
var kControlPopupArrowSmallNorthProc: Int { get }
var kControlPopupArrowSmallSouthProc: Int { get }
var kControlPopupArrowOrientationEast: Int { get }
var kControlPopupArrowOrientationWest: Int { get }
var kControlPopupArrowOrientationNorth: Int { get }
var kControlPopupArrowOrientationSouth: Int { get }
typealias ControlPopupArrowOrientation = UInt16
var kControlPopupArrowSizeNormal: Int { get }
var kControlPopupArrowSizeSmall: Int { get }
typealias ControlPopupArrowSize = UInt16
var kControlKindPopupArrow: Int { get }
var kHIPopupArrowClassID: String { get }
var popupFixedWidth: Int { get }
var popupVariableWidth: Int { get }
var popupUseAddResMenu: Int { get }
var popupUseWFont: Int { get }
var popupTitleBold: Int { get }
var popupTitleItalic: Int { get }
var popupTitleUnderline: Int { get }
var popupTitleOutline: Int { get }
var popupTitleShadow: Int { get }
var popupTitleCondense: Int { get }
var popupTitleExtend: Int { get }
var popupTitleNoStyle: Int { get }
var popupTitleLeftJust: Int { get }
var popupTitleCenterJust: Int { get }
var popupTitleRightJust: Int { get }
var kControlProgressBarProc: Int { get }
var kControlRelevanceBarProc: Int { get }
var kControlKindProgressBar: Int { get }
var kControlKindRelevanceBar: Int { get }
var kHIProgressBarClassID: String { get }
var kControlProgressBarIndeterminateTag: Int { get }
var kControlProgressBarAnimatingTag: Int { get }
var kControlChasingArrowsProc: Int { get }
var kControlKindChasingArrows: Int { get }
var kHIChasingArrowsClassID: String { get }
var kControlChasingArrowsAnimatingTag: Int { get }
var kHIRelevanceBarClassID: String { get }
var kControlScrollBarProc: Int { get }
var kControlScrollBarLiveProc: Int { get }
var kControlKindScrollBar: Int { get }
var kHIScrollBarClassID: String { get }
var kControlScrollBarShowsArrowsTag: Int { get }
var kHIScrollViewClassID: String { get }
var kControlKindHIScrollView: Int { get }
var kEventClassScrollable: Int { get }
var kEventParamImageSize: Int { get }
var kEventParamViewSize: Int { get }
var kEventParamLineSize: Int { get }
var kEventParamOrigin: Int { get }
var kEventScrollableGetInfo: Int { get }
var kEventScrollableInfoChanged: Int { get }
var kEventScrollableScrollTo: Int { get }
var kHIScrollViewOptionsVertScroll: Int { get }
var kHIScrollViewOptionsHorizScroll: Int { get }
var kHIScrollViewOptionsAllowGrow: Int { get }
var kHIScrollViewOptionsFillGrowArea: Int { get }
var kHIScrollViewOptionsDisableSmoothScrolling: Int { get }
var kHIScrollViewValidOptions: Int { get }
typealias HIScrollViewAction = UInt32
var kHIScrollViewScrollToTop: Int { get }
var kHIScrollViewScrollToBottom: Int { get }
var kHIScrollViewScrollToLeft: Int { get }
var kHIScrollViewScrollToRight: Int { get }
var kHIScrollViewPageUp: Int { get }
var kHIScrollViewPageDown: Int { get }
var kHIScrollViewPageLeft: Int { get }
var kHIScrollViewPageRight: Int { get }
var kHISearchFieldClassID: String { get }
var kControlKindHISearchField: Int { get }
var kControlSearchFieldCancelPart: Int { get }
var kControlSearchFieldMenuPart: Int { get }
var kHISearchFieldNoAttributes: Int { get }
var kHISearchFieldAttributesCancel: Int { get }
var kHISearchFieldAttributesSearchIcon: Int { get }
var kEventClassSearchField: Int { get }
var kEventSearchFieldCancelClicked: Int { get }
var kEventSearchFieldSearchClicked: Int { get }
var kHISegmentedViewClassID: String { get }
var kHISegmentedViewKind: Int { get }
var kHISegmentBehaviorMomentary: Int { get }
var kHISegmentBehaviorRadio: Int { get }
var kHISegmentBehaviorToggles: Int { get }
var kHISegmentBehaviorSticky: Int { get }
typealias HISegmentBehavior = UInt32
var kHISegmentNoAttributes: Int { get }
var kHISegmentSendCmdToUserFocus: Int { get }
var kControlSeparatorLineProc: Int { get }
var kControlKindSeparator: Int { get }
var kHIVisualSeparatorClassID: String { get }
var kControlSliderProc: Int { get }
var kControlSliderLiveFeedback: Int { get }
var kControlSliderHasTickMarks: Int { get }
var kControlSliderReverseDirection: Int { get }
var kControlSliderNonDirectional: Int { get }
typealias ControlSliderOrientation = UInt16
var kControlSliderPointsDownOrRight: Int { get }
var kControlSliderPointsUpOrLeft: Int { get }
var kControlSliderDoesNotPoint: Int { get }
var kControlKindSlider: Int { get }
var kHISliderClassID: String { get }
var kControlTabLargeProc: Int { get }
var kControlTabSmallProc: Int { get }
var kControlTabLargeNorthProc: Int { get }
var kControlTabSmallNorthProc: Int { get }
var kControlTabLargeSouthProc: Int { get }
var kControlTabSmallSouthProc: Int { get }
var kControlTabLargeEastProc: Int { get }
var kControlTabSmallEastProc: Int { get }
var kControlTabLargeWestProc: Int { get }
var kControlTabSmallWestProc: Int { get }
typealias ControlTabDirection = UInt16
var kControlTabDirectionNorth: Int { get }
var kControlTabDirectionSouth: Int { get }
var kControlTabDirectionEast: Int { get }
var kControlTabDirectionWest: Int { get }
typealias ControlTabSize = UInt16
var kControlTabSizeLarge: Int { get }
var kControlTabSizeSmall: Int { get }
var kControlTabSizeMini: Int { get }
struct ControlTabEntry {
  var icon: UnsafeMutablePointer<ControlButtonContentInfo>
  var name: Unmanaged<CFString>!
  var enabled: DarwinBoolean
  init()
  init(icon: UnsafeMutablePointer<ControlButtonContentInfo>, name: Unmanaged<CFString>!, enabled: DarwinBoolean)
}
var kControlKindTabs: Int { get }
var kHITabbedViewClassID: String { get }
var kControlTabContentRectTag: Int { get }
var kControlTabEnabledFlagTag: Int { get }
var kControlTabFontStyleTag: Int { get }
var kControlTabInfoTag: Int { get }
var kControlTabImageContentTag: Int { get }
var kControlTabInfoVersionZero: Int { get }
var kControlTabInfoVersionOne: Int { get }
struct ControlTabInfoRec {
  var version: Int16
  var iconSuiteID: Int16
  var name: Str255
  init()
  init(version: Int16, iconSuiteID: Int16, name: Str255)
}
struct ControlTabInfoRecV1 {
  var version: Int16
  var iconSuiteID: Int16
  var name: Unmanaged<CFString>!
  init()
  init(version: Int16, iconSuiteID: Int16, name: Unmanaged<CFString>!)
}
var kControlTabListResType: Int { get }
var kHITextLengthFilterClassID: String { get }
var kEventParamTextLength: Int { get }
var kControlStaticTextProc: Int { get }
var kControlKindStaticText: Int { get }
var kHIStaticTextViewClassID: String { get }
var kControlStaticTextStyleTag: Int { get }
var kControlStaticTextTextTag: Int { get }
var kControlStaticTextTextHeightTag: Int { get }
var kControlStaticTextTruncTag: Int { get }
var kControlStaticTextCFStringTag: Int { get }
var kControlStaticTextIsMultilineTag: Int { get }
var kEventClassTextField: Int { get }
var kEventParamTextSelection: Int { get }
var kEventParamCandidateText: Int { get }
var kEventParamReplacementText: Int { get }
var kEventParamUnconfirmedRange: Int { get }
var kEventParamUnconfirmedText: Int { get }
var kEventTextAccepted: Int { get }
var kEventTextShouldChangeInRange: Int { get }
var kEventTextDidChange: Int { get }
let kHITextViewClassID: CFString!
var kControlKindHITextView: Int { get }
var kControlEditUnicodeTextProc: Int { get }
var kControlEditUnicodeTextPasswordProc: Int { get }
var kControlKindEditUnicodeText: Int { get }
var kHITextFieldClassID: String { get }
var kControlEditTextStyleTag: Int { get }
var kControlEditTextTextTag: Int { get }
var kControlEditTextKeyFilterTag: Int { get }
var kControlEditTextSelectionTag: Int { get }
var kControlEditTextPasswordTag: Int { get }
var kControlEditTextCharCount: Int { get }
var kControlEditTextKeyScriptBehaviorTag: Int { get }
var kControlEditTextLockedTag: Int { get }
var kControlEditTextFixedTextTag: Int { get }
var kControlEditTextValidationProcTag: Int { get }
var kControlEditTextCFStringTag: Int { get }
var kControlEditTextPasswordCFStringTag: Int { get }
var kControlEditTextSingleLineTag: Int { get }
var kControlEditTextInsertTextBufferTag: Int { get }
var kControlEditTextInsertCFStringRefTag: Int { get }
var kControlEditUnicodeTextPostUpdateProcTag: Int { get }
var kControlEditTextSpellCheckingTag: Int { get }
var kControlEditTextSpellCheckAsYouTypeTag: Int { get }
struct ControlEditTextSelectionRec {
  var selStart: Int16
  var selEnd: Int16
  init()
  init(selStart: Int16, selEnd: Int16)
}
typealias ControlEditTextSelectionPtr = UnsafeMutablePointer<ControlEditTextSelectionRec>
typealias ControlEditTextValidationProcPtr = @convention(c) (Control!) -> Void
typealias EditUnicodePostUpdateProcPtr = @convention(c) (UniCharArrayHandle, Int, UniCharArrayOffset, UniCharArrayOffset, UnsafeMutablePointer<Void>) -> DarwinBoolean
typealias ControlEditTextValidationUPP = ControlEditTextValidationProcPtr
typealias EditUnicodePostUpdateUPP = EditUnicodePostUpdateProcPtr
func NewControlEditTextValidationUPP(userRoutine: ControlEditTextValidationProcPtr!) -> ControlEditTextValidationUPP!
func NewEditUnicodePostUpdateUPP(userRoutine: EditUnicodePostUpdateProcPtr!) -> EditUnicodePostUpdateUPP!
func DisposeControlEditTextValidationUPP(userUPP: ControlEditTextValidationUPP!)
func DisposeEditUnicodePostUpdateUPP(userUPP: EditUnicodePostUpdateUPP!)
func InvokeControlEditTextValidationUPP(control: Control!, _ userUPP: ControlEditTextValidationUPP!)
func InvokeEditUnicodePostUpdateUPP(uniText: UniCharArrayHandle, _ uniTextLength: Int, _ iStartOffset: UniCharArrayOffset, _ iEndOffset: UniCharArrayOffset, _ refcon: UnsafeMutablePointer<Void>, _ userUPP: EditUnicodePostUpdateUPP!) -> Bool
var kHIThemeOrientationNormal: Int { get }
var kHIThemeOrientationInverted: Int { get }
typealias HIThemeOrientation = UInt32
var kHIThemeSplitterAdornmentNone: Int { get }
var kHIThemeSplitterAdornmentMetal: Int { get }
typealias HIThemeSplitterAdornment = UInt32
var kHIThemeGrowBoxKindNormal: Int { get }
var kHIThemeGrowBoxKindNone: Int { get }
typealias HIThemeGrowBoxKind = UInt32
var kHIThemeGrowBoxSizeNormal: Int { get }
var kHIThemeGrowBoxSizeSmall: Int { get }
typealias HIThemeGrowBoxSize = UInt32
var kHIThemeGroupBoxKindPrimary: Int { get }
var kHIThemeGroupBoxKindSecondary: Int { get }
var kHIThemeGroupBoxKindPrimaryOpaque: Int { get }
var kHIThemeGroupBoxKindSecondaryOpaque: Int { get }
typealias HIThemeGroupBoxKind = UInt32
var kHIThemeHeaderKindWindow: Int { get }
var kHIThemeHeaderKindList: Int { get }
typealias HIThemeHeaderKind = UInt32
var kHIThemeFrameTextFieldSquare: Int { get }
var kHIThemeFrameListBox: Int { get }
var kHIThemeFrameTextFieldRound: Int { get }
var kHIThemeFrameTextFieldRoundSmall: Int { get }
var kHIThemeFrameTextFieldRoundMini: Int { get }
typealias HIThemeFrameKind = UInt32
var kHIThemeMenuTitleDrawCondensed: Int { get }
struct HIScrollBarTrackInfo {
  var version: UInt32
  var enableState: ThemeTrackEnableState
  var pressState: ThemeTrackPressState
  var viewsize: CGFloat
  init()
  init(version: UInt32, enableState: ThemeTrackEnableState, pressState: ThemeTrackPressState, viewsize: CGFloat)
}
struct HIThemeTrackDrawInfo {
  struct __Unnamed_union_trackInfo {
    var scrollbar: ScrollBarTrackInfo
    var slider: SliderTrackInfo
    var progress: ProgressTrackInfo
    init(scrollbar: ScrollBarTrackInfo)
    init(slider: SliderTrackInfo)
    init(progress: ProgressTrackInfo)
    init()
  }
  var version: UInt32
  var kind: ThemeTrackKind
  var bounds: HIRect
  var min: Int32
  var max: Int32
  var value: Int32
  var reserved: UInt32
  var attributes: ThemeTrackAttributes
  var enableState: ThemeTrackEnableState
  var filler1: UInt8
  var trackInfo: HIThemeTrackDrawInfo.__Unnamed_union_trackInfo
  init()
  init(version: UInt32, kind: ThemeTrackKind, bounds: HIRect, min: Int32, max: Int32, value: Int32, reserved: UInt32, attributes: ThemeTrackAttributes, enableState: ThemeTrackEnableState, filler1: UInt8, trackInfo: HIThemeTrackDrawInfo.__Unnamed_union_trackInfo)
}
struct HIThemeAnimationTimeInfo {
  var start: CFAbsoluteTime
  var current: CFAbsoluteTime
  init()
  init(start: CFAbsoluteTime, current: CFAbsoluteTime)
}
struct HIThemeAnimationFrameInfo {
  var index: UInt32
  init()
  init(index: UInt32)
}
struct HIThemeButtonDrawInfo {
  struct __Unnamed_union_animation {
    var time: HIThemeAnimationTimeInfo
    var frame: HIThemeAnimationFrameInfo
    init(time: HIThemeAnimationTimeInfo)
    init(frame: HIThemeAnimationFrameInfo)
    init()
  }
  var version: UInt32
  var state: ThemeDrawState
  var kind: ThemeButtonKind
  var value: ThemeButtonValue
  var adornment: ThemeButtonAdornment
  var animation: HIThemeButtonDrawInfo.__Unnamed_union_animation
  init()
  init(version: UInt32, state: ThemeDrawState, kind: ThemeButtonKind, value: ThemeButtonValue, adornment: ThemeButtonAdornment, animation: HIThemeButtonDrawInfo.__Unnamed_union_animation)
}
typealias HIThemeButtonDrawInfoPtr = UnsafeMutablePointer<HIThemeButtonDrawInfo>
struct HIThemeSplitterDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var adornment: HIThemeSplitterAdornment
  init()
  init(version: UInt32, state: ThemeDrawState, adornment: HIThemeSplitterAdornment)
}
typealias HIThemeSplitterDrawInfoPtr = UnsafeMutablePointer<HIThemeSplitterDrawInfo>
var kHIThemeTabAdornmentNone: Int { get }
var kHIThemeTabAdornmentFocus: Int { get }
var kHIThemeTabAdornmentLeadingSeparator: Int { get }
var kHIThemeTabAdornmentTrailingSeparator: Int { get }
typealias HIThemeTabAdornment = UInt32
var kHIThemeTabSizeNormal: Int { get }
var kHIThemeTabSizeSmall: Int { get }
var kHIThemeTabSizeMini: Int { get }
typealias HIThemeTabSize = UInt32
var kHIThemeTabPositionFirst: Int { get }
var kHIThemeTabPositionMiddle: Int { get }
var kHIThemeTabPositionLast: Int { get }
var kHIThemeTabPositionOnly: Int { get }
typealias HIThemeTabPosition = UInt32
var kHIThemeTabKindNormal: Int { get }
typealias HIThemeTabKind = UInt32
struct HIThemeTabDrawInfo {
  var version: UInt32
  var style: ThemeTabStyle
  var direction: ThemeTabDirection
  var size: HIThemeTabSize
  var adornment: HIThemeTabAdornment
  var kind: HIThemeTabKind
  var position: HIThemeTabPosition
  init()
  init(version: UInt32, style: ThemeTabStyle, direction: ThemeTabDirection, size: HIThemeTabSize, adornment: HIThemeTabAdornment, kind: HIThemeTabKind, position: HIThemeTabPosition)
}
struct HIThemeTabDrawInfoVersionZero {
  var version: UInt32
  var style: ThemeTabStyle
  var direction: ThemeTabDirection
  var size: HIThemeTabSize
  var adornment: HIThemeTabAdornment
  init()
  init(version: UInt32, style: ThemeTabStyle, direction: ThemeTabDirection, size: HIThemeTabSize, adornment: HIThemeTabAdornment)
}
var kHIThemeTabPaneAdornmentNormal: Int { get }
typealias HIThemeTabPaneAdornment = UInt32
struct HIThemeTabPaneDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var direction: ThemeTabDirection
  var size: HIThemeTabSize
  var kind: HIThemeTabKind
  var adornment: HIThemeTabPaneAdornment
  init()
  init(version: UInt32, state: ThemeDrawState, direction: ThemeTabDirection, size: HIThemeTabSize, kind: HIThemeTabKind, adornment: HIThemeTabPaneAdornment)
}
struct HIThemeTabPaneDrawInfoVersionZero {
  var version: UInt32
  var state: ThemeDrawState
  var direction: ThemeTabDirection
  var size: HIThemeTabSize
  init()
  init(version: UInt32, state: ThemeDrawState, direction: ThemeTabDirection, size: HIThemeTabSize)
}
var kHIThemeMenuDrawInfoVersionZero: Int { get }
var kHIThemeMenuDrawInfoVersionOne: Int { get }
struct HIThemeMenuDrawInfo {
  var version: UInt32
  var menuType: ThemeMenuType
  var reserved1: UInt
  var reserved2: CGFloat
  var menuDirection: UInt32
  var reserved3: CGFloat
  var reserved4: CGFloat
  init()
  init(version: UInt32, menuType: ThemeMenuType, reserved1: UInt, reserved2: CGFloat, menuDirection: UInt32, reserved3: CGFloat, reserved4: CGFloat)
}
typealias HIThemeMenuDrawInfoPtr = UnsafeMutablePointer<HIThemeMenuDrawInfo>
struct HIThemeMenuDrawInfoVersionZero {
  var version: UInt32
  var menuType: ThemeMenuType
  init()
  init(version: UInt32, menuType: ThemeMenuType)
}
typealias HIThemeMenuDrawInfoVersionZeroPtr = UnsafeMutablePointer<HIThemeMenuDrawInfoVersionZero>
struct HIThemeMenuItemDrawInfo {
  var version: UInt32
  var itemType: ThemeMenuItemType
  var state: ThemeMenuState
  init()
  init(version: UInt32, itemType: ThemeMenuItemType, state: ThemeMenuState)
}
typealias HIThemeMenuItemDrawInfoPtr = UnsafeMutablePointer<HIThemeMenuItemDrawInfo>
struct HIThemeFrameDrawInfo {
  var version: UInt32
  var kind: HIThemeFrameKind
  var state: ThemeDrawState
  var isFocused: DarwinBoolean
  init()
  init(version: UInt32, kind: HIThemeFrameKind, state: ThemeDrawState, isFocused: DarwinBoolean)
}
typealias HIThemeFrameDrawInfoPtr = UnsafeMutablePointer<HIThemeFrameDrawInfo>
struct HIThemeGroupBoxDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var kind: HIThemeGroupBoxKind
  init()
  init(version: UInt32, state: ThemeDrawState, kind: HIThemeGroupBoxKind)
}
typealias HIThemeGroupBoxDrawInfoPtr = UnsafeMutablePointer<HIThemeGroupBoxDrawInfo>
struct HIThemeGrabberDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  init()
  init(version: UInt32, state: ThemeDrawState)
}
typealias HIThemeGrabberDrawInfoPtr = UnsafeMutablePointer<HIThemeGrabberDrawInfo>
struct HIThemePlacardDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  init()
  init(version: UInt32, state: ThemeDrawState)
}
typealias HIThemePlacardDrawInfoPtr = UnsafeMutablePointer<HIThemePlacardDrawInfo>
struct HIThemeHeaderDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var kind: HIThemeHeaderKind
  init()
  init(version: UInt32, state: ThemeDrawState, kind: HIThemeHeaderKind)
}
typealias HIThemeHeaderDrawInfoPtr = UnsafeMutablePointer<HIThemeHeaderDrawInfo>
struct HIThemeMenuBarDrawInfo {
  var version: UInt32
  var state: ThemeMenuBarState
  var attributes: OptionBits
  init()
  init(version: UInt32, state: ThemeMenuBarState, attributes: OptionBits)
}
typealias HIThemeMenuBarDrawInfoPtr = UnsafeMutablePointer<HIThemeMenuBarDrawInfo>
struct HIThemeMenuTitleDrawInfo {
  var version: UInt32
  var state: ThemeMenuState
  var attributes: OptionBits
  var condensedTitleExtra: CGFloat
  init()
  init(version: UInt32, state: ThemeMenuState, attributes: OptionBits, condensedTitleExtra: CGFloat)
}
typealias HIThemeMenuTitleDrawInfoPtr = UnsafeMutablePointer<HIThemeMenuTitleDrawInfo>
struct HIThemeTickMarkDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  init()
  init(version: UInt32, state: ThemeDrawState)
}
typealias HIThemeTickMarkDrawInfoPtr = UnsafeMutablePointer<HIThemeTickMarkDrawInfo>
struct HIThemeWindowDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var windowType: ThemeWindowType
  var attributes: ThemeWindowAttributes
  var titleHeight: CGFloat
  var titleWidth: CGFloat
  init()
  init(version: UInt32, state: ThemeDrawState, windowType: ThemeWindowType, attributes: ThemeWindowAttributes, titleHeight: CGFloat, titleWidth: CGFloat)
}
typealias HIThemeWindowDrawInfoPtr = UnsafeMutablePointer<HIThemeWindowDrawInfo>
struct HIThemeWindowWidgetDrawInfo {
  var version: UInt32
  var widgetState: ThemeDrawState
  var widgetType: ThemeTitleBarWidget
  var windowState: ThemeDrawState
  var windowType: ThemeWindowType
  var attributes: ThemeWindowAttributes
  var titleHeight: CGFloat
  var titleWidth: CGFloat
  init()
  init(version: UInt32, widgetState: ThemeDrawState, widgetType: ThemeTitleBarWidget, windowState: ThemeDrawState, windowType: ThemeWindowType, attributes: ThemeWindowAttributes, titleHeight: CGFloat, titleWidth: CGFloat)
}
typealias HIThemeWindowWidgetDrawInfoPtr = UnsafeMutablePointer<HIThemeWindowWidgetDrawInfo>
struct HIThemeSeparatorDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  init()
  init(version: UInt32, state: ThemeDrawState)
}
typealias HIThemeSeparatorDrawInfoPtr = UnsafeMutablePointer<HIThemeSeparatorDrawInfo>
struct HIThemeScrollBarDelimitersDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var windowType: ThemeWindowType
  var attributes: ThemeWindowAttributes
  init()
  init(version: UInt32, state: ThemeDrawState, windowType: ThemeWindowType, attributes: ThemeWindowAttributes)
}
typealias HIThemeScrollBarDelimitersDrawInfoPtr = UnsafeMutablePointer<HIThemeScrollBarDelimitersDrawInfo>
struct HIThemeChasingArrowsDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var index: UInt32
  init()
  init(version: UInt32, state: ThemeDrawState, index: UInt32)
}
typealias HIThemeChasingArrowsDrawInfoPtr = UnsafeMutablePointer<HIThemeChasingArrowsDrawInfo>
struct HIThemePopupArrowDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var orientation: ThemeArrowOrientation
  var size: ThemePopupArrowSize
  init()
  init(version: UInt32, state: ThemeDrawState, orientation: ThemeArrowOrientation, size: ThemePopupArrowSize)
}
typealias HIThemePopupArrowDrawInfoPtr = UnsafeMutablePointer<HIThemePopupArrowDrawInfo>
struct HIThemeGrowBoxDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var kind: HIThemeGrowBoxKind
  var direction: ThemeGrowDirection
  var size: HIThemeGrowBoxSize
  init()
  init(version: UInt32, state: ThemeDrawState, kind: HIThemeGrowBoxKind, direction: ThemeGrowDirection, size: HIThemeGrowBoxSize)
}
typealias HIThemeGrowBoxDrawInfoPtr = UnsafeMutablePointer<HIThemeGrowBoxDrawInfo>
struct HIThemeBackgroundDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var kind: ThemeBackgroundKind
  init()
  init(version: UInt32, state: ThemeDrawState, kind: ThemeBackgroundKind)
}
typealias HIThemeBackgroundDrawInfoPtr = UnsafeMutablePointer<HIThemeBackgroundDrawInfo>
func HIThemeDrawButton(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeButtonDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation, _ outLabelRect: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeGetButtonShape(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeButtonDrawInfo>, _ outShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
func HIThemeGetButtonContentBounds(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeButtonDrawInfo>, _ outBounds: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeGetButtonBackgroundBounds(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeButtonDrawInfo>, _ outBounds: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeDrawChasingArrows(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeChasingArrowsDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawPopupArrow(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemePopupArrowDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawMenuBarBackground(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeMenuBarDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawMenuTitle(inMenuBarRect: UnsafePointer<HIRect>, _ inTitleRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeMenuTitleDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation, _ outLabelRect: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeDrawMenuBackground(inMenuRect: UnsafePointer<HIRect>, _ inMenuDrawInfo: UnsafePointer<HIThemeMenuDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawMenuItem(inMenuRect: UnsafePointer<HIRect>, _ inItemRect: UnsafePointer<HIRect>, _ inItemDrawInfo: UnsafePointer<HIThemeMenuItemDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation, _ outContentRect: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeDrawMenuSeparator(inMenuRect: UnsafePointer<HIRect>, _ inItemRect: UnsafePointer<HIRect>, _ inItemDrawInfo: UnsafePointer<HIThemeMenuItemDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeGetMenuBackgroundShape(inMenuRect: UnsafePointer<HIRect>, _ inMenuDrawInfo: UnsafePointer<HIThemeMenuDrawInfo>, _ outShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
var kHIThemeSegmentPositionFirst: Int { get }
var kHIThemeSegmentPositionMiddle: Int { get }
var kHIThemeSegmentPositionLast: Int { get }
var kHIThemeSegmentPositionOnly: Int { get }
typealias HIThemeSegmentPosition = UInt32
var kHIThemeSegmentKindNormal: Int { get }
var kHIThemeSegmentKindTextured: Int { get }
var kHIThemeSegmentKindInset: Int { get }
typealias HIThemeSegmentKind = UInt32
var kHIThemeSegmentSizeNormal: Int { get }
var kHIThemeSegmentSizeSmall: Int { get }
var kHIThemeSegmentSizeMini: Int { get }
typealias HIThemeSegmentSize = UInt32
var kHIThemeSegmentAdornmentNone: Int { get }
var kHIThemeSegmentAdornmentFocus: Int { get }
var kHIThemeSegmentAdornmentLeadingSeparator: Int { get }
var kHIThemeSegmentAdornmentTrailingSeparator: Int { get }
typealias HIThemeSegmentAdornment = UInt32
struct HIThemeSegmentDrawInfo {
  var version: UInt32
  var state: ThemeDrawState
  var value: ThemeButtonValue
  var size: HIThemeSegmentSize
  var kind: HIThemeSegmentKind
  var position: HIThemeSegmentPosition
  var adornment: HIThemeSegmentAdornment
  init()
  init(version: UInt32, state: ThemeDrawState, value: ThemeButtonValue, size: HIThemeSegmentSize, kind: HIThemeSegmentKind, position: HIThemeSegmentPosition, adornment: HIThemeSegmentAdornment)
}
typealias HIThemeSegmentDrawInfoPtr = UnsafeMutablePointer<HIThemeSegmentDrawInfo>
func HIThemeDrawSegment(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeSegmentDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawTabPane(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeTabPaneDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawTab(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeTabDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation, _ outLabelRect: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeGetTabPaneDrawShape(inRect: UnsafePointer<HIRect>, _ inDirection: ThemeTabDirection, _ inTabSize: HIThemeTabSize, _ outShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
func HIThemeGetTabPaneContentShape(inRect: UnsafePointer<HIRect>, _ inDirection: ThemeTabDirection, _ inTabSize: HIThemeTabSize, _ outShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
func HIThemeGetTabDrawShape(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeTabDrawInfo>, _ outShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
func HIThemeGetTabShape(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeTabDrawInfo>, _ outShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
var kHIThemeTextTruncationNone: Int { get }
var kHIThemeTextTruncationMiddle: Int { get }
var kHIThemeTextTruncationEnd: Int { get }
var kHIThemeTextTruncationDefault: Int { get }
typealias HIThemeTextTruncation = UInt32
var kHIThemeTextHorizontalFlushLeft: Int { get }
var kHIThemeTextHorizontalFlushCenter: Int { get }
var kHIThemeTextHorizontalFlushRight: Int { get }
var kHIThemeTextHorizontalFlushDefault: Int { get }
typealias HIThemeTextHorizontalFlush = UInt32
var kHIThemeTextVerticalFlushTop: Int { get }
var kHIThemeTextVerticalFlushCenter: Int { get }
var kHIThemeTextVerticalFlushBottom: Int { get }
var kHIThemeTextVerticalFlushDefault: Int { get }
typealias HIThemeTextVerticalFlush = UInt32
var kHIThemeTextBoxOptionNone: Int { get }
var kHIThemeTextBoxOptionStronglyVertical: Int { get }
var kHIThemeTextBoxOptionEngraved: Int { get }
var kHIThemeTextBoxOptionDontClip: Int { get }
typealias HIThemeTextBoxOptions = OptionBits
var kHIThemeTextInfoVersionZero: Int { get }
var kHIThemeTextInfoVersionOne: Int { get }
struct HIThemeTextInfo {
  var version: UInt32
  var state: ThemeDrawState
  var fontID: ThemeFontID
  var horizontalFlushness: HIThemeTextHorizontalFlush
  var verticalFlushness: HIThemeTextVerticalFlush
  var options: HIThemeTextBoxOptions
  var truncationPosition: HIThemeTextTruncation
  var truncationMaxLines: UInt32
  var truncationHappened: DarwinBoolean
  var filler1: UInt8
  var font: Unmanaged<CTFont>!
  init()
  init(version: UInt32, state: ThemeDrawState, fontID: ThemeFontID, horizontalFlushness: HIThemeTextHorizontalFlush, verticalFlushness: HIThemeTextVerticalFlush, options: HIThemeTextBoxOptions, truncationPosition: HIThemeTextTruncation, truncationMaxLines: UInt32, truncationHappened: DarwinBoolean, filler1: UInt8, font: Unmanaged<CTFont>!)
}
func HIThemeGetTextDimensions(inString: AnyObject!, _ inWidth: CGFloat, _ inTextInfo: UnsafeMutablePointer<HIThemeTextInfo>, _ outWidth: UnsafeMutablePointer<CGFloat>, _ outHeight: UnsafeMutablePointer<CGFloat>, _ outBaseline: UnsafeMutablePointer<CGFloat>) -> OSStatus
func HIThemeDrawTextBox(inString: AnyObject!, _ inBounds: UnsafePointer<HIRect>, _ inTextInfo: UnsafeMutablePointer<HIThemeTextInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeGetUIFontType(inFontID: ThemeFontID) -> CTFontUIFontType
func HIThemeDrawTrack(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ inGhostRect: UnsafePointer<HIRect>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawTrackTickMarks(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ inNumTicks: Int, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawTickMark(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeTickMarkDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeGetTrackThumbShape(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ outThumbShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
func HIThemeHitTestTrack(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ inMousePoint: UnsafePointer<HIPoint>, _ outPartHit: UnsafeMutablePointer<ControlPartCode>) -> Bool
func HIThemeGetTrackBounds(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ outBounds: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeGetTrackPartBounds(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ inPartCode: ControlPartCode, _ outPartBounds: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeGetTrackParts(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ outNumberOfParts: UnsafeMutablePointer<UInt32>, _ inMaxParts: UInt32, _ ioPartsBuffer: UnsafeMutablePointer<ControlPartCode>) -> OSStatus
func HIThemeGetTrackDragRect(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ outDragRect: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeGetTrackThumbPositionFromOffset(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ inThumbOffset: UnsafePointer<HIPoint>, _ outRelativePosition: UnsafeMutablePointer<CGFloat>) -> OSStatus
func HIThemeGetTrackThumbPositionFromBounds(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ inThumbBounds: UnsafePointer<HIRect>, _ outRelativePosition: UnsafeMutablePointer<CGFloat>) -> OSStatus
func HIThemeGetTrackLiveValue(inDrawInfo: UnsafePointer<HIThemeTrackDrawInfo>, _ inRelativePosition: CGFloat, _ outValue: UnsafeMutablePointer<Int32>) -> OSStatus
func HIThemeGetScrollBarTrackRect(inBounds: UnsafePointer<HIRect>, _ inTrackInfo: UnsafePointer<HIScrollBarTrackInfo>, _ inIsHoriz: Bool, _ outTrackBounds: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeHitTestScrollBarArrows(inScrollBarBounds: UnsafePointer<HIRect>, _ inTrackInfo: UnsafePointer<HIScrollBarTrackInfo>, _ inIsHoriz: Bool, _ inPtHit: UnsafePointer<HIPoint>, _ outTrackBounds: UnsafeMutablePointer<HIRect>, _ outPartCode: UnsafeMutablePointer<ControlPartCode>) -> Bool
func HIThemeDrawScrollBarDelimiters(inContRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeScrollBarDelimitersDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawWindowFrame(inContRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeWindowDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation, _ outTitleRect: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeDrawTitleBarWidget(inContRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeWindowWidgetDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawGrowBox(inOrigin: UnsafePointer<HIPoint>, _ inDrawInfo: UnsafePointer<HIThemeGrowBoxDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeGetGrowBoxBounds(inOrigin: UnsafePointer<HIPoint>, _ inDrawInfo: UnsafePointer<HIThemeGrowBoxDrawInfo>, _ outBounds: UnsafeMutablePointer<HIRect>) -> OSStatus
func HIThemeGetWindowShape(inContRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeWindowDrawInfo>, _ inWinRegion: WindowRegionCode, _ outShape: UnsafeMutablePointer<Unmanaged<HIShape>?>) -> OSStatus
func HIThemeGetWindowRegionHit(inContRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeWindowDrawInfo>, _ inPoint: UnsafePointer<HIPoint>, _ outRegionHit: UnsafeMutablePointer<WindowRegionCode>) -> Bool
func HIThemeDrawFrame(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeFrameDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawGroupBox(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeGroupBoxDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawGenericWell(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeButtonDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawPaneSplitter(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeSplitterDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawGrabber(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeGrabberDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawPlacard(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemePlacardDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawHeader(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeHeaderDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawFocusRect(inRect: UnsafePointer<HIRect>, _ inHasFocus: Bool, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
var kHIThemeFocusRingOnly: Int { get }
var kHIThemeFocusRingAbove: Int { get }
var kHIThemeFocusRingBelow: Int { get }
typealias HIThemeFocusRing = UInt32
func HIThemeBeginFocus(inContext: CGContext!, _ inRing: HIThemeFocusRing, _ inReserved: UnsafeMutablePointer<Void>) -> OSStatus
func HIThemeEndFocus(inContext: CGContext!) -> OSStatus
func HIThemeDrawSeparator(inRect: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeSeparatorDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeSetFill(inBrush: ThemeBrush, _ inInfo: UnsafeMutablePointer<Void>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeSetStroke(inBrush: ThemeBrush, _ inInfo: UnsafeMutablePointer<Void>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeSetTextFill(inColor: ThemeTextColor, _ inInfo: UnsafeMutablePointer<Void>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeApplyBackground(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeBackgroundDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeDrawBackground(inBounds: UnsafePointer<HIRect>, _ inDrawInfo: UnsafePointer<HIThemeBackgroundDrawInfo>, _ inContext: CGContext!, _ inOrientation: HIThemeOrientation) -> OSStatus
func HIThemeBrushCreateCGColor(inBrush: ThemeBrush, _ outColor: UnsafeMutablePointer<Unmanaged<CGColor>?>) -> OSStatus
func HIThemeGetTextColorForThemeBrush(inBrush: ThemeBrush, _ inWindowIsActive: Bool, _ outColor: UnsafeMutablePointer<ThemeTextColor>) -> OSStatus
func GetThemeMenuSeparatorHeight(outHeight: UnsafeMutablePointer<Int16>) -> OSStatus
func GetThemeMenuItemExtra(inItemType: ThemeMenuItemType, _ outHeight: UnsafeMutablePointer<Int16>, _ outWidth: UnsafeMutablePointer<Int16>) -> OSStatus
func GetThemeMenuTitleExtra(outWidth: UnsafeMutablePointer<Int16>, _ inIsSquished: Bool) -> OSStatus
var kThemeMetricScrollBarWidth: Int { get }
var kThemeMetricSmallScrollBarWidth: Int { get }
var kThemeMetricCheckBoxHeight: Int { get }
var kThemeMetricRadioButtonHeight: Int { get }
var kThemeMetricEditTextWhitespace: Int { get }
var kThemeMetricEditTextFrameOutset: Int { get }
var kThemeMetricListBoxFrameOutset: Int { get }
var kThemeMetricFocusRectOutset: Int { get }
var kThemeMetricImageWellThickness: Int { get }
var kThemeMetricScrollBarOverlap: Int { get }
var kThemeMetricLargeTabHeight: Int { get }
var kThemeMetricLargeTabCapsWidth: Int { get }
var kThemeMetricTabFrameOverlap: Int { get }
var kThemeMetricTabIndentOrStyle: Int { get }
var kThemeMetricTabOverlap: Int { get }
var kThemeMetricSmallTabHeight: Int { get }
var kThemeMetricSmallTabCapsWidth: Int { get }
var kThemeMetricPushButtonHeight: Int { get }
var kThemeMetricListHeaderHeight: Int { get }
var kThemeMetricDisclosureTriangleHeight: Int { get }
var kThemeMetricDisclosureTriangleWidth: Int { get }
var kThemeMetricLittleArrowsHeight: Int { get }
var kThemeMetricLittleArrowsWidth: Int { get }
var kThemeMetricPopupButtonHeight: Int { get }
var kThemeMetricSmallPopupButtonHeight: Int { get }
var kThemeMetricLargeProgressBarThickness: Int { get }
var kThemeMetricPullDownHeight: Int { get }
var kThemeMetricSmallPullDownHeight: Int { get }
var kThemeMetricResizeControlHeight: Int { get }
var kThemeMetricSmallResizeControlHeight: Int { get }
var kThemeMetricHSliderHeight: Int { get }
var kThemeMetricHSliderTickHeight: Int { get }
var kThemeMetricVSliderWidth: Int { get }
var kThemeMetricVSliderTickWidth: Int { get }
var kThemeMetricTitleBarControlsHeight: Int { get }
var kThemeMetricCheckBoxWidth: Int { get }
var kThemeMetricRadioButtonWidth: Int { get }
var kThemeMetricNormalProgressBarThickness: Int { get }
var kThemeMetricProgressBarShadowOutset: Int { get }
var kThemeMetricSmallProgressBarShadowOutset: Int { get }
var kThemeMetricPrimaryGroupBoxContentInset: Int { get }
var kThemeMetricSecondaryGroupBoxContentInset: Int { get }
var kThemeMetricMenuMarkColumnWidth: Int { get }
var kThemeMetricMenuExcludedMarkColumnWidth: Int { get }
var kThemeMetricMenuMarkIndent: Int { get }
var kThemeMetricMenuTextLeadingEdgeMargin: Int { get }
var kThemeMetricMenuTextTrailingEdgeMargin: Int { get }
var kThemeMetricMenuIndentWidth: Int { get }
var kThemeMetricMenuIconTrailingEdgeMargin: Int { get }
var kThemeMetricDisclosureButtonHeight: Int { get }
var kThemeMetricRoundButtonSize: Int { get }
var kThemeMetricSmallCheckBoxHeight: Int { get }
var kThemeMetricDisclosureButtonWidth: Int { get }
var kThemeMetricSmallDisclosureButtonHeight: Int { get }
var kThemeMetricSmallDisclosureButtonWidth: Int { get }
var kThemeMetricPaneSplitterHeight: Int { get }
var kThemeMetricSmallPushButtonHeight: Int { get }
var kThemeMetricSmallRadioButtonHeight: Int { get }
var kThemeMetricRelevanceIndicatorHeight: Int { get }
var kThemeMetricLargeRoundButtonSize: Int { get }
var kThemeMetricSmallHSliderHeight: Int { get }
var kThemeMetricSmallHSliderTickHeight: Int { get }
var kThemeMetricSmallVSliderWidth: Int { get }
var kThemeMetricSmallVSliderTickWidth: Int { get }
var kThemeMetricSmallCheckBoxWidth: Int { get }
var kThemeMetricSmallRadioButtonWidth: Int { get }
var kThemeMetricSmallHSliderMinThumbWidth: Int { get }
var kThemeMetricSmallVSliderMinThumbHeight: Int { get }
var kThemeMetricSmallHSliderTickOffset: Int { get }
var kThemeMetricSmallVSliderTickOffset: Int { get }
var kThemeMetricComboBoxLargeBottomShadowOffset: Int { get }
var kThemeMetricComboBoxLargeRightShadowOffset: Int { get }
var kThemeMetricComboBoxSmallBottomShadowOffset: Int { get }
var kThemeMetricComboBoxSmallRightShadowOffset: Int { get }
var kThemeMetricComboBoxLargeDisclosureWidth: Int { get }
var kThemeMetricComboBoxSmallDisclosureWidth: Int { get }
var kThemeMetricRoundTextFieldContentInsetLeft: Int { get }
var kThemeMetricRoundTextFieldContentInsetRight: Int { get }
var kThemeMetricRoundTextFieldContentInsetBottom: Int { get }
var kThemeMetricRoundTextFieldContentInsetTop: Int { get }
var kThemeMetricRoundTextFieldContentHeight: Int { get }
var kThemeMetricComboBoxMiniBottomShadowOffset: Int { get }
var kThemeMetricComboBoxMiniDisclosureWidth: Int { get }
var kThemeMetricComboBoxMiniRightShadowOffset: Int { get }
var kThemeMetricLittleArrowsMiniHeight: Int { get }
var kThemeMetricLittleArrowsMiniWidth: Int { get }
var kThemeMetricLittleArrowsSmallHeight: Int { get }
var kThemeMetricLittleArrowsSmallWidth: Int { get }
var kThemeMetricMiniCheckBoxHeight: Int { get }
var kThemeMetricMiniCheckBoxWidth: Int { get }
var kThemeMetricMiniDisclosureButtonHeight: Int { get }
var kThemeMetricMiniDisclosureButtonWidth: Int { get }
var kThemeMetricMiniHSliderHeight: Int { get }
var kThemeMetricMiniHSliderMinThumbWidth: Int { get }
var kThemeMetricMiniHSliderTickHeight: Int { get }
var kThemeMetricMiniHSliderTickOffset: Int { get }
var kThemeMetricMiniPopupButtonHeight: Int { get }
var kThemeMetricMiniPullDownHeight: Int { get }
var kThemeMetricMiniPushButtonHeight: Int { get }
var kThemeMetricMiniRadioButtonHeight: Int { get }
var kThemeMetricMiniRadioButtonWidth: Int { get }
var kThemeMetricMiniTabCapsWidth: Int { get }
var kThemeMetricMiniTabFrameOverlap: Int { get }
var kThemeMetricMiniTabHeight: Int { get }
var kThemeMetricMiniTabOverlap: Int { get }
var kThemeMetricMiniVSliderMinThumbHeight: Int { get }
var kThemeMetricMiniVSliderTickOffset: Int { get }
var kThemeMetricMiniVSliderTickWidth: Int { get }
var kThemeMetricMiniVSliderWidth: Int { get }
var kThemeMetricRoundTextFieldContentInsetWithIconLeft: Int { get }
var kThemeMetricRoundTextFieldContentInsetWithIconRight: Int { get }
var kThemeMetricRoundTextFieldMiniContentHeight: Int { get }
var kThemeMetricRoundTextFieldMiniContentInsetBottom: Int { get }
var kThemeMetricRoundTextFieldMiniContentInsetLeft: Int { get }
var kThemeMetricRoundTextFieldMiniContentInsetRight: Int { get }
var kThemeMetricRoundTextFieldMiniContentInsetTop: Int { get }
var kThemeMetricRoundTextFieldMiniContentInsetWithIconLeft: Int { get }
var kThemeMetricRoundTextFieldMiniContentInsetWithIconRight: Int { get }
var kThemeMetricRoundTextFieldSmallContentHeight: Int { get }
var kThemeMetricRoundTextFieldSmallContentInsetBottom: Int { get }
var kThemeMetricRoundTextFieldSmallContentInsetLeft: Int { get }
var kThemeMetricRoundTextFieldSmallContentInsetRight: Int { get }
var kThemeMetricRoundTextFieldSmallContentInsetTop: Int { get }
var kThemeMetricRoundTextFieldSmallContentInsetWithIconLeft: Int { get }
var kThemeMetricRoundTextFieldSmallContentInsetWithIconRight: Int { get }
var kThemeMetricSmallTabFrameOverlap: Int { get }
var kThemeMetricSmallTabOverlap: Int { get }
var kThemeMetricSmallPaneSplitterHeight: Int { get }
var kThemeMetricHSliderTickOffset: Int { get }
var kThemeMetricVSliderTickOffset: Int { get }
var kThemeMetricSliderMinThumbHeight: Int { get }
var kThemeMetricSliderMinThumbWidth: Int { get }
var kThemeMetricScrollBarMinThumbHeight: Int { get }
var kThemeMetricScrollBarMinThumbWidth: Int { get }
var kThemeMetricSmallScrollBarMinThumbHeight: Int { get }
var kThemeMetricSmallScrollBarMinThumbWidth: Int { get }
var kThemeMetricButtonRoundedHeight: Int { get }
var kThemeMetricButtonRoundedRecessedHeight: Int { get }
var kThemeMetricSeparatorSize: Int { get }
var kThemeMetricTexturedPushButtonHeight: Int { get }
var kThemeMetricTexturedSmallPushButtonHeight: Int { get }
typealias ThemeMetric = UInt32
func GetThemeMetric(inMetric: ThemeMetric, _ outMetric: UnsafeMutablePointer<Int32>) -> OSStatus
func CopyThemeIdentifier(outIdentifier: UnsafeMutablePointer<Unmanaged<CFString>?>) -> OSStatus
var kThemeMetricCheckBoxGlyphHeight: Int { get }
var kThemeMetricRadioButtonGlyphHeight: Int { get }
var kThemeMetricDisclosureButtonSize: Int { get }
var kThemeMetricBestListHeaderHeight: Int { get }
var kThemeMetricSmallProgressBarThickness: Int { get }
var kThemeMetricProgressBarThickness: Int { get }
typealias HIToolbar = HIObjectRef
typealias HIToolbarRef = HIToolbar
typealias HIToolbarItem = HIObjectRef
typealias HIToolbarItemRef = HIToolbarItem
var kHIToolbarIdentifierKey: String { get }
var kHIToolbarDataKey: String { get }
var kHIToolbarSeparatorIdentifier: String { get }
var kHIToolbarSpaceIdentifier: String { get }
var kHIToolbarFlexibleSpaceIdentifier: String { get }
var kHIToolbarCustomizeIdentifier: String { get }
var kHIToolbarPrintItemIdentifier: String { get }
var kHIToolbarFontsItemIdentifier: String { get }
var kHIToolbarDisplayModeDefault: Int { get }
var kHIToolbarDisplayModeIconAndLabel: Int { get }
var kHIToolbarDisplayModeIconOnly: Int { get }
var kHIToolbarDisplayModeLabelOnly: Int { get }
typealias HIToolbarDisplayMode = UInt32
var kHIToolbarDisplaySizeDefault: Int { get }
var kHIToolbarDisplaySizeNormal: Int { get }
var kHIToolbarDisplaySizeSmall: Int { get }
typealias HIToolbarDisplaySize = UInt32
var kHIToolbarNoAttributes: Int { get }
var kHIToolbarAutoSavesConfig: Int { get }
var kHIToolbarIsConfigurable: Int { get }
var kHIToolbarValidAttrs: Int { get }
var kHICommandCustomizeToolbar: Int { get }
var kHICommandShowToolbar: Int { get }
var kHICommandHideToolbar: Int { get }
var kHICommandToggleToolbar: Int { get }
var kHICommandToggleAllToolbars: Int { get }
var kHICommandCycleToolbarModeSmaller: Int { get }
var kHICommandCycleToolbarModeLarger: Int { get }
var kHIToolbarCommandPressAction: Int { get }
var kEventParamToolbar: Int { get }
var kEventParamToolbarItem: Int { get }
var kEventParamToolbarItemIdentifier: Int { get }
var kEventParamToolbarItemConfigData: Int { get }
var typeHIToolbarRef: Int { get }
var typeHIToolbarItemRef: Int { get }
var kEventToolbarGetDefaultIdentifiers: Int { get }
var kEventToolbarGetAllowedIdentifiers: Int { get }
var kEventToolbarGetSelectableIdentifiers: Int { get }
var kEventToolbarCreateItemWithIdentifier: Int { get }
var kEventToolbarCreateItemFromDrag: Int { get }
var kEventToolbarItemAdded: Int { get }
var kEventToolbarItemRemoved: Int { get }
var kEventToolbarDisplayModeChanged: Int { get }
var kEventToolbarDisplaySizeChanged: Int { get }
var kEventToolbarLayoutChanged: Int { get }
var kEventToolbarBeginMultiChange: Int { get }
var kEventToolbarEndMultiChange: Int { get }
var kEventToolbarItemImageChanged: Int { get }
var kEventToolbarItemLabelChanged: Int { get }
var kEventToolbarItemHelpTextChanged: Int { get }
var kEventToolbarItemCommandIDChanged: Int { get }
var kEventToolbarItemGetPersistentData: Int { get }
var kEventToolbarItemCreateCustomView: Int { get }
var kEventToolbarItemEnabledStateChanged: Int { get }
var kEventToolbarItemSelectedStateChanged: Int { get }
var kEventToolbarItemPerformAction: Int { get }
var kEventToolbarItemWouldAcceptDrop: Int { get }
var kEventToolbarItemAcceptDrop: Int { get }
var kEventParamToolbarDisplayMode: Int { get }
var kEventParamToolbarDisplaySize: Int { get }
var typeHIToolbarDisplayMode: Int { get }
var typeHIToolbarDisplaySize: Int { get }
var kEventToolbarItemViewConfigForMode: Int { get }
var kEventToolbarItemViewConfigForSize: Int { get }
var kEventToolbarItemViewEnterConfigMode: Int { get }
var kEventToolbarItemViewExitConfigMode: Int { get }
var kHIToolbarItemNoAttributes: Int { get }
var kHIToolbarItemAllowDuplicates: Int { get }
var kHIToolbarItemCantBeRemoved: Int { get }
var kHIToolbarItemAnchoredLeft: Int { get }
var kHIToolbarItemIsSeparator: Int { get }
var kHIToolbarItemSendCmdToUserFocus: Int { get }
var kHIToolbarItemLabelDisabled: Int { get }
var kHIToolbarItemDisabled: Int { get }
var kHIToolbarItemSelected: Int { get }
var kHIToolbarItemValidAttrs: Int { get }
var kHIToolbarItemMutableAttrs: Int { get }
var kHIToolbarItemClassID: String { get }
func DebugPrintMainEventQueue()
func DebugPrintEvent(inEvent: EventRef)
typealias HIViewID = ControlID
var kHIViewZOrderAbove: Int { get }
var kHIViewZOrderBelow: Int { get }
typealias HIViewZOrderOp = UInt32
struct HIViewFrameMetrics {
  var top: CGFloat
  var left: CGFloat
  var bottom: CGFloat
  var right: CGFloat
  init()
  init(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat)
}
var kHIViewAttributeSendCommandToUserFocus: Int { get }
var kHIViewAttributeIsFieldEditor: Int { get }
var kHIViewSendCommandToUserFocus: Int { get }
var kHIViewFeatureSupportsGhosting: Int { get }
var kHIViewFeatureAllowsSubviews: Int { get }
var kHIViewFeatureGetsFocusOnClick: Int { get }
var kHIViewFeatureSupportsLiveFeedback: Int { get }
var kHIViewFeatureSupportsRadioBehavior: Int { get }
var kHIViewFeatureAutoToggles: Int { get }
var kHIViewFeatureIdlesWithTimer: Int { get }
var kHIViewFeatureInvertsUpDownValueMeaning: Int { get }
var kHIViewFeatureIsOpaque: Int { get }
var kHIViewFeatureDoesNotDraw: Int { get }
var kHIViewFeatureDoesNotUseSpecialParts: Int { get }
var kHIViewFeatureIgnoresClicks: Int { get }
var kHIViewValidFeaturesForPanther: Int { get }
var kHIViewSupportsGhosting: Int { get }
var kHIViewAllowsSubviews: Int { get }
var kHIViewGetsFocusOnClick: Int { get }
var kHIViewSupportsLiveFeedback: Int { get }
var kHIViewSupportsRadioBehavior: Int { get }
var kHIViewAutoToggles: Int { get }
var kHIViewIdlesWithTimer: Int { get }
var kHIViewInvertsUpDownValueMeaning: Int { get }
var kHIViewIsOpaque: Int { get }
var kHIViewDoesNotDraw: Int { get }
var kHIViewDoesNotUseSpecialParts: Int { get }
var kHIViewIgnoresClicks: Int { get }
typealias HIViewFeatures = UInt64
typealias HIViewPartCode = ControlPartCode
var kHIViewNoPart: Int { get }
var kHIViewIndicatorPart: Int { get }
var kHIViewDisabledPart: Int { get }
var kHIViewInactivePart: Int { get }
var kHIViewEntireView: Int { get }
var kHIViewStructureMetaPart: Int { get }
var kHIViewContentMetaPart: Int { get }
var kHIViewOpaqueMetaPart: Int { get }
var kHIViewClickableMetaPart: Int { get }
var kHIViewFocusNoPart: Int { get }
var kHIViewFocusNextPart: Int { get }
var kHIViewFocusPrevPart: Int { get }
typealias HIViewImageContentType = ControlContentType
typealias HIViewImageContentInfo = ControlImageContentInfo
typealias HIViewContentType = Int16
var kHIViewContentTextOnly: Int { get }
var kHIViewContentNone: Int { get }
var kHIViewContentIconSuiteRef: Int { get }
var kHIViewContentIconRef: Int { get }
var kHIViewContentCGImageRef: Int { get }
var kHIViewContentImageResource: Int { get }
var kHIViewContentImageFile: Int { get }
var kHIViewContentIconTypeAndCreator: Int { get }
var kHIViewContentAlertIconType: Int { get }
var kHIViewContentNSImage: Int { get }
struct HITypeAndCreator {
  var type: OSType
  var creator: OSType
  init()
  init(type: OSType, creator: OSType)
}
struct HIViewContentInfo {
  struct __Unnamed_union_u {
    var iconRef: IconRef
    var iconTypeAndCreator: HITypeAndCreator
    var imageRef: Unmanaged<CGImage>!
    var imageResource: Unmanaged<CFString>!
    var imageFile: Unmanaged<CFURL>!
    init(iconRef: IconRef)
    init(iconTypeAndCreator: HITypeAndCreator)
    init(imageRef: Unmanaged<CGImage>!)
    init(imageResource: Unmanaged<CFString>!)
    init(imageFile: Unmanaged<CFURL>!)
    init()
  }
  var contentType: HIViewContentType
  var u: HIViewContentInfo.__Unnamed_union_u
  init()
  init(contentType: HIViewContentType, u: HIViewContentInfo.__Unnamed_union_u)
}
typealias HIViewContentInfoPtr = UnsafeMutablePointer<HIViewContentInfo>
var errNeedsCompositedWindow: Int { get }
var kHIViewClassID: String { get }
struct HIViewKind {
  var signature: OSType
  var kind: OSType
  init()
  init(signature: OSType, kind: OSType)
}
var kHIViewKindSignatureApple: Int { get }
typealias HIViewTrackingAreaRef = COpaquePointer
var kEventParamHIViewTrackingArea: Int { get }
var typeHIViewTrackingAreaRef: Int { get }
var kEventControlTrackingAreaEntered: Int { get }
var kEventControlTrackingAreaExited: Int { get }
typealias HIViewTrackingAreaID = UInt64
var kHIViewFocusOnAnyControl: Int { get }
var kHIViewFocusTraditionally: Int { get }
var kHIViewFocusWithoutWrapping: Int { get }
var kHILayoutBindNone: Int { get }
var kHILayoutBindMin: Int { get }
var kHILayoutBindMax: Int { get }
var kHILayoutBindLeft: Int { get }
var kHILayoutBindRight: Int { get }
var kHILayoutBindTop: Int { get }
var kHILayoutBindBottom: Int { get }
typealias HIBindingKind = UInt16
struct HISideBinding {
  var toView: Unmanaged<HIView>!
  var kind: HIBindingKind
  var offset: CGFloat
  init()
  init(toView: Unmanaged<HIView>!, kind: HIBindingKind, offset: CGFloat)
}
struct HIBinding {
  var top: HISideBinding
  var left: HISideBinding
  var bottom: HISideBinding
  var right: HISideBinding
  init()
  init(top: HISideBinding, left: HISideBinding, bottom: HISideBinding, right: HISideBinding)
}
var kHILayoutScaleAbsolute: Int { get }
typealias HIScaleKind = UInt16
struct HIAxisScale {
  var toView: Unmanaged<HIView>!
  var kind: HIScaleKind
  var ratio: CGFloat
  init()
  init(toView: Unmanaged<HIView>!, kind: HIScaleKind, ratio: CGFloat)
}
struct HIScaling {
  var x: HIAxisScale
  var y: HIAxisScale
  init()
  init(x: HIAxisScale, y: HIAxisScale)
}
var kHILayoutPositionNone: Int { get }
var kHILayoutPositionCenter: Int { get }
var kHILayoutPositionMin: Int { get }
var kHILayoutPositionMax: Int { get }
var kHILayoutPositionLeft: Int { get }
var kHILayoutPositionRight: Int { get }
var kHILayoutPositionTop: Int { get }
var kHILayoutPositionBottom: Int { get }
typealias HIPositionKind = UInt16
struct HIAxisPosition {
  var toView: Unmanaged<HIView>!
  var kind: HIPositionKind
  var offset: CGFloat
  init()
  init(toView: Unmanaged<HIView>!, kind: HIPositionKind, offset: CGFloat)
}
struct HIPositioning {
  var x: HIAxisPosition
  var y: HIAxisPosition
  init()
  init(x: HIAxisPosition, y: HIAxisPosition)
}
struct HILayoutInfo {
  var version: UInt32
  var binding: HIBinding
  var scale: HIScaling
  var position: HIPositioning
  init()
  init(version: UInt32, binding: HIBinding, scale: HIScaling, position: HIPositioning)
}
var kHILayoutInfoVersionZero: Int { get }
var kHIViewOffscreenImageUseWindowBackingResolution: Int { get }
var kHITransformNone: Int { get }
var kHITransformDisabled: Int { get }
var kHITransformSelected: Int { get }
let kHIViewWindowContentID: HIViewID
let kHIViewWindowCloseBoxID: HIViewID
let kHIViewWindowCollapseBoxID: HIViewID
let kHIViewWindowZoomBoxID: HIViewID
let kHIViewWindowToolbarButtonID: HIViewID
let kHIViewWindowTitleID: HIViewID
let kHIViewWindowToolbarID: HIViewID
let kHIViewWindowGrowBoxID: HIViewID
var kHIWindowTitleBarPart: Int { get }
var kHIWindowDragPart: Int { get }
var kHIWindowTitleProxyIconPart: Int { get }
var kHIGrowBoxViewClassID: String { get }
var kControlKindHIGrowBoxView: Int { get }
var kIBCarbonRuntimeCantFindNibFile: Int { get }
var kIBCarbonRuntimeObjectNotOfRequestedType: Int { get }
var kIBCarbonRuntimeCantFindObject: Int { get }
typealias IBNibRef = COpaquePointer
var kIMKMouseTrackingMode: Int { get }
var kIMKNearestBoundaryMode: Int { get }
typealias IMKLocationToOffsetMappingMode = Int
let IMKTextOrientationName: String
protocol IMKTextInput {
  func insertText(string: AnyObject!, replacementRange: NSRange)
  func setMarkedText(string: AnyObject!, selectionRange: NSRange, replacementRange: NSRange)
  func selectedRange() -> NSRange
  func markedRange() -> NSRange
  func attributedSubstringFromRange(range: NSRange) -> NSAttributedString!
  func length() -> Int
  func characterIndexForPoint(point: NSPoint, tracking mappingMode: IMKLocationToOffsetMappingMode, inMarkedRange: UnsafeMutablePointer<ObjCBool>) -> Int
  func attributesForCharacterIndex(index: Int, lineHeightRectangle lineRect: UnsafeMutablePointer<NSRect>) -> [NSObject : AnyObject]!
  func validAttributesForMarkedText() -> [AnyObject]!
  func overrideKeyboardWithKeyboardNamed(keyboardUniqueName: String!)
  func selectInputMode(modeIdentifier: String!)
  func supportsUnicode() -> Bool
  func bundleIdentifier() -> String!
  func windowLevel() -> CGWindowLevel
  func supportsProperty(property: TSMDocumentPropertyTag) -> Bool
  func uniqueClientIdentifierString() -> String!
  func stringFromRange(range: NSRange, actualRange: NSRangePointer) -> String!
  func firstRectForCharacterRange(aRange: NSRange, actualRange: NSRangePointer) -> NSRect
}
protocol IMKUnicodeTextInput {
  func insertText(string: AnyObject!)
}
typealias PhysicalKeyboardLayoutType = OSType
var kKeyboardJIS: Int { get }
var kKeyboardANSI: Int { get }
var kKeyboardISO: Int { get }
var kKeyboardUnknown: Int { get }
typealias KeyboardLayoutRef = COpaquePointer
typealias KeyboardLayoutPropertyTag = UInt32
var kKLKCHRData: Int { get }
var kKLuchrData: Int { get }
var kKLIdentifier: Int { get }
var kKLIcon: Int { get }
var kKLLocalizedName: Int { get }
var kKLName: Int { get }
var kKLGroupIdentifier: Int { get }
var kKLKind: Int { get }
var kKLLanguageCode: Int { get }
typealias KeyboardLayoutKind = Int32
var kKLKCHRuchrKind: Int { get }
var kKLKCHRKind: Int { get }
var kKLuchrKind: Int { get }
typealias KeyboardLayoutIdentifier = Int32
var kKLUSKeyboard: Int { get }
func KBGetLayoutType(iKeyboardType: Int16) -> PhysicalKeyboardLayoutType
var _KeyboardDispatch: Int { get }
var gestaltKeyboardsAttr: Int { get }
var gestaltKBPS2Keyboards: Int { get }
var gestaltKBPS2SetIDToAny: Int { get }
var gestaltKBPS2SetTranslationTable: Int { get }
var errKBPS2KeyboardNotAvailable: Int { get }
var errKBIlligalParameters: Int { get }
var errKBFailSettingID: Int { get }
var errKBFailSettingTranslationTable: Int { get }
var errKBFailWritePreference: Int { get }
typealias Cell = Point
typealias ListBounds = Rect
typealias DataArray = (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
typealias DataPtr = UnsafeMutablePointer<Int8>
typealias DataHandle = UnsafeMutablePointer<DataPtr>
typealias ListSearchProcPtr = @convention(c) (Ptr, Ptr, Int16, Int16) -> Int16
typealias ListClickLoopProcPtr = @convention(c) () -> DarwinBoolean
typealias ListSearchUPP = ListSearchProcPtr
typealias ListClickLoopUPP = ListClickLoopProcPtr
struct ListRec {
  var rView: Rect
  var port: GrafPtr
  var indent: Point
  var cellSize: Point
  var visible: ListBounds
  var vScroll: Unmanaged<Control>!
  var hScroll: Unmanaged<Control>!
  var selFlags: Int8
  var lActive: DarwinBoolean
  var lReserved: Int8
  var listFlags: Int8
  var clikTime: Int
  var clikLoc: Point
  var mouseLoc: Point
  var lClickLoop: ListClickLoopUPP!
  var lastClick: Cell
  var refCon: Int
  var listDefProc: Handle
  var userHandle: Handle
  var dataBounds: ListBounds
  var cells: DataHandle
  var maxIndex: Int16
  var cellArray: (Int16)
  init()
  init(rView: Rect, port: GrafPtr, indent: Point, cellSize: Point, visible: ListBounds, vScroll: Unmanaged<Control>!, hScroll: Unmanaged<Control>!, selFlags: Int8, lActive: DarwinBoolean, lReserved: Int8, listFlags: Int8, clikTime: Int, clikLoc: Point, mouseLoc: Point, lClickLoop: ListClickLoopUPP!, lastClick: Cell, refCon: Int, listDefProc: Handle, userHandle: Handle, dataBounds: ListBounds, cells: DataHandle, maxIndex: Int16, cellArray: (Int16))
}
typealias ListPtr = UnsafeMutablePointer<ListRec>
typealias ListHandle = UnsafeMutablePointer<ListPtr>
typealias ListRef = ListHandle
var lDrawingModeOffBit: Int { get }
var lDoVAutoscrollBit: Int { get }
var lDoHAutoscrollBit: Int { get }
var lDrawingModeOff: Int { get }
var lDoVAutoscroll: Int { get }
var lDoHAutoscroll: Int { get }
var lOnlyOneBit: Int { get }
var lExtendDragBit: Int { get }
var lNoDisjointBit: Int { get }
var lNoExtendBit: Int { get }
var lNoRectBit: Int { get }
var lUseSenseBit: Int { get }
var lNoNilHiliteBit: Int { get }
var lOnlyOne: Int { get }
var lExtendDrag: Int { get }
var lNoDisjoint: Int { get }
var lNoExtend: Int { get }
var lNoRect: Int { get }
var lUseSense: Int { get }
var lNoNilHilite: Int { get }
var lInitMsg: Int { get }
var lDrawMsg: Int { get }
var lHiliteMsg: Int { get }
var lCloseMsg: Int { get }
struct StandardIconListCellDataRec {
  var iconHandle: Handle
  var font: Int16
  var face: Int16
  var size: Int16
  var name: Str255
  init()
  init(iconHandle: Handle, font: Int16, face: Int16, size: Int16, name: Str255)
}
typealias StandardIconListCellDataPtr = UnsafeMutablePointer<StandardIconListCellDataRec>
typealias ListDefProcPtr = @convention(c) (Int16, DarwinBoolean, UnsafeMutablePointer<Rect>, Cell, Int16, Int16, ListHandle) -> Void
typealias ListDefUPP = ListDefProcPtr
var kListDefProcPtr: Int { get }
var kListDefUserProcType: Int { get }
var kListDefStandardTextType: Int { get }
var kListDefStandardIconType: Int { get }
typealias ListDefType = UInt32
struct ListDefSpec {
  struct __Unnamed_union_u {
    var userProc: ListDefUPP!
    init(userProc: ListDefUPP!)
    init()
  }
  var defType: ListDefType
  var u: ListDefSpec.__Unnamed_union_u
  init()
  init(defType: ListDefType, u: ListDefSpec.__Unnamed_union_u)
}
typealias ListDefSpecPtr = UnsafeMutablePointer<ListDefSpec>
let kHIToolboxVersionNumber: Float
var kHIToolboxVersionNumber10_3: Double { get }
var kHIToolboxVersionNumber10_3_2: Double { get }
var kHIToolboxVersionNumber10_3_3: Double { get }
var kHIToolboxVersionNumber10_3_4: Double { get }
var kHIToolboxVersionNumber10_3_5: Double { get }
var kHIToolboxVersionNumber10_3_9: Double { get }
var kHIToolboxVersionNumber10_4: Int32 { get }
var kHIToolboxVersionNumber10_4_1: Double { get }
var kHIToolboxVersionNumber10_4_2: Int32 { get }
var kHIToolboxVersionNumber10_4_2_SecUpdate: Int32 { get }
var kHIToolboxVersionNumber10_4_4: Int32 { get }
var kHIToolboxVersionNumber10_4_4_Intel: Int32 { get }
var kHIToolboxVersionNumber10_4_6: Int32 { get }
var kHIToolboxVersionNumber10_4_7: Int32 { get }
var kHIToolboxVersionNumber10_4_9: Int32 { get }
var kHIToolboxVersionNumber10_5: Int32 { get }
var kHIToolboxVersionNumber10_5_1: Int32 { get }
var kHIToolboxVersionNumber10_5_2: Int32 { get }
var kHIToolboxVersionNumber10_5_3: Int32 { get }
var kHIToolboxVersionNumber10_5_4: Int32 { get }
var kHIToolboxVersionNumber10_5_5: Int32 { get }
var kHIToolboxVersionNumber10_5_6: Int32 { get }
var kHIToolboxVersionNumber10_5_7: Int32 { get }
var kHIApplicationClassID: String { get }
var kUIModeNormal: Int { get }
var kUIModeContentSuppressed: Int { get }
var kUIModeContentHidden: Int { get }
var kUIModeAllSuppressed: Int { get }
var kUIModeAllHidden: Int { get }
typealias SystemUIMode = UInt32
var kUIOptionAutoShowMenuBar: Int { get }
var kUIOptionAnimateMenuBar: Int { get }
var kUIOptionDisableAppleMenu: Int { get }
var kUIOptionDisableProcessSwitch: Int { get }
var kUIOptionDisableForceQuit: Int { get }
var kUIOptionDisableSessionTerminate: Int { get }
var kUIOptionDisableHide: Int { get }
var kUIOptionDisableMenuBarTransparency: Int { get }
typealias SystemUIOptions = OptionBits
func SetSystemUIMode(inMode: SystemUIMode, _ inOptions: SystemUIOptions) -> OSStatus
func GetSystemUIMode(outMode: UnsafeMutablePointer<SystemUIMode>, _ outOptions: UnsafeMutablePointer<SystemUIOptions>)
func GetApplicationTextEncoding() -> TextEncoding
var kHIAboutBoxNameKey: String { get }
var kHIAboutBoxVersionKey: String { get }
var kHIAboutBoxCopyrightKey: String { get }
var kHIAboutBoxDescriptionKey: String { get }
var kHIAboutBoxStringFileKey: String { get }
func HISearchWindowShow(inSearchString: CFString!, _ inFlags: OptionBits) -> OSStatus
func HIDictionaryWindowShow(dictionary: DCSDictionary!, _ textString: AnyObject!, _ selectionRange: CFRange, _ textFont: CTFont!, _ textOrigin: CGPoint, _ verticalText: Bool, _ viewTransform: UnsafePointer<CGAffineTransform>)
var kMacHelpVersion: Int { get }
var kHMHelpMenuID: Int { get }
typealias HMContentRequest = Int16
var kHMSupplyContent: Int { get }
var kHMDisposeContent: Int { get }
typealias HMContentType = UInt32
var kHMNoContent: Int { get }
var kHMCFStringContent: Int { get }
var kHMCFStringLocalizedContent: Int { get }
var kHMPascalStrContent: Int { get }
var kHMTextResContent: Int { get }
var kHMTEHandleContent: Int { get }
var kHMStringResContent: Int { get }
var kHMStrResContent: Int { get }
typealias HMTagDisplaySide = Int16
var kHMDefaultSide: Int { get }
var kHMOutsideTopScriptAligned: Int { get }
var kHMOutsideLeftCenterAligned: Int { get }
var kHMOutsideBottomScriptAligned: Int { get }
var kHMOutsideRightCenterAligned: Int { get }
var kHMOutsideTopLeftAligned: Int { get }
var kHMOutsideTopRightAligned: Int { get }
var kHMOutsideLeftTopAligned: Int { get }
var kHMOutsideLeftBottomAligned: Int { get }
var kHMOutsideBottomLeftAligned: Int { get }
var kHMOutsideBottomRightAligned: Int { get }
var kHMOutsideRightTopAligned: Int { get }
var kHMOutsideRightBottomAligned: Int { get }
var kHMOutsideTopCenterAligned: Int { get }
var kHMOutsideBottomCenterAligned: Int { get }
var kHMInsideRightCenterAligned: Int { get }
var kHMInsideLeftCenterAligned: Int { get }
var kHMInsideBottomCenterAligned: Int { get }
var kHMInsideTopCenterAligned: Int { get }
var kHMInsideTopLeftCorner: Int { get }
var kHMInsideTopRightCorner: Int { get }
var kHMInsideBottomLeftCorner: Int { get }
var kHMInsideBottomRightCorner: Int { get }
var kHMAbsoluteCenterAligned: Int { get }
var kHMTopSide: Int { get }
var kHMLeftSide: Int { get }
var kHMBottomSide: Int { get }
var kHMRightSide: Int { get }
var kHMTopLeftCorner: Int { get }
var kHMTopRightCorner: Int { get }
var kHMLeftTopCorner: Int { get }
var kHMLeftBottomCorner: Int { get }
var kHMBottomLeftCorner: Int { get }
var kHMBottomRightCorner: Int { get }
var kHMRightTopCorner: Int { get }
var kHMRightBottomCorner: Int { get }
typealias HMContentProvidedType = Int16
var kHMContentProvided: Int { get }
var kHMContentNotProvided: Int { get }
var kHMContentNotProvidedDontPropagate: Int { get }
var kHMMinimumContentIndex: Int { get }
var kHMMaximumContentIndex: Int { get }
var errHMIllegalContentForMinimumState: Int { get }
var errHMIllegalContentForMaximumState: Int { get }
var kHMIllegalContentForMinimumState: Int { get }
var kHelpTagEventHandlerTag: Int { get }
struct HMStringResType {
  var hmmResID: Int16
  var hmmIndex: Int16
  init()
  init(hmmResID: Int16, hmmIndex: Int16)
}
struct HMHelpContent {
  struct __Unnamed_union_u {
    var tagCFString: Unmanaged<CFString>!
    var tagString: Str255
    var tagStringRes: HMStringResType
    var tagTEHandle: TEHandle
    var tagTextRes: Int16
    var tagStrRes: Int16
    init(tagCFString: Unmanaged<CFString>!)
    init(tagString: Str255)
    init(tagStringRes: HMStringResType)
    init(tagTEHandle: TEHandle)
    init(tagTextRes: Int16)
    init(tagStrRes: Int16)
    init()
  }
  var contentType: HMContentType
  var u: HMHelpContent.__Unnamed_union_u
  init()
  init(contentType: HMContentType, u: HMHelpContent.__Unnamed_union_u)
}
struct HMHelpContentRec {
  var version: Int32
  var absHotRect: Rect
  var tagSide: HMTagDisplaySide
  var content: (HMHelpContent, HMHelpContent)
  init()
  init(version: Int32, absHotRect: Rect, tagSide: HMTagDisplaySide, content: (HMHelpContent, HMHelpContent))
}
typealias HMHelpContentPtr = UnsafeMutablePointer<HMHelpContentRec>
typealias HMControlContentProcPtr = @convention(c) (Control!, Point, HMContentRequest, UnsafeMutablePointer<HMContentProvidedType>, UnsafeMutablePointer<HMHelpContentRec>) -> OSStatus
typealias HMWindowContentProcPtr = @convention(c) (WindowRef, Point, HMContentRequest, UnsafeMutablePointer<HMContentProvidedType>, UnsafeMutablePointer<HMHelpContentRec>) -> OSStatus
typealias HMMenuTitleContentProcPtr = @convention(c) (Menu!, HMContentRequest, UnsafeMutablePointer<HMContentProvidedType>, UnsafeMutablePointer<HMHelpContentRec>) -> OSStatus
typealias HMMenuItemContentProcPtr = @convention(c) (UnsafePointer<MenuTrackingData>, HMContentRequest, UnsafeMutablePointer<HMContentProvidedType>, UnsafeMutablePointer<HMHelpContentRec>) -> OSStatus
typealias HMControlContentUPP = HMControlContentProcPtr
typealias HMWindowContentUPP = HMWindowContentProcPtr
typealias HMMenuTitleContentUPP = HMMenuTitleContentProcPtr
typealias HMMenuItemContentUPP = HMMenuItemContentProcPtr
func NewHMControlContentUPP(userRoutine: HMControlContentProcPtr!) -> HMControlContentUPP!
func NewHMWindowContentUPP(userRoutine: HMWindowContentProcPtr!) -> HMWindowContentUPP!
func NewHMMenuTitleContentUPP(userRoutine: HMMenuTitleContentProcPtr!) -> HMMenuTitleContentUPP!
func NewHMMenuItemContentUPP(userRoutine: HMMenuItemContentProcPtr!) -> HMMenuItemContentUPP!
func DisposeHMControlContentUPP(userUPP: HMControlContentUPP!)
func DisposeHMWindowContentUPP(userUPP: HMWindowContentUPP!)
func DisposeHMMenuTitleContentUPP(userUPP: HMMenuTitleContentUPP!)
func DisposeHMMenuItemContentUPP(userUPP: HMMenuItemContentUPP!)
func InvokeHMControlContentUPP(inControl: Control!, _ inGlobalMouse: Point, _ inRequest: HMContentRequest, _ outContentProvided: UnsafeMutablePointer<HMContentProvidedType>, _ ioHelpContent: UnsafeMutablePointer<HMHelpContentRec>, _ userUPP: HMControlContentUPP!) -> OSStatus
func InvokeHMWindowContentUPP(inWindow: WindowRef, _ inGlobalMouse: Point, _ inRequest: HMContentRequest, _ outContentProvided: UnsafeMutablePointer<HMContentProvidedType>, _ ioHelpContent: UnsafeMutablePointer<HMHelpContentRec>, _ userUPP: HMWindowContentUPP!) -> OSStatus
func InvokeHMMenuTitleContentUPP(inMenu: Menu!, _ inRequest: HMContentRequest, _ outContentProvided: UnsafeMutablePointer<HMContentProvidedType>, _ ioHelpContent: UnsafeMutablePointer<HMHelpContentRec>, _ userUPP: HMMenuTitleContentUPP!) -> OSStatus
func InvokeHMMenuItemContentUPP(inTrackingData: UnsafePointer<MenuTrackingData>, _ inRequest: HMContentRequest, _ outContentProvided: UnsafeMutablePointer<HMContentProvidedType>, _ ioHelpContent: UnsafeMutablePointer<HMHelpContentRec>, _ userUPP: HMMenuItemContentUPP!) -> OSStatus
var kHMHideTagFade: Int { get }
var kHMHideTagImmediately: Int { get }
typealias TXNObject = COpaquePointer
typealias TXNVersionValue = UInt32
typealias TXNFrameID = UInt32
var kTXNDisabledFunctionalityErr: Int { get }
var kTXNOperationNotAllowedErr: Int { get }
var kTXNWillDefaultToATSUIBit: Int { get }
var kTXNWillDefaultToCarbonEventBit: Int { get }
typealias TXNFeatureBits = OptionBits
var kTXNWillDefaultToATSUIMask: Int { get }
var kTXNWillDefaultToCarbonEventMask: Int { get }
var kTXNDrawGrowIconBit: Int { get }
var kTXNShowWindowBit: Int { get }
var kTXNWantHScrollBarBit: Int { get }
var kTXNWantVScrollBarBit: Int { get }
var kTXNReadOnlyBit: Int { get }
var kTXNNoSelectionBit: Int { get }
var kTXNSaveStylesAsSTYLResourceBit: Int { get }
var kOutputTextInUnicodeEncodingBit: Int { get }
var kTXNDoNotInstallDragProcsBit: Int { get }
var kTXNAlwaysWrapAtViewEdgeBit: Int { get }
var kTXNDontDrawSelectionWhenInactiveBit: Int { get }
var kTXNSingleLineOnlyBit: Int { get }
var kTXNDisableDragAndDropBit: Int { get }
var kTXNMonostyledTextBit: Int { get }
var kTXNDoFontSubstitutionBit: Int { get }
typealias TXNFrameOptions = OptionBits
var kTXNDrawGrowIconMask: Int { get }
var kTXNShowWindowMask: Int { get }
var kTXNWantHScrollBarMask: Int { get }
var kTXNWantVScrollBarMask: Int { get }
var kTXNReadOnlyMask: Int { get }
var kTXNNoSelectionMask: Int { get }
var kTXNSaveStylesAsSTYLResourceMask: Int { get }
var kOutputTextInUnicodeEncodingMask: Int { get }
var kTXNDoNotInstallDragProcsMask: Int { get }
var kTXNAlwaysWrapAtViewEdgeMask: Int { get }
var kTXNDontDrawSelectionWhenInactiveMask: Int { get }
var kTXNSingleLineOnlyMask: Int { get }
var kTXNDisableDragAndDropMask: Int { get }
var kTXNMonostyledTextMask: Int { get }
var kTXNDoFontSubstitutionMask: Int { get }
typealias TXNFileType = OSType
var kTXNTextFile: Int { get }
var kTXNAIFFFile: Int { get }
var kTXNUnicodeTextFile: Int { get }
var kTXNTextensionFile: Int { get }
typealias TXNPermanentTextEncodingType = UInt32
var kTXNSystemDefaultEncoding: Int { get }
var kTXNMacOSEncoding: Int { get }
var kTXNUnicodeEncoding: Int { get }
typealias TXNDataType = OSType
var kTXNTextData: Int { get }
var kTXNUnicodeTextData: Int { get }
var kTXNRichTextFormatData: Int { get }
let kTXNActionTyping: CFString!
let kTXNActionCut: CFString!
let kTXNActionPaste: CFString!
let kTXNActionClear: CFString!
let kTXNActionChangeFont: CFString!
let kTXNActionChangeColor: CFString!
let kTXNActionChangeSize: CFString!
let kTXNActionChangeStyle: CFString!
let kTXNActionAlignLeft: CFString!
let kTXNActionAlignCenter: CFString!
let kTXNActionAlignRight: CFString!
let kTXNActionDrop: CFString!
let kTXNActionMove: CFString!
let kTXNActionChangeFontFeature: CFString!
let kTXNActionChangeFontVariation: CFString!
let kTXNActionChangeGlyphVariation: CFString!
let kTXNActionChangeTextPosition: CFString!
let kTXNActionUndoLast: CFString!
typealias TXNTabType = Int8
var kTXNRightTab: Int { get }
var kTXNLeftTab: Int { get }
var kTXNCenterTab: Int { get }
struct TXNTab {
  var value: Int16
  var tabType: TXNTabType
  var filler: UInt8
  init()
  init(value: Int16, tabType: TXNTabType, filler: UInt8)
}
var kTXNLeftToRight: Int { get }
var kTXNRightToLeft: Int { get }
var kTXNFlushDefault: Int { get }
var kTXNFlushLeft: Int { get }
var kTXNFlushRight: Int { get }
var kTXNCenter: Int { get }
var kTXNFullJust: Int { get }
var kTXNForceFullJust: Int { get }
struct TXNMargins {
  var topMargin: Int16
  var leftMargin: Int16
  var bottomMargin: Int16
  var rightMargin: Int16
  init()
  init(topMargin: Int16, leftMargin: Int16, bottomMargin: Int16, rightMargin: Int16)
}
typealias TXNControlTag = FourCharCode
var kTXNLineDirectionTag: Int { get }
var kTXNJustificationTag: Int { get }
var kTXNIOPrivilegesTag: Int { get }
var kTXNSelectionStateTag: Int { get }
var kTXNInlineStateTag: Int { get }
var kTXNWordWrapStateTag: Int { get }
var kTXNAutoIndentStateTag: Int { get }
var kTXNTabSettingsTag: Int { get }
var kTXNRefConTag: Int { get }
var kTXNMarginsTag: Int { get }
var kTXNFlattenMoviesTag: Int { get }
var kTXNDoFontSubstitution: Int { get }
var kTXNNoUserIOTag: Int { get }
var kTXNUseCarbonEvents: Int { get }
var kTXNDrawSelectionWhenInactiveTag: Int { get }
var kTXNDisableDragAndDropTag: Int { get }
var kTXNSingleLevelUndoTag: Int { get }
var kTXNVisibilityTag: Int { get }
var kTXNDisableLayoutAndDrawTag: Int { get }
var kTXNAutoScrollBehaviorTag: Int { get }
var kTXNClearThisControl: Int { get }
var kTXNClearTheseFontFeatures: Int { get }
var kTXNReadWrite: Int { get }
var kTXNReadOnly: Int { get }
var kTXNSelectionOn: Int { get }
var kTXNSelectionOff: Int { get }
var kTXNUseInline: Int { get }
var kTXNUseBottomline: Int { get }
var kTXNAutoWrap: Int { get }
var kTXNNoAutoWrap: Int { get }
var kTXNAutoIndentOff: Int { get }
var kTXNAutoIndentOn: Int { get }
var kTXNDontDrawSelectionWhenInactive: Int { get }
var kTXNDrawSelectionWhenInactive: Int { get }
var kTXNEnableDragAndDrop: Int { get }
var kTXNDisableDragAndDrop: Int { get }
var kTXNDisableLayoutAndDraw: Int { get }
var kTXNEnableLayoutAndDraw: Int { get }
struct TXNControlData {
  var uValue: UInt
  var sValue: Int
  var tabValue: TXNTab
  var marginsPtr: UnsafeMutablePointer<TXNMargins>
  init(uValue: UInt)
  init(sValue: Int)
  init(tabValue: TXNTab)
  init(marginsPtr: UnsafeMutablePointer<TXNMargins>)
  init()
}
typealias TXNAutoScrollBehavior = UInt32
var kTXNAutoScrollInsertionIntoView: Int { get }
var kTXNAutoScrollNever: Int { get }
var kTXNAutoScrollWhenInsertionVisible: Int { get }
typealias TXNOffset = UInt32
var kTXNUseCurrentSelection: UInt32 { get }
var kTXNStartOffset: UInt32 { get }
var kTXNEndOffset: UInt32 { get }
var kTXNShowStart: Int { get }
var kTXNShowEnd: Int { get }
var kTXNSingleStylePerTextDocumentResType: Int { get }
var kTXNMultipleStylesPerTextDocumentResType: Int { get }
typealias TXNHyperLinkState = UInt32
var kTXNLinkNotPressed: Int { get }
var kTXNLinkWasPressed: Int { get }
var kTXNLinkTracking: Int { get }
typealias TXNTypeRunAttributes = FourCharCode
var kTXNTextEncodingAttribute: Int { get }
var kTXNATSUIFontFeaturesAttribute: Int { get }
var kTXNATSUIFontVariationsAttribute: Int { get }
var kTXNURLAttribute: Int { get }
var kTXNATSUIStyle: Int { get }
typealias TXNTypeRunAttributeSizes = Int
var kTXNTextEncodingAttributeSize: Int { get }
var kTXNATSUIStyleSize: Int { get }
struct TXNATSUIFeatures {
  var featureCount: Int
  var featureTypes: UnsafeMutablePointer<ATSUFontFeatureType>
  var featureSelectors: UnsafeMutablePointer<ATSUFontFeatureSelector>
  init()
  init(featureCount: Int, featureTypes: UnsafeMutablePointer<ATSUFontFeatureType>, featureSelectors: UnsafeMutablePointer<ATSUFontFeatureSelector>)
}
struct TXNATSUIVariations {
  var variationCount: Int
  var variationAxis: UnsafeMutablePointer<ATSUFontVariationAxis>
  var variationValues: UnsafeMutablePointer<ATSUFontVariationValue>
  init()
  init(variationCount: Int, variationAxis: UnsafeMutablePointer<ATSUFontVariationAxis>, variationValues: UnsafeMutablePointer<ATSUFontVariationValue>)
}
struct TXNAttributeData {
  var dataPtr: UnsafeMutablePointer<Void>
  var dataValue: UInt32
  var atsuFeatures: UnsafeMutablePointer<TXNATSUIFeatures>
  var atsuVariations: UnsafeMutablePointer<TXNATSUIVariations>
  var urlReference: Unmanaged<CFURL>!
  init(dataPtr: UnsafeMutablePointer<Void>)
  init(dataValue: UInt32)
  init(atsuFeatures: UnsafeMutablePointer<TXNATSUIFeatures>)
  init(atsuVariations: UnsafeMutablePointer<TXNATSUIVariations>)
  init(urlReference: Unmanaged<CFURL>!)
  init()
}
struct TXNTypeAttributes {
  var tag: TXNTypeRunAttributes
  var size: Int
  var data: TXNAttributeData
  init()
  init(tag: TXNTypeRunAttributes, size: Int, data: TXNAttributeData)
}
var kTXNDontCareTypeSize: Int { get }
var kTXNDontCareTypeStyle: Int { get }
var kTXNIncrementTypeSize: Int { get }
var kTXNDecrementTypeSize: Int { get }
var kTXNUseScriptDefaultValue: Int { get }
var kTXNNoFontVariations: Int { get }
var kTXNFontContinuousBit: Int { get }
var kTXNSizeContinuousBit: Int { get }
var kTXNStyleContinuousBit: Int { get }
var kTXNColorContinuousBit: Int { get }
var kTXNATSUIStyleContinuousBit: Int { get }
typealias TXNContinuousFlags = OptionBits
var kTXNFontContinuousMask: Int { get }
var kTXNSizeContinuousMask: Int { get }
var kTXNStyleContinuousMask: Int { get }
var kTXNColorContinuousMask: Int { get }
var kTXNATSUIStyleContinuousMask: Int { get }
var kTXNIgnoreCaseBit: Int { get }
var kTXNEntireWordBit: Int { get }
var kTXNUseEncodingWordRulesBit: Int { get }
typealias TXNMatchOptions = OptionBits
var kTXNIgnoreCaseMask: UInt32 { get }
var kTXNEntireWordMask: UInt32 { get }
var kTXNUseEncodingWordRulesMask: UInt32 { get }
struct TXNMatchTextRecord {
  var iTextPtr: UnsafePointer<Void>
  var iTextToMatchLength: Int
  var iTextEncoding: TextEncoding
  init()
  init(iTextPtr: UnsafePointer<Void>, iTextToMatchLength: Int, iTextEncoding: TextEncoding)
}
typealias TXNBackgroundType = UInt32
var kTXNBackgroundTypeRGB: Int { get }
struct TXNBackgroundData {
  var color: RGBColor
  init()
  init(color: RGBColor)
}
struct TXNBackground {
  var bgType: TXNBackgroundType
  var bg: TXNBackgroundData
  init()
  init(bgType: TXNBackgroundType, bg: TXNBackgroundData)
}
let kTXNActionCountOfTextChanges: CFString!
let kTXNActionCountOfStyleChanges: CFString!
let kTXNActionCountOfAllChanges: CFString!
typealias TXNScrollUnit = UInt32
var kTXNScrollUnitsInPixels: Int { get }
var kTXNScrollUnitsInLines: Int { get }
var kTXNScrollUnitsInViewRects: Int { get }
typealias TXNScrollBarOrientation = UInt32
var kTXNHorizontal: Int { get }
var kTXNVertical: Int { get }
typealias TXNScrollBarState = DarwinBoolean
var kScrollBarsAlwaysActive: Int { get }
var kScrollBarsSyncWithFocus: Int { get }
var kTXNDrawItemScrollbarsBit: Int { get }
var kTXNDrawItemTextBit: Int { get }
var kTXNDrawItemTextAndSelectionBit: Int { get }
typealias TXNDrawItems = OptionBits
var kTXNDrawItemScrollbarsMask: UInt32 { get }
var kTXNDrawItemTextMask: UInt32 { get }
var kTXNDrawItemTextAndSelectionMask: UInt32 { get }
var kTXNDrawItemAllMask: UInt32 { get }
typealias TXNRectKey = UInt32
var kTXNViewRectKey: Int { get }
var kTXNDestinationRectKey: Int { get }
var kTXNTextRectKey: Int { get }
var kTXNVerticalScrollBarRectKey: Int { get }
var kTXNHorizontalScrollBarRectKey: Int { get }
var kTXNTextHandlerKey: String { get }
var kTXNWindowEventHandlerKey: String { get }
var kTXNWindowResizeEventHandlerKey: String { get }
var kTXNCommandTargetKey: String { get }
var kTXNCommandUpdateKey: String { get }
var kTXNActionNameMapperKey: String { get }
var kTXNWheelMouseEventHandlerKey: String { get }
var kTXNTSMDocumentAccessHandlerKey: String { get }
var kTXNFontPanelEventHandlerKey: String { get }
struct TXNCarbonEventInfo {
  var useCarbonEvents: DarwinBoolean
  var filler: UInt8
  var flags: UInt16
  var fDictionary: Unmanaged<CFDictionary>!
  init()
  init(useCarbonEvents: DarwinBoolean, filler: UInt8, flags: UInt16, fDictionary: Unmanaged<CFDictionary>!)
}
let kTXNDocumentAttributeTitleKey: CFString!
let kTXNDocumentAttributeCompanyNameKey: CFString!
let kTXNDocumentAttributeSubjectKey: CFString!
let kTXNDocumentAttributeAuthorKey: CFString!
let kTXNDocumentAttributeKeywordsKey: CFString!
let kTXNDocumentAttributeCommentKey: CFString!
let kTXNDocumentAttributeEditorKey: CFString!
let kTXNDocumentAttributeCreationTimeKey: CFString!
let kTXNDocumentAttributeModificationTimeKey: CFString!
let kTXNDocumentAttributeCopyrightKey: CFString!
let kTXNDataOptionDocumentTypeKey: CFString!
let kTXNDataOptionCharacterEncodingKey: CFString!
let kTXNPlainTextDocumentType: CFString!
let kTXNMLTEDocumentType: CFString!
let kTXNRTFDocumentType: CFString!
let kTXNQuickTimeDocumentType: CFString!
typealias TXNFindProcPtr = @convention(c) (UnsafePointer<TXNMatchTextRecord>, TXNDataType, TXNMatchOptions, UnsafePointer<Void>, TextEncoding, TXNOffset, Int, UnsafeMutablePointer<TXNOffset>, UnsafeMutablePointer<TXNOffset>, UnsafeMutablePointer<DarwinBoolean>, URefCon) -> OSStatus
typealias TXNActionNameMapperProcPtr = @convention(c) (CFString!, UInt32, UnsafeMutablePointer<Void>) -> Unmanaged<CFString>!
typealias TXNContextualMenuSetupProcPtr = @convention(c) (Menu!, TXNObject, UnsafeMutablePointer<Void>) -> Void
typealias TXNScrollInfoProcPtr = @convention(c) (Int32, Int32, TXNScrollBarOrientation, SRefCon) -> Void
typealias TXNFindUPP = TXNFindProcPtr
typealias TXNActionNameMapperUPP = TXNActionNameMapperProcPtr
typealias TXNContextualMenuSetupUPP = TXNContextualMenuSetupProcPtr
typealias TXNScrollInfoUPP = TXNScrollInfoProcPtr
func NewTXNFindUPP(userRoutine: TXNFindProcPtr!) -> TXNFindUPP!
func NewTXNActionNameMapperUPP(userRoutine: TXNActionNameMapperProcPtr!) -> TXNActionNameMapperUPP!
func NewTXNContextualMenuSetupUPP(userRoutine: TXNContextualMenuSetupProcPtr!) -> TXNContextualMenuSetupUPP!
func NewTXNScrollInfoUPP(userRoutine: TXNScrollInfoProcPtr!) -> TXNScrollInfoUPP!
func DisposeTXNFindUPP(userUPP: TXNFindUPP!)
func DisposeTXNActionNameMapperUPP(userUPP: TXNActionNameMapperUPP!)
func DisposeTXNContextualMenuSetupUPP(userUPP: TXNContextualMenuSetupUPP!)
func DisposeTXNScrollInfoUPP(userUPP: TXNScrollInfoUPP!)
func InvokeTXNFindUPP(matchData: UnsafePointer<TXNMatchTextRecord>, _ iDataType: TXNDataType, _ iMatchOptions: TXNMatchOptions, _ iSearchTextPtr: UnsafePointer<Void>, _ encoding: TextEncoding, _ absStartOffset: TXNOffset, _ searchTextLength: Int, _ oStartMatch: UnsafeMutablePointer<TXNOffset>, _ oEndMatch: UnsafeMutablePointer<TXNOffset>, _ ofound: UnsafeMutablePointer<DarwinBoolean>, _ refCon: URefCon, _ userUPP: TXNFindUPP!) -> OSStatus
func InvokeTXNActionNameMapperUPP(actionName: CFString!, _ commandID: UInt32, _ inUserData: UnsafeMutablePointer<Void>, _ userUPP: TXNActionNameMapperUPP!) -> Unmanaged<CFString>!
func InvokeTXNContextualMenuSetupUPP(iContextualMenu: Menu!, _ object: TXNObject, _ inUserData: UnsafeMutablePointer<Void>, _ userUPP: TXNContextualMenuSetupUPP!)
func InvokeTXNScrollInfoUPP(iValue: Int32, _ iMaximumValue: Int32, _ iScrollBarOrientation: TXNScrollBarOrientation, _ iRefCon: SRefCon, _ userUPP: TXNScrollInfoUPP!)
typealias TXNCommandEventSupportOptions = OptionBits
var kTXNSupportEditCommandProcessing: Int { get }
var kTXNSupportEditCommandUpdating: Int { get }
var kTXNSupportSpellCheckCommandProcessing: Int { get }
var kTXNSupportSpellCheckCommandUpdating: Int { get }
var kTXNSupportFontCommandProcessing: Int { get }
var kTXNSupportFontCommandUpdating: Int { get }
typealias TXTNTag = FourCharCode
typealias TXNErrors = OSStatus
typealias TXNObjectRefcon = UnsafeMutablePointer<Void>
struct TXNLongRect {
  var top: Int32
  var left: Int32
  var bottom: Int32
  var right: Int32
  init()
  init(top: Int32, left: Int32, bottom: Int32, right: Int32)
}
typealias TXNFrameType = UInt32
var kTXNTextEditStyleFrameType: Int { get }
var kTXNPageFrameType: Int { get }
var kTXNMultipleFrameType: Int { get }
var kTXNQDFontNameAttribute: Int { get }
var kTXNQDFontFamilyIDAttribute: Int { get }
var kTXNQDFontSizeAttribute: Int { get }
var kTXNQDFontStyleAttribute: Int { get }
var kTXNQDFontColorAttribute: Int { get }
var kTXNQDFontNameAttributeSize: Int { get }
var kTXNQDFontFamilyIDAttributeSize: Int { get }
var kTXNFontSizeAttributeSize: Int { get }
var kTXNQDFontSizeAttributeSize: Int { get }
var kTXNQDFontStyleAttributeSize: Int { get }
var kTXNQDFontColorAttributeSize: Int { get }
var kTXNUseQDforImagingBit: Int { get }
var kTXNUseQDforImagingMask: Int { get }
var kTXNImageWithQDBit: Int { get }
var kTXNImageWithQDMask: Int { get }
var kTXNDrawCaretWhenInactiveTag: Int { get }
var kTXNDontDrawCaretWhenInactive: Int { get }
var kTXNDrawCaretWhenInactive: Int { get }
var kTXNDontDrawCaretWhenInactiveBit: Int { get }
var kTXNDontDrawCaretWhenInactiveMask: Int { get }
var kTXNNoTSMEverBit: Int { get }
var kTXNNoTSMEverMask: Int { get }
var kTXNNoAppleEventHandlersBit: Int { get }
var kTXNRestartAppleEventHandlersBit: Int { get }
var kTXNNoAppleEventHandlersMask: Int { get }
var kTXNRestartAppleEventHandlersMask: Int { get }
typealias TXNActionKey = UInt32
var kTXNTypingAction: Int { get }
var kTXNCutAction: Int { get }
var kTXNPasteAction: Int { get }
var kTXNClearAction: Int { get }
var kTXNChangeFontAction: Int { get }
var kTXNChangeFontColorAction: Int { get }
var kTXNChangeFontSizeAction: Int { get }
var kTXNChangeStyleAction: Int { get }
var kTXNAlignLeftAction: Int { get }
var kTXNAlignCenterAction: Int { get }
var kTXNAlignRightAction: Int { get }
var kTXNDropAction: Int { get }
var kTXNMoveAction: Int { get }
var kTXNFontFeatureAction: Int { get }
var kTXNFontVariationAction: Int { get }
var kTXNUndoLastAction: Int { get }
var kTXNActionKeyMapperKey: String { get }
typealias TXNActionKeyMapperProcPtr = @convention(c) (TXNActionKey, UInt32) -> Unmanaged<CFString>!
typealias TXNActionKeyMapperUPP = TXNActionKeyMapperProcPtr
var kTXNTextInputCountBit: Int { get }
var kTXNRunCountBit: Int { get }
typealias TXNCountOptions = OptionBits
var kTXNTextInputCountMask: Int { get }
var kTXNRunCountMask: Int { get }
var kTXNAllCountMask: Int { get }
typealias HIWindowRef = WindowRef
typealias PropertyCreator = OSType
typealias PropertyTag = OSType
typealias WindowClass = UInt32
var kAlertWindowClass: UInt32 { get }
var kMovableAlertWindowClass: UInt32 { get }
var kModalWindowClass: UInt32 { get }
var kMovableModalWindowClass: UInt32 { get }
var kFloatingWindowClass: UInt32 { get }
var kDocumentWindowClass: UInt32 { get }
var kUtilityWindowClass: UInt32 { get }
var kHelpWindowClass: UInt32 { get }
var kSheetWindowClass: UInt32 { get }
var kToolbarWindowClass: UInt32 { get }
var kPlainWindowClass: UInt32 { get }
var kOverlayWindowClass: UInt32 { get }
var kSheetAlertWindowClass: UInt32 { get }
var kAltPlainWindowClass: UInt32 { get }
var kSimpleWindowClass: UInt32 { get }
var kDrawerWindowClass: UInt32 { get }
var kAllWindowClasses: UInt32 { get }
var kHIWindowBitCloseBox: Int { get }
var kHIWindowBitZoomBox: Int { get }
var kHIWindowBitCollapseBox: Int { get }
var kHIWindowBitResizable: Int { get }
var kHIWindowBitSideTitlebar: Int { get }
var kHIWindowBitToolbarButton: Int { get }
var kHIWindowBitUnifiedTitleAndToolbar: Int { get }
var kHIWindowBitTextured: Int { get }
var kHIWindowBitNoTitleBar: Int { get }
var kHIWindowBitTexturedSquareCorners: Int { get }
var kHIWindowBitNoTexturedContentSeparator: Int { get }
var kHIWindowBitRoundBottomBarCorners: Int { get }
var kHIWindowBitDoesNotCycle: Int { get }
var kHIWindowBitNoUpdates: Int { get }
var kHIWindowBitNoActivates: Int { get }
var kHIWindowBitOpaqueForEvents: Int { get }
var kHIWindowBitCompositing: Int { get }
var kHIWindowBitHighResolutionCapable: Int { get }
var kHIWindowBitNoShadow: Int { get }
var kHIWindowBitCanBeVisibleWithoutLogin: Int { get }
var kHIWindowBitAsyncDrag: Int { get }
var kHIWindowBitHideOnSuspend: Int { get }
var kHIWindowBitStandardHandler: Int { get }
var kHIWindowBitHideOnFullScreen: Int { get }
var kHIWindowBitInWindowMenu: Int { get }
var kHIWindowBitLiveResize: Int { get }
var kHIWindowBitIgnoreClicks: Int { get }
var kHIWindowBitNoConstrain: Int { get }
var kHIWindowBitDoesNotHide: Int { get }
var kHIWindowBitAutoViewDragTracking: Int { get }
var kHIWindowBitAutoCalibration: Int { get }
var kHIWindowBitFullScreenPrimary: Int { get }
var kHIWindowBitFullScreenAuxiliary: Int { get }
var kWindowNoAttributes: Int { get }
var kWindowCloseBoxAttribute: Int { get }
var kWindowHorizontalZoomAttribute: Int { get }
var kWindowVerticalZoomAttribute: Int { get }
var kWindowFullZoomAttribute: Int { get }
var kWindowCollapseBoxAttribute: Int { get }
var kWindowResizableAttribute: Int { get }
var kWindowSideTitlebarAttribute: Int { get }
var kWindowToolbarButtonAttribute: Int { get }
var kWindowUnifiedTitleAndToolbarAttribute: Int { get }
var kWindowMetalAttribute: Int { get }
var kWindowNoTitleBarAttribute: Int { get }
var kWindowTexturedSquareCornersAttribute: Int { get }
var kWindowMetalNoContentSeparatorAttribute: Int { get }
var kWindowHasRoundBottomBarCornersAttribute: Int { get }
var kWindowDoesNotCycleAttribute: Int { get }
var kWindowNoUpdatesAttribute: Int { get }
var kWindowNoActivatesAttribute: Int { get }
var kWindowOpaqueForEventsAttribute: Int { get }
var kWindowCompositingAttribute: Int { get }
var kWindowNoShadowAttribute: Int { get }
var kWindowCanBeVisibleWithoutLoginAttribute: Int { get }
var kWindowHideOnSuspendAttribute: Int { get }
var kWindowAsyncDragAttribute: Int { get }
var kWindowStandardHandlerAttribute: Int { get }
var kWindowHideOnFullScreenAttribute: Int { get }
var kWindowInWindowMenuAttribute: Int { get }
var kWindowLiveResizeAttribute: Int { get }
var kWindowIgnoreClicksAttribute: Int { get }
var kWindowHighResolutionCapableAttribute: Int { get }
var kWindowStandardDocumentAttributes: Int { get }
var kWindowStandardFloatingAttributes: Int { get }
var kWindowNoConstrainAttribute: UInt32 { get }
typealias WindowAttributes = OptionBits
var kHIWindowBitFrameworkScaled: Int { get }
var kWindowFrameworkScaledAttribute: Int { get }
var kWindowDefProcType: Int { get }
var kStandardWindowDefinition: Int { get }
var kRoundWindowDefinition: Int { get }
var kFloatingWindowDefinition: Int { get }
var kDocumentWindowVariantCode: Int { get }
var kModalDialogVariantCode: Int { get }
var kPlainDialogVariantCode: Int { get }
var kShadowDialogVariantCode: Int { get }
var kMovableModalDialogVariantCode: Int { get }
var kAlertVariantCode: Int { get }
var kMovableAlertVariantCode: Int { get }
var kSideFloaterVariantCode: Int { get }
var documentProc: Int { get }
var dBoxProc: Int { get }
var plainDBox: Int { get }
var altDBoxProc: Int { get }
var noGrowDocProc: Int { get }
var movableDBoxProc: Int { get }
var zoomDocProc: Int { get }
var zoomNoGrow: Int { get }
var floatProc: Int { get }
var floatGrowProc: Int { get }
var floatZoomProc: Int { get }
var floatZoomGrowProc: Int { get }
var floatSideProc: Int { get }
var floatSideGrowProc: Int { get }
var floatSideZoomProc: Int { get }
var floatSideZoomGrowProc: Int { get }
var kWindowDocumentDefProcResID: Int { get }
var kWindowDialogDefProcResID: Int { get }
var kWindowUtilityDefProcResID: Int { get }
var kWindowUtilitySideTitleDefProcResID: Int { get }
var kWindowSheetDefProcResID: Int { get }
var kWindowSimpleDefProcResID: Int { get }
var kWindowSheetAlertDefProcResID: Int { get }
var kWindowDocumentProc: Int { get }
var kWindowGrowDocumentProc: Int { get }
var kWindowVertZoomDocumentProc: Int { get }
var kWindowVertZoomGrowDocumentProc: Int { get }
var kWindowHorizZoomDocumentProc: Int { get }
var kWindowHorizZoomGrowDocumentProc: Int { get }
var kWindowFullZoomDocumentProc: Int { get }
var kWindowFullZoomGrowDocumentProc: Int { get }
var kWindowPlainDialogProc: Int { get }
var kWindowShadowDialogProc: Int { get }
var kWindowModalDialogProc: Int { get }
var kWindowMovableModalDialogProc: Int { get }
var kWindowAlertProc: Int { get }
var kWindowMovableAlertProc: Int { get }
var kWindowMovableModalGrowProc: Int { get }
var kWindowFloatProc: Int { get }
var kWindowFloatGrowProc: Int { get }
var kWindowFloatVertZoomProc: Int { get }
var kWindowFloatVertZoomGrowProc: Int { get }
var kWindowFloatHorizZoomProc: Int { get }
var kWindowFloatHorizZoomGrowProc: Int { get }
var kWindowFloatFullZoomProc: Int { get }
var kWindowFloatFullZoomGrowProc: Int { get }
var kWindowFloatSideProc: Int { get }
var kWindowFloatSideGrowProc: Int { get }
var kWindowFloatSideVertZoomProc: Int { get }
var kWindowFloatSideVertZoomGrowProc: Int { get }
var kWindowFloatSideHorizZoomProc: Int { get }
var kWindowFloatSideHorizZoomGrowProc: Int { get }
var kWindowFloatSideFullZoomProc: Int { get }
var kWindowFloatSideFullZoomGrowProc: Int { get }
var kWindowSheetProc: Int { get }
var kWindowSheetAlertProc: Int { get }
var kWindowSimpleProc: Int { get }
var kWindowSimpleFrameProc: Int { get }
var kWindowOverlayProc: Int { get }
var kWindowNoPosition: Int { get }
var kWindowDefaultPosition: Int { get }
var kWindowCenterMainScreen: Int { get }
var kWindowAlertPositionMainScreen: Int { get }
var kWindowStaggerMainScreen: Int { get }
var kWindowCenterParentWindow: Int { get }
var kWindowAlertPositionParentWindow: Int { get }
var kWindowStaggerParentWindow: Int { get }
var kWindowCenterParentWindowScreen: Int { get }
var kWindowAlertPositionParentWindowScreen: Int { get }
var kWindowStaggerParentWindowScreen: Int { get }
typealias WindowPositionMethod = UInt32
var kWindowCenterOnMainScreen: Int { get }
var kWindowCenterOnParentWindow: Int { get }
var kWindowCenterOnParentWindowScreen: Int { get }
var kWindowCascadeOnMainScreen: Int { get }
var kWindowCascadeOnParentWindow: Int { get }
var kWindowCascadeOnParentWindowScreen: Int { get }
var kWindowCascadeStartAtParentWindowScreen: Int { get }
var kWindowAlertPositionOnMainScreen: Int { get }
var kWindowAlertPositionOnParentWindow: Int { get }
var kWindowAlertPositionOnParentWindowScreen: Int { get }
typealias WindowRegionCode = UInt16
var kWindowTitleBarRgn: Int { get }
var kWindowTitleTextRgn: Int { get }
var kWindowCloseBoxRgn: Int { get }
var kWindowZoomBoxRgn: Int { get }
var kWindowDragRgn: Int { get }
var kWindowGrowRgn: Int { get }
var kWindowCollapseBoxRgn: Int { get }
var kWindowTitleProxyIconRgn: Int { get }
var kWindowStructureRgn: Int { get }
var kWindowContentRgn: Int { get }
var kWindowUpdateRgn: Int { get }
var kWindowOpaqueRgn: Int { get }
var kWindowGlobalPortRgn: Int { get }
var kWindowToolbarButtonRgn: Int { get }
var dialogKind: Int { get }
var userKind: Int { get }
var kDialogWindowKind: Int { get }
var kApplicationWindowKind: Int { get }
typealias WindowPartCode = Int16
var inDesk: Int { get }
var inNoWindow: Int { get }
var inMenuBar: Int { get }
var inSysWindow: Int { get }
var inContent: Int { get }
var inDrag: Int { get }
var inGrow: Int { get }
var inGoAway: Int { get }
var inZoomIn: Int { get }
var inZoomOut: Int { get }
var inCollapseBox: Int { get }
var inProxyIcon: Int { get }
var inToolbarButton: Int { get }
var inStructure: Int { get }
typealias WindowDefPartCode = Int16
var wNoHit: Int { get }
var wInContent: Int { get }
var wInDrag: Int { get }
var wInGrow: Int { get }
var wInGoAway: Int { get }
var wInZoomIn: Int { get }
var wInZoomOut: Int { get }
var wInCollapseBox: Int { get }
var wInProxyIcon: Int { get }
var wInToolbarButton: Int { get }
var wInStructure: Int { get }
var kWindowCanGrow: Int { get }
var kWindowCanZoom: Int { get }
var kWindowCanCollapse: Int { get }
var kWindowIsModal: Int { get }
var kWindowCanGetWindowRegion: Int { get }
var kWindowIsAlert: Int { get }
var kWindowHasTitleBar: Int { get }
var kWindowSupportsDragHilite: Int { get }
var kWindowSupportsModifiedBit: Int { get }
var kWindowCanDrawInCurrentPort: Int { get }
var kWindowCanSetupProxyDragImage: Int { get }
var kWindowCanMeasureTitle: Int { get }
var kWindowWantsDisposeAtProcessDeath: Int { get }
var kWindowSupportsGetGrowImageRegion: Int { get }
var kWindowIsOpaque: Int { get }
var kWindowDefSupportsColorGrafPort: Int { get }
var kMouseUpOutOfSlop: Int { get }
struct WStateData {
  var userState: Rect
  var stdState: Rect
  init()
  init(userState: Rect, stdState: Rect)
}
typealias WStateDataPtr = UnsafeMutablePointer<WStateData>
typealias WStateDataHandle = UnsafeMutablePointer<WStateDataPtr>
typealias WindowDefUPP = UnsafeMutablePointer<Void>
var kWindowDefProcPtr: Int { get }
var kWindowDefObjectClass: Int { get }
var kWindowDefProcID: Int { get }
var kWindowDefHIView: Int { get }
typealias WindowDefType = UInt32
struct WindowDefSpec {
  struct __Unnamed_union_u {
    var defProc: WindowDefUPP
    var classRef: UnsafeMutablePointer<Void>
    var procID: Int16
    var rootView: UnsafeMutablePointer<Void>
    init(defProc: WindowDefUPP)
    init(classRef: UnsafeMutablePointer<Void>)
    init(procID: Int16)
    init(rootView: UnsafeMutablePointer<Void>)
    init()
  }
  var defType: WindowDefType
  var u: WindowDefSpec.__Unnamed_union_u
  init()
  init(defType: WindowDefType, u: WindowDefSpec.__Unnamed_union_u)
}
typealias WindowDefSpecPtr = UnsafeMutablePointer<WindowDefSpec>
var kHIWindowBackingLocationDefault: Int { get }
var kHIWindowBackingLocationVideoMemory: Int { get }
var kHIWindowBackingLocationMainMemory: Int { get }
typealias HIWindowBackingLocation = UInt32
var kHIWindowSharingNone: Int { get }
var kHIWindowSharingReadOnly: Int { get }
var kHIWindowSharingReadWrite: Int { get }
typealias HIWindowSharingType = UInt32
typealias WindowModality = UInt32
var kWindowModalityNone: Int { get }
var kWindowModalitySystemModal: Int { get }
var kWindowModalityAppModal: Int { get }
var kWindowModalityWindowModal: Int { get }
typealias WindowGroupRef = COpaquePointer
typealias WindowGroupAttributes = UInt32
var kWindowGroupAttrSelectAsLayer: Int { get }
var kWindowGroupAttrMoveTogether: Int { get }
var kWindowGroupAttrLayerTogether: Int { get }
var kWindowGroupAttrSharedActivation: Int { get }
var kWindowGroupAttrHideOnCollapse: Int { get }
var kWindowGroupAttrFixedLevel: Int { get }
typealias WindowActivationScope = UInt32
var kWindowActivationScopeNone: Int { get }
var kWindowActivationScopeIndependent: Int { get }
var kWindowActivationScopeAll: Int { get }
var kNextWindowGroup: Int { get }
var kPreviousWindowGroup: Int { get }
typealias WindowGroupContentOptions = UInt32
var kWindowGroupContentsReturnWindows: Int { get }
var kWindowGroupContentsRecurse: Int { get }
var kWindowGroupContentsVisible: Int { get }
var kWindowGroupLevelActive: Int { get }
var kWindowGroupLevelInactive: Int { get }
var kWindowGroupLevelPromoted: Int { get }
var kHIWindowDepthInvalid: Int { get }
var kHIWindowDepth32Bit: Int { get }
var kHIWindowDepth64Bit: Int { get }
var kHIWindowDepthFloat: Int { get }
typealias HIWindowDepth = UInt32
typealias ScrollWindowOptions = UInt32
var kScrollWindowNoOptions: Int { get }
var kScrollWindowInvalidate: Int { get }
var kScrollWindowEraseToPortBackground: Int { get }
var kHIWindowIgnoreObscuringWindows: Int { get }
var kWindowMenuIncludeRotate: Int { get }
var kHIWindowMenuCreator: Int { get }
var kHIWindowMenuWindowTag: Int { get }
typealias WindowTransitionEffect = UInt32
var kWindowZoomTransitionEffect: Int { get }
var kWindowSheetTransitionEffect: Int { get }
var kWindowSlideTransitionEffect: Int { get }
var kWindowFadeTransitionEffect: Int { get }
var kWindowGenieTransitionEffect: Int { get }
typealias WindowTransitionAction = UInt32
var kWindowShowTransitionAction: Int { get }
var kWindowHideTransitionAction: Int { get }
var kWindowMoveTransitionAction: Int { get }
var kWindowResizeTransitionAction: Int { get }
struct TransitionWindowOptions {
  var version: UInt32
  var duration: EventTime
  var window: WindowRef
  var userData: UnsafeMutablePointer<Void>
  init()
  init(version: UInt32, duration: EventTime, window: WindowRef, userData: UnsafeMutablePointer<Void>)
}
typealias WindowConstrainOptions = UInt32
var kWindowConstrainMayResize: Int { get }
var kWindowConstrainMoveRegardlessOfFit: Int { get }
var kWindowConstrainAllowPartial: Int { get }
var kWindowConstrainCalcOnly: Int { get }
var kWindowConstrainUseTransitionWindow: Int { get }
var kWindowConstrainMoveMinimum: Int { get }
var kWindowConstrainUseSpecifiedBounds: Int { get }
var kWindowConstrainStandardOptions: Int { get }
typealias WindowLatentVisibility = UInt32
var kWindowLatentVisibleFloater: Int { get }
var kWindowLatentVisibleSuspend: Int { get }
var kWindowLatentVisibleFullScreen: Int { get }
var kWindowLatentVisibleAppHidden: Int { get }
var kWindowLatentVisibleCollapsedOwner: Int { get }
var kWindowLatentVisibleCollapsedGroup: Int { get }
var kHIWindowBehaviorTransient: Int { get }
var kHIWindowBehaviorStationary: Int { get }
var kHIWindowCanJoinAllSpaces: Int { get }
var kHIWindowMoveToActiveSpace: Int { get }
var kHIWindowExposeHidden: Int { get }
var kHIWindowVisibleInAllSpaces: Int { get }
typealias HIWindowAvailability = OptionBits
var kWindowEdgeDefault: Int { get }
var kWindowEdgeTop: Int { get }
var kWindowEdgeLeft: Int { get }
var kWindowEdgeBottom: Int { get }
var kWindowEdgeRight: Int { get }
var kWindowDrawerOpening: Int { get }
var kWindowDrawerOpen: Int { get }
var kWindowDrawerClosing: Int { get }
var kWindowDrawerClosed: Int { get }
typealias WindowDrawerState = UInt32
var kHIToolbarViewDrawBackgroundTag: Int { get }
typealias HIWindowScaleMode = UInt32
var kHIWindowScaleModeUnscaled: Int { get }
var kHIWindowScaleModeMagnified: Int { get }
var kHIWindowScaleModeFrameworkScaled: Int { get }
struct HIContentBorderMetrics {
  var top: CGFloat
  var left: CGFloat
  var bottom: CGFloat
  var right: CGFloat
  init()
  init(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat)
}
var kWindowPropertyPersistent: Int { get }
var kWindowMsgDraw: Int { get }
var kWindowMsgHitTest: Int { get }
var kWindowMsgCalculateShape: Int { get }
var kWindowMsgInitialize: Int { get }
var kWindowMsgCleanUp: Int { get }
var kWindowMsgDrawGrowOutline: Int { get }
var kWindowMsgDrawGrowBox: Int { get }
var kWindowMsgGetFeatures: Int { get }
var kWindowMsgGetRegion: Int { get }
var kWindowMsgDragHilite: Int { get }
var kWindowMsgModified: Int { get }
var kWindowMsgDrawInCurrentPort: Int { get }
var kWindowMsgSetupProxyDragImage: Int { get }
var kWindowMsgStateChanged: Int { get }
var kWindowMsgMeasureTitle: Int { get }
var kWindowMsgGetGrowImageRegion: Int { get }
var wDraw: Int { get }
var wHit: Int { get }
var wCalcRgns: Int { get }
var wNew: Int { get }
var wDispose: Int { get }
var wGrow: Int { get }
var wDrawGIcon: Int { get }
var kWindowStateTitleChanged: Int { get }
struct SetupWindowProxyDragImageRec {
  var imageGWorld: GWorldPtr
  var imageRgn: RgnHandle
  var outlineRgn: RgnHandle
  init()
  init(imageGWorld: GWorldPtr, imageRgn: RgnHandle, outlineRgn: RgnHandle)
}
struct MeasureWindowTitleRec {
  var fullTitleWidth: Int16
  var titleTextWidth: Int16
  var isUnicodeTitle: DarwinBoolean
  var unused: DarwinBoolean
  init()
  init(fullTitleWidth: Int16, titleTextWidth: Int16, isUnicodeTitle: DarwinBoolean, unused: DarwinBoolean)
}
typealias MeasureWindowTitleRecPtr = UnsafeMutablePointer<MeasureWindowTitleRec>
struct GetGrowImageRegionRec {
  var growRect: Rect
  var growImageRegion: RgnHandle
  init()
  init(growRect: Rect, growImageRegion: RgnHandle)
}
struct GetWindowRegionRec {
  var winRgn: RgnHandle
  var regionCode: WindowRegionCode
  init()
  init(winRgn: RgnHandle, regionCode: WindowRegionCode)
}
typealias GetWindowRegionPtr = UnsafeMutablePointer<GetWindowRegionRec>
typealias GetWindowRegionRecPtr = UnsafeMutablePointer<GetWindowRegionRec>
var deskPatID: Int { get }
var wContentColor: Int { get }
var wFrameColor: Int { get }
var wTextColor: Int { get }
var wHiliteColor: Int { get }
var wTitleBarColor: Int { get }
struct WinCTab {
  var wCSeed: Int
  var wCReserved: Int16
  var ctSize: Int16
  var ctTable: (ColorSpec, ColorSpec, ColorSpec, ColorSpec, ColorSpec)
  init()
  init(wCSeed: Int, wCReserved: Int16, ctSize: Int16, ctTable: (ColorSpec, ColorSpec, ColorSpec, ColorSpec, ColorSpec))
}
typealias WCTabPtr = UnsafeMutablePointer<WinCTab>
typealias WCTabHandle = UnsafeMutablePointer<WCTabPtr>
var kWindowDefinitionVersionOne: Int { get }
var kWindowDefinitionVersionTwo: Int { get }
var kWindowIsCollapsedState: Int { get }
struct BasicWindowDescription {
  struct __Unnamed_union_windowDefinition {
    struct __Unnamed_struct_versionOne {
      var windowDefProc: Int16
      var windowHasCloseBox: DarwinBoolean
      init()
      init(windowDefProc: Int16, windowHasCloseBox: DarwinBoolean)
    }
    struct __Unnamed_struct_versionTwo {
      var windowClass: WindowClass
      var windowAttributes: WindowAttributes
      init()
      init(windowClass: WindowClass, windowAttributes: WindowAttributes)
    }
    var versionOne: BasicWindowDescription.__Unnamed_union_windowDefinition.__Unnamed_struct_versionOne
    var versionTwo: BasicWindowDescription.__Unnamed_union_windowDefinition.__Unnamed_struct_versionTwo
    init(versionOne: BasicWindowDescription.__Unnamed_union_windowDefinition.__Unnamed_struct_versionOne)
    init(versionTwo: BasicWindowDescription.__Unnamed_union_windowDefinition.__Unnamed_struct_versionTwo)
    init()
  }
  var descriptionSize: UInt32
  var windowContentRect: Rect
  var windowZoomRect: Rect
  var windowRefCon: URefCon
  var windowStateFlags: UInt32
  var windowPositionMethod: WindowPositionMethod
  var windowDefinitionVersion: UInt32
  var windowDefinition: BasicWindowDescription.__Unnamed_union_windowDefinition
  init()
  init(descriptionSize: UInt32, windowContentRect: Rect, windowZoomRect: Rect, windowRefCon: URefCon, windowStateFlags: UInt32, windowPositionMethod: WindowPositionMethod, windowDefinitionVersion: UInt32, windowDefinition: BasicWindowDescription.__Unnamed_union_windowDefinition)
}
var kStoredWindowSystemTag: Int { get }
var kStoredBasicWindowDescriptionID: Int { get }
var kStoredWindowPascalTitleID: Int { get }
var kStoredWindowTitleCFStringID: Int { get }
typealias DeskHookProcPtr = @convention(c) (DarwinBoolean, UnsafeMutablePointer<EventRecord>) -> Void
typealias WindowPaintProcPtr = @convention(c) (GDHandle, GrafPtr, WindowRef, RgnHandle, RgnHandle, UnsafeMutablePointer<Void>) -> OSStatus
typealias DeskHookUPP = DeskHookProcPtr
typealias WindowPaintUPP = WindowPaintProcPtr
var kWindowPaintProcOptionsNone: Int { get }
typealias WindowPaintProcOptions = OptionBits
var kWindowGroupAttrSelectable: Int { get }
var kWindowGroupAttrPositionFixed: Int { get }
var kWindowGroupAttrZOrderFixed: Int { get }
var textMenuProc: Int { get }
var kHIMenuAppendItem: Int { get }
var noMark: Int { get }
var kMenuStdMenuProc: Int { get }
var kMenuStdMenuBarProc: Int { get }
var kMenuNoModifiers: Int { get }
var kMenuShiftModifier: Int { get }
var kMenuOptionModifier: Int { get }
var kMenuControlModifier: Int { get }
var kMenuNoCommandModifier: Int { get }
var kMenuNoIcon: Int { get }
var kMenuIconType: Int { get }
var kMenuShrinkIconType: Int { get }
var kMenuSmallIconType: Int { get }
var kMenuColorIconType: Int { get }
var kMenuIconSuiteType: Int { get }
var kMenuIconRefType: Int { get }
var kMenuCGImageRefType: Int { get }
var kMenuSystemIconSelectorType: Int { get }
var kMenuIconResourceType: Int { get }
var kMenuNullGlyph: Int { get }
var kMenuTabRightGlyph: Int { get }
var kMenuTabLeftGlyph: Int { get }
var kMenuEnterGlyph: Int { get }
var kMenuShiftGlyph: Int { get }
var kMenuControlGlyph: Int { get }
var kMenuOptionGlyph: Int { get }
var kMenuSpaceGlyph: Int { get }
var kMenuDeleteRightGlyph: Int { get }
var kMenuReturnGlyph: Int { get }
var kMenuReturnR2LGlyph: Int { get }
var kMenuNonmarkingReturnGlyph: Int { get }
var kMenuPencilGlyph: Int { get }
var kMenuDownwardArrowDashedGlyph: Int { get }
var kMenuCommandGlyph: Int { get }
var kMenuCheckmarkGlyph: Int { get }
var kMenuDiamondGlyph: Int { get }
var kMenuAppleLogoFilledGlyph: Int { get }
var kMenuParagraphKoreanGlyph: Int { get }
var kMenuDeleteLeftGlyph: Int { get }
var kMenuLeftArrowDashedGlyph: Int { get }
var kMenuUpArrowDashedGlyph: Int { get }
var kMenuRightArrowDashedGlyph: Int { get }
var kMenuEscapeGlyph: Int { get }
var kMenuClearGlyph: Int { get }
var kMenuLeftDoubleQuotesJapaneseGlyph: Int { get }
var kMenuRightDoubleQuotesJapaneseGlyph: Int { get }
var kMenuTrademarkJapaneseGlyph: Int { get }
var kMenuBlankGlyph: Int { get }
var kMenuPageUpGlyph: Int { get }
var kMenuCapsLockGlyph: Int { get }
var kMenuLeftArrowGlyph: Int { get }
var kMenuRightArrowGlyph: Int { get }
var kMenuNorthwestArrowGlyph: Int { get }
var kMenuHelpGlyph: Int { get }
var kMenuUpArrowGlyph: Int { get }
var kMenuSoutheastArrowGlyph: Int { get }
var kMenuDownArrowGlyph: Int { get }
var kMenuPageDownGlyph: Int { get }
var kMenuAppleLogoOutlineGlyph: Int { get }
var kMenuContextualMenuGlyph: Int { get }
var kMenuPowerGlyph: Int { get }
var kMenuF1Glyph: Int { get }
var kMenuF2Glyph: Int { get }
var kMenuF3Glyph: Int { get }
var kMenuF4Glyph: Int { get }
var kMenuF5Glyph: Int { get }
var kMenuF6Glyph: Int { get }
var kMenuF7Glyph: Int { get }
var kMenuF8Glyph: Int { get }
var kMenuF9Glyph: Int { get }
var kMenuF10Glyph: Int { get }
var kMenuF11Glyph: Int { get }
var kMenuF12Glyph: Int { get }
var kMenuF13Glyph: Int { get }
var kMenuF14Glyph: Int { get }
var kMenuF15Glyph: Int { get }
var kMenuControlISOGlyph: Int { get }
var kMenuEjectGlyph: Int { get }
var kMenuEisuGlyph: Int { get }
var kMenuKanaGlyph: Int { get }
var kMenuF16Glyph: Int { get }
var kMenuF17Glyph: Int { get }
var kMenuF18Glyph: Int { get }
var kMenuF19Glyph: Int { get }
typealias MenuAttributes = UInt32
var kMenuAttrExcludesMarkColumn: Int { get }
var kMenuAttrAutoDisable: Int { get }
var kMenuAttrUsePencilGlyph: Int { get }
var kMenuAttrHidden: Int { get }
var kMenuAttrCondenseSeparators: Int { get }
var kMenuAttrDoNotCacheImage: Int { get }
var kMenuAttrDoNotUseUserCommandKeys: Int { get }
typealias MenuItemAttributes = UInt32
var kMenuItemAttrDisabled: Int { get }
var kMenuItemAttrIconDisabled: Int { get }
var kMenuItemAttrSubmenuParentChoosable: Int { get }
var kMenuItemAttrDynamic: Int { get }
var kMenuItemAttrNotPreviousAlternate: Int { get }
var kMenuItemAttrHidden: Int { get }
var kMenuItemAttrSeparator: Int { get }
var kMenuItemAttrSectionHeader: Int { get }
var kMenuItemAttrIgnoreMeta: Int { get }
var kMenuItemAttrAutoRepeat: Int { get }
var kMenuItemAttrUseVirtualKey: Int { get }
var kMenuItemAttrCustomDraw: Int { get }
var kMenuItemAttrIncludeInCmdKeyMatching: Int { get }
var kMenuItemAttrAutoDisable: Int { get }
var kMenuItemAttrUpdateSingleItem: Int { get }
typealias MenuTrackingMode = UInt32
var kMenuTrackingModeMouse: Int { get }
var kMenuTrackingModeKeyboard: Int { get }
typealias MenuEventOptions = UInt32
var kMenuEventIncludeDisabledItems: Int { get }
var kMenuEventQueryOnly: Int { get }
var kMenuEventDontCheckSubmenus: Int { get }
typealias MenuID = Int16
typealias MenuItemIndex = UInt16
typealias MenuCommand = OSType
typealias MenuRef = Menu
class Menu {
}
typealias MenuHandle = MenuRef
typealias MenuBarHandle = Handle
struct MenuBarHeader {
  var lastMenu: UInt16
  var lastRight: Int16
  var mbResID: Int16
  init()
  init(lastMenu: UInt16, lastRight: Int16, mbResID: Int16)
}
struct HMenuBarHeader {
  var lastHMenu: UInt16
  var menuTitleBits: PixMapHandle
  init()
  init(lastHMenu: UInt16, menuTitleBits: PixMapHandle)
}
struct MenuBarMenu {
  var menu: Unmanaged<Menu>!
  var menuLeft: Int16
  init()
  init(menu: Unmanaged<Menu>!, menuLeft: Int16)
}
struct HMenuBarMenu {
  var menu: Unmanaged<Menu>!
  var reserved: Int16
  init()
  init(menu: Unmanaged<Menu>!, reserved: Int16)
}
struct MenuTrackingData {
  var menu: Unmanaged<Menu>!
  var itemSelected: MenuItemIndex
  var itemUnderMouse: MenuItemIndex
  var itemRect: Rect
  var virtualMenuTop: Int32
  var virtualMenuBottom: Int32
  init()
  init(menu: Unmanaged<Menu>!, itemSelected: MenuItemIndex, itemUnderMouse: MenuItemIndex, itemRect: Rect, virtualMenuTop: Int32, virtualMenuBottom: Int32)
}
typealias MenuTrackingDataPtr = UnsafeMutablePointer<MenuTrackingData>
var kMenuItemDataText: Int { get }
var kMenuItemDataMark: Int { get }
var kMenuItemDataCmdKey: Int { get }
var kMenuItemDataCmdKeyGlyph: Int { get }
var kMenuItemDataCmdKeyModifiers: Int { get }
var kMenuItemDataStyle: Int { get }
var kMenuItemDataEnabled: Int { get }
var kMenuItemDataIconEnabled: Int { get }
var kMenuItemDataIconID: Int { get }
var kMenuItemDataIconHandle: Int { get }
var kMenuItemDataCommandID: Int { get }
var kMenuItemDataTextEncoding: Int { get }
var kMenuItemDataSubmenuID: Int { get }
var kMenuItemDataSubmenuHandle: Int { get }
var kMenuItemDataFontID: Int { get }
var kMenuItemDataRefcon: Int { get }
var kMenuItemDataAttributes: Int { get }
var kMenuItemDataCFString: Int { get }
var kMenuItemDataProperties: Int { get }
var kMenuItemDataIndent: Int { get }
var kMenuItemDataCmdVirtualKey: Int { get }
var kMenuItemDataAttributedText: Int { get }
var kMenuItemDataFont: Int { get }
var kMenuItemDataAllDataVersionOne: Int { get }
var kMenuItemDataAllDataVersionTwo: Int { get }
var kMenuItemDataAllDataVersionThree: Int { get }
typealias MenuItemDataFlags = UInt64
struct MenuItemDataRec {
  var whichData: MenuItemDataFlags
  var text: StringPtr
  var mark: UniChar
  var cmdKey: UniChar
  var cmdKeyGlyph: UInt32
  var cmdKeyModifiers: UInt32
  var style: Style
  var enabled: DarwinBoolean
  var iconEnabled: DarwinBoolean
  var filler1: UInt8
  var iconID: Int32
  var iconType: UInt32
  var iconHandle: Handle
  var cmdID: MenuCommand
  var encoding: TextEncoding
  var submenuID: MenuID
  var submenuHandle: Unmanaged<Menu>!
  var fontID: Int32
  var refcon: URefCon
  var attr: OptionBits
  var cfText: Unmanaged<CFString>!
  var properties: Collection
  var indent: UInt32
  var cmdVirtualKey: UInt16
  var attributedText: Unmanaged<CFAttributedString>!
  var font: Unmanaged<CTFont>!
  init()
  init(whichData: MenuItemDataFlags, text: StringPtr, mark: UniChar, cmdKey: UniChar, cmdKeyGlyph: UInt32, cmdKeyModifiers: UInt32, style: Style, enabled: DarwinBoolean, iconEnabled: DarwinBoolean, filler1: UInt8, iconID: Int32, iconType: UInt32, iconHandle: Handle, cmdID: MenuCommand, encoding: TextEncoding, submenuID: MenuID, submenuHandle: Unmanaged<Menu>!, fontID: Int32, refcon: URefCon, attr: OptionBits, cfText: Unmanaged<CFString>!, properties: Collection, indent: UInt32, cmdVirtualKey: UInt16, attributedText: Unmanaged<CFAttributedString>!, font: Unmanaged<CTFont>!)
}
typealias MenuItemDataPtr = UnsafeMutablePointer<MenuItemDataRec>
typealias MenuItemID = UInt32
var kMenuDefProcPtr: Int { get }
var kMenuDefClassID: Int { get }
typealias MenuDefType = UInt32
typealias MenuDefUPP = UnsafeMutablePointer<Void>
struct MenuDefSpec {
  struct __Unnamed_union_u {
    struct __Unnamed_struct_view {
      var classID: Unmanaged<CFString>!
      var initEvent: EventRef
      init()
      init(classID: Unmanaged<CFString>!, initEvent: EventRef)
    }
    var defProc: MenuDefUPP
    var view: MenuDefSpec.__Unnamed_union_u.__Unnamed_struct_view
    init(defProc: MenuDefUPP)
    init(view: MenuDefSpec.__Unnamed_union_u.__Unnamed_struct_view)
    init()
  }
  var defType: MenuDefType
  var u: MenuDefSpec.__Unnamed_union_u
  init()
  init(defType: MenuDefType, u: MenuDefSpec.__Unnamed_union_u)
}
typealias MenuDefSpecPtr = UnsafeMutablePointer<MenuDefSpec>
var kHIMenuDismissedBySelection: Int { get }
var kHIMenuDismissedByUserCancel: Int { get }
var kHIMenuDismissedByMouseDown: Int { get }
var kHIMenuDismissedByMouseUp: Int { get }
var kHIMenuDismissedByKeyEvent: Int { get }
var kHIMenuDismissedByAppSwitch: Int { get }
var kHIMenuDismissedByTimeout: Int { get }
var kHIMenuDismissedByCancelMenuTracking: Int { get }
var kHIMenuDismissedByActivationChange: Int { get }
var kHIMenuDismissedByFocusChange: Int { get }
var kMenuPropertyPersistent: Int { get }
func GetMenuTrackingData(theMenu: Menu!, _ outData: UnsafeMutablePointer<MenuTrackingData>) -> OSStatus
var kHierarchicalFontMenuOption: Int { get }
var gestaltContextualMenuAttr: Int { get }
var gestaltContextualMenuUnusedBit: Int { get }
var gestaltContextualMenuTrapAvailable: Int { get }
var gestaltContextualMenuHasAttributeAndModifierKeys: Int { get }
var gestaltContextualMenuHasUnicodeSupport: Int { get }
var kCMHelpItemNoHelp: Int { get }
var kCMHelpItemAppleGuide: Int { get }
var kCMHelpItemOtherHelp: Int { get }
var kCMHelpItemRemoveHelp: Int { get }
var kCMNothingSelected: Int { get }
var kCMMenuItemSelected: Int { get }
var kCMShowHelpSelected: Int { get }
var keyContextualMenuName: Int { get }
var keyContextualMenuCommandID: Int { get }
var keyContextualMenuSubmenu: Int { get }
var keyContextualMenuAttributes: Int { get }
var keyContextualMenuModifiers: Int { get }
struct ContextualMenuInterfaceStruct {
  var _reserved: UnsafeMutablePointer<Void>
  var QueryInterface: (@convention(c) (UnsafeMutablePointer<Void>, CFUUIDBytes, UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Int32)!
  var AddRef: (@convention(c) (UnsafeMutablePointer<Void>) -> UInt32)!
  var Release: (@convention(c) (UnsafeMutablePointer<Void>) -> UInt32)!
  var ExamineContext: (@convention(c) (UnsafeMutablePointer<Void>, UnsafePointer<AEDesc>, UnsafeMutablePointer<AEDescList>) -> OSStatus)!
  var HandleSelection: (@convention(c) (UnsafeMutablePointer<Void>, UnsafeMutablePointer<AEDesc>, Int32) -> OSStatus)!
  var PostMenuCleanup: (@convention(c) (UnsafeMutablePointer<Void>) -> Void)!
  init()
  init(_reserved: UnsafeMutablePointer<Void>, QueryInterface: (@convention(c) (UnsafeMutablePointer<Void>, CFUUIDBytes, UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Int32)!, AddRef: (@convention(c) (UnsafeMutablePointer<Void>) -> UInt32)!, Release: (@convention(c) (UnsafeMutablePointer<Void>) -> UInt32)!, ExamineContext: (@convention(c) (UnsafeMutablePointer<Void>, UnsafePointer<AEDesc>, UnsafeMutablePointer<AEDescList>) -> OSStatus)!, HandleSelection: (@convention(c) (UnsafeMutablePointer<Void>, UnsafeMutablePointer<AEDesc>, Int32) -> OSStatus)!, PostMenuCleanup: (@convention(c) (UnsafeMutablePointer<Void>) -> Void)!)
}
func CMPluginExamineContext(thisInstance: UnsafeMutablePointer<Void>, _ inContext: UnsafePointer<AEDesc>, _ outCommandPairs: UnsafeMutablePointer<AEDescList>) -> OSStatus
func CMPluginHandleSelection(thisInstance: UnsafeMutablePointer<Void>, _ inContext: UnsafeMutablePointer<AEDesc>, _ inCommandID: Int32) -> OSStatus
func CMPluginPostMenuCleanup(thisInstance: UnsafeMutablePointer<Void>)
var kMenuDrawMsg: Int { get }
var kMenuSizeMsg: Int { get }
var kMenuPopUpMsg: Int { get }
var kMenuCalcItemMsg: Int { get }
var kMenuThemeSavvyMsg: Int { get }
var kMenuInitMsg: Int { get }
var kMenuDisposeMsg: Int { get }
var kMenuFindItemMsg: Int { get }
var kMenuHiliteItemMsg: Int { get }
var kMenuDrawItemsMsg: Int { get }
var mDrawMsg: Int { get }
var mSizeMsg: Int { get }
var mPopUpMsg: Int { get }
var mCalcItemMsg: Int { get }
var kThemeSavvyMenuResponse: Int { get }
struct MDEFHiliteItemData {
  var previousItem: MenuItemIndex
  var newItem: MenuItemIndex
  var context: UnsafeMutablePointer<Void>
  init()
  init(previousItem: MenuItemIndex, newItem: MenuItemIndex, context: UnsafeMutablePointer<Void>)
}
typealias MDEFHiliteItemDataPtr = UnsafeMutablePointer<MDEFHiliteItemData>
typealias HiliteMenuItemData = MDEFHiliteItemData
typealias HiliteMenuItemDataPtr = MDEFHiliteItemDataPtr
struct MDEFDrawData {
  var trackingData: MenuTrackingData
  var context: UnsafeMutablePointer<Void>
  init()
  init(trackingData: MenuTrackingData, context: UnsafeMutablePointer<Void>)
}
typealias MDEFDrawDataPtr = UnsafeMutablePointer<MDEFDrawData>
struct MDEFFindItemData {
  var trackingData: MenuTrackingData
  var context: UnsafeMutablePointer<Void>
  init()
  init(trackingData: MenuTrackingData, context: UnsafeMutablePointer<Void>)
}
typealias MDEFFindItemDataPtr = UnsafeMutablePointer<MDEFFindItemData>
struct MDEFDrawItemsData {
  var firstItem: MenuItemIndex
  var lastItem: MenuItemIndex
  var trackingData: UnsafeMutablePointer<MenuTrackingData>
  var context: UnsafeMutablePointer<Void>
  init()
  init(firstItem: MenuItemIndex, lastItem: MenuItemIndex, trackingData: UnsafeMutablePointer<MenuTrackingData>, context: UnsafeMutablePointer<Void>)
}
typealias MDEFDrawItemsDataPtr = UnsafeMutablePointer<MDEFDrawItemsData>
var mctAllItems: Int { get }
var mctLastIDIndic: Int { get }
struct MCEntry {
  var mctID: MenuID
  var mctItem: Int16
  var mctRGB1: RGBColor
  var mctRGB2: RGBColor
  var mctRGB3: RGBColor
  var mctRGB4: RGBColor
  var mctReserved: Int16
  init()
  init(mctID: MenuID, mctItem: Int16, mctRGB1: RGBColor, mctRGB2: RGBColor, mctRGB3: RGBColor, mctRGB4: RGBColor, mctReserved: Int16)
}
typealias MCEntryPtr = UnsafeMutablePointer<MCEntry>
typealias MCTable = (MCEntry)
typealias MCTablePtr = UnsafeMutablePointer<MCEntry>
typealias MCTableHandle = UnsafeMutablePointer<MCTablePtr>
struct MenuCRsrc {
  var numEntries: Int16
  var mcEntryRecs: MCTable
  init()
  init(numEntries: Int16, mcEntryRecs: MCTable)
}
typealias MenuCRsrcPtr = UnsafeMutablePointer<MenuCRsrc>
typealias MenuCRsrcHandle = UnsafeMutablePointer<MenuCRsrcPtr>
var hMenuCmd: Int { get }
var kInsertHierarchicalMenu: Int { get }
var hierMenu: Int { get }
typealias MenuBarDefProcPtr = @convention(c) (Int16, Int16, Int16, Int) -> Int
typealias MenuHookProcPtr = @convention(c) () -> Void
typealias MBarHookProcPtr = @convention(c) (UnsafeMutablePointer<Rect>) -> Int16
typealias MenuBarDefUPP = MenuBarDefProcPtr
typealias MenuHookUPP = MenuHookProcPtr
typealias MBarHookUPP = MBarHookProcPtr
typealias NMRecPtr = UnsafeMutablePointer<NMRec>
typealias NMProcPtr = @convention(c) (NMRecPtr) -> Void
typealias NMUPP = NMProcPtr
struct NMRec {
  var qLink: QElemPtr
  var qType: Int16
  var nmFlags: Int16
  var nmPrivate: SRefCon
  var nmReserved: Int16
  var nmMark: Int16
  var nmIcon: Handle
  var nmSound: Handle
  var nmStr: StringPtr
  var nmResp: NMUPP!
  var nmRefCon: SRefCon
  init()
  init(qLink: QElemPtr, qType: Int16, nmFlags: Int16, nmPrivate: SRefCon, nmReserved: Int16, nmMark: Int16, nmIcon: Handle, nmSound: Handle, nmStr: StringPtr, nmResp: NMUPP!, nmRefCon: SRefCon)
}
func NewNMUPP(userRoutine: NMProcPtr!) -> NMUPP!
func DisposeNMUPP(userUPP: NMUPP!)
func InvokeNMUPP(nmReqPtr: NMRecPtr, _ userUPP: NMUPP!)
typealias ScrapFlavorType = FourCharCode
var kScrapFlavorTypePicture: Int { get }
var kScrapFlavorTypeText: Int { get }
var kScrapFlavorTypeTextStyle: Int { get }
var kScrapFlavorTypeMovie: Int { get }
var kScrapFlavorTypeSound: Int { get }
var kScrapFlavorTypeUnicode: Int { get }
var kScrapFlavorTypeUTF16External: Int { get }
var kScrapFlavorTypeUnicodeStyle: Int { get }
var kScrapFlavorSizeUnknown: Int { get }
var kScrapReservedFlavorType: Int { get }
var kScrapFlavorMaskNone: Int { get }
var kScrapFlavorMaskSenderOnly: Int { get }
var kScrapFlavorMaskTranslated: Int { get }
typealias ScrapFlavorFlags = UInt32
struct ScrapFlavorInfo {
  var flavorType: ScrapFlavorType
  var flavorFlags: ScrapFlavorFlags
  init()
  init(flavorType: ScrapFlavorType, flavorFlags: ScrapFlavorFlags)
}
typealias ScrapRef = COpaquePointer
var kScrapClipboardScrap: String { get }
var kScrapFindScrap: String { get }
var kScrapGetNamedScrap: Int { get }
var kScrapClearNamedScrap: Int { get }
typealias ScrapPromiseKeeperProcPtr = @convention(c) (ScrapRef, ScrapFlavorType, UnsafeMutablePointer<Void>) -> OSStatus
typealias ScrapPromiseKeeperUPP = ScrapPromiseKeeperProcPtr
typealias TEPtr = UnsafeMutablePointer<TERec>
typealias TEHandle = UnsafeMutablePointer<TEPtr>
typealias HighHookProcPtr = @convention(c) (UnsafePointer<Rect>, TEPtr) -> Void
typealias EOLHookProcPtr = @convention(c) (Int8, TEPtr, TEHandle) -> DarwinBoolean
typealias CaretHookProcPtr = @convention(c) (UnsafePointer<Rect>, TEPtr) -> Void
typealias WidthHookProcPtr = @convention(c) (UInt16, UInt16, UnsafeMutablePointer<Void>, TEPtr, TEHandle) -> UInt16
typealias TextWidthHookProcPtr = @convention(c) (UInt16, UInt16, UnsafeMutablePointer<Void>, TEPtr, TEHandle) -> UInt16
typealias NWidthHookProcPtr = @convention(c) (UInt16, UInt16, Int16, Int16, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Int16>, TEPtr, TEHandle) -> UInt16
typealias DrawHookProcPtr = @convention(c) (UInt16, UInt16, UnsafeMutablePointer<Void>, TEPtr, TEHandle) -> Void
typealias HitTestHookProcPtr = @convention(c) (UInt16, UInt16, UInt16, UnsafeMutablePointer<Void>, TEPtr, TEHandle, UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<DarwinBoolean>) -> DarwinBoolean
typealias TEFindWordProcPtr = @convention(c) (UInt16, Int16, TEPtr, TEHandle, UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<UInt16>) -> Void
typealias TERecalcProcPtr = @convention(c) (TEPtr, UInt16, UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<UInt16>) -> Void
typealias TEDoTextProcPtr = @convention(c) (TEPtr, UInt16, UInt16, Int16, UnsafeMutablePointer<GrafPtr>, UnsafeMutablePointer<Int16>) -> Void
typealias TEClickLoopProcPtr = @convention(c) (TEPtr) -> DarwinBoolean
typealias WordBreakProcPtr = @convention(c) (Ptr, Int16) -> DarwinBoolean
typealias HighHookUPP = HighHookProcPtr
typealias EOLHookUPP = EOLHookProcPtr
typealias CaretHookUPP = CaretHookProcPtr
typealias WidthHookUPP = WidthHookProcPtr
typealias TextWidthHookUPP = TextWidthHookProcPtr
typealias NWidthHookUPP = NWidthHookProcPtr
typealias DrawHookUPP = DrawHookProcPtr
typealias HitTestHookUPP = HitTestHookProcPtr
typealias TEFindWordUPP = TEFindWordProcPtr
typealias TERecalcUPP = TERecalcProcPtr
typealias TEDoTextUPP = TEDoTextProcPtr
typealias TEClickLoopUPP = TEClickLoopProcPtr
typealias WordBreakUPP = WordBreakProcPtr
struct TERec {
  var destRect: Rect
  var viewRect: Rect
  var selRect: Rect
  var lineHeight: Int16
  var fontAscent: Int16
  var selPoint: Point
  var selStart: Int16
  var selEnd: Int16
  var active: Int16
  var wordBreak: WordBreakUPP!
  var clickLoop: TEClickLoopUPP!
  var clickTime: Int
  var clickLoc: Int16
  var caretTime: Int
  var caretState: Int16
  var just: Int16
  var teLength: Int16
  var hText: Handle
  var hDispatchRec: Int
  var clikStuff: Int16
  var crOnly: Int16
  var txFont: Int16
  var txFace: StyleField
  var txMode: Int16
  var txSize: Int16
  var inPort: GrafPtr
  var highHook: HighHookUPP!
  var caretHook: CaretHookUPP!
  var nLines: Int16
  var lineStarts: (Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16)
  init()
  init(destRect: Rect, viewRect: Rect, selRect: Rect, lineHeight: Int16, fontAscent: Int16, selPoint: Point, selStart: Int16, selEnd: Int16, active: Int16, wordBreak: WordBreakUPP!, clickLoop: TEClickLoopUPP!, clickTime: Int, clickLoc: Int16, caretTime: Int, caretState: Int16, just: Int16, teLength: Int16, hText: Handle, hDispatchRec: Int, clikStuff: Int16, crOnly: Int16, txFont: Int16, txFace: StyleField, txMode: Int16, txSize: Int16, inPort: GrafPtr, highHook: HighHookUPP!, caretHook: CaretHookUPP!, nLines: Int16, lineStarts: (Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16, Int16))
}
var teJustLeft: Int { get }
var teJustCenter: Int { get }
var teJustRight: Int { get }
var teForceLeft: Int { get }
var teFlushDefault: Int { get }
var teCenter: Int { get }
var teFlushRight: Int { get }
var teFlushLeft: Int { get }
var fontBit: Int { get }
var faceBit: Int { get }
var sizeBit: Int { get }
var clrBit: Int { get }
var addSizeBit: Int { get }
var toggleBit: Int { get }
var doFont: Int { get }
var doFace: Int { get }
var doSize: Int { get }
var doColor: Int { get }
var doAll: Int { get }
var addSize: Int { get }
var doToggle: Int { get }
var EOLHook: Int { get }
var DRAWHook: Int { get }
var WIDTHHook: Int { get }
var HITTESTHook: Int { get }
var nWIDTHHook: Int { get }
var TextWidthHook: Int { get }
var intEOLHook: Int { get }
var intDrawHook: Int { get }
var intWidthHook: Int { get }
var intHitTestHook: Int { get }
var intNWidthHook: Int { get }
var intTextWidthHook: Int { get }
var intInlineInputTSMTEPreUpdateHook: Int { get }
var intInlineInputTSMTEPostUpdateHook: Int { get }
var teFAutoScroll: Int { get }
var teFTextBuffering: Int { get }
var teFOutlineHilite: Int { get }
var teFInlineInput: Int { get }
var teFUseWhiteBackground: Int { get }
var teFUseInlineInput: Int { get }
var teFInlineInputAutoScroll: Int { get }
var teFIdleWithEventLoopTimer: Int { get }
var teBitClear: Int { get }
var teBitSet: Int { get }
var teBitTest: Int { get }
var teWordSelect: Int { get }
var teWordDrag: Int { get }
var teFromFind: Int { get }
var teFromRecal: Int { get }
var teFind: Int { get }
var teHighlight: Int { get }
var teDraw: Int { get }
var teCaret: Int { get }
typealias Chars = (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
typealias CharsPtr = UnsafeMutablePointer<Int8>
typealias CharsHandle = UnsafeMutablePointer<CharsPtr>
struct StyleRun {
  var startChar: Int16
  var styleIndex: Int16
  init()
  init(startChar: Int16, styleIndex: Int16)
}
struct STElement {
  var stCount: Int16
  var stHeight: Int16
  var stAscent: Int16
  var stFont: Int16
  var stFace: StyleField
  var stSize: Int16
  var stColor: RGBColor
  init()
  init(stCount: Int16, stHeight: Int16, stAscent: Int16, stFont: Int16, stFace: StyleField, stSize: Int16, stColor: RGBColor)
}
typealias TEStyleTable = (STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement, STElement)
typealias STPtr = UnsafeMutablePointer<STElement>
typealias STHandle = UnsafeMutablePointer<STPtr>
struct LHElement {
  var lhHeight: Int16
  var lhAscent: Int16
  init()
  init(lhHeight: Int16, lhAscent: Int16)
}
typealias LHTable = (LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement, LHElement)
typealias LHPtr = UnsafeMutablePointer<LHElement>
typealias LHHandle = UnsafeMutablePointer<LHPtr>
struct ScrpSTElement {
  var scrpStartChar: Int32
  var scrpHeight: Int16
  var scrpAscent: Int16
  var scrpFont: Int16
  var scrpFace: StyleField
  var scrpSize: Int16
  var scrpColor: RGBColor
  init()
  init(scrpStartChar: Int32, scrpHeight: Int16, scrpAscent: Int16, scrpFont: Int16, scrpFace: StyleField, scrpSize: Int16, scrpColor: RGBColor)
}
typealias ScrpSTTable = (ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement, ScrpSTElement)
struct StScrpRec {
  var scrpNStyles: Int16
  var scrpStyleTab: ScrpSTTable
  init()
  init(scrpNStyles: Int16, scrpStyleTab: ScrpSTTable)
}
typealias StScrpPtr = UnsafeMutablePointer<StScrpRec>
typealias StScrpHandle = UnsafeMutablePointer<StScrpPtr>
struct NullStRec {
  var teReserved: Int
  var nullScrap: StScrpHandle
  init()
  init(teReserved: Int, nullScrap: StScrpHandle)
}
typealias NullStPtr = UnsafeMutablePointer<NullStRec>
typealias NullStHandle = UnsafeMutablePointer<NullStPtr>
struct TEStyleRec {
  var nRuns: Int16
  var nStyles: Int16
  var styleTab: STHandle
  var lhTab: LHHandle
  var teRefCon: Int
  var nullStyle: NullStHandle
  var runs: (StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun)
  init()
  init(nRuns: Int16, nStyles: Int16, styleTab: STHandle, lhTab: LHHandle, teRefCon: Int, nullStyle: NullStHandle, runs: (StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun, StyleRun))
}
typealias TEStylePtr = UnsafeMutablePointer<TEStyleRec>
typealias TEStyleHandle = UnsafeMutablePointer<TEStylePtr>
struct TextStyle {
  var tsFont: Int16
  var tsFace: StyleField
  var tsSize: Int16
  var tsColor: RGBColor
  init()
  init(tsFont: Int16, tsFace: StyleField, tsSize: Int16, tsColor: RGBColor)
}
typealias TextStylePtr = UnsafeMutablePointer<TextStyle>
typealias TextStyleHandle = UnsafeMutablePointer<TextStylePtr>
typealias TEIntHook = Int16
var teFUseTextServices: Int { get }
class TISInputSource {
}
typealias TISInputSourceRef = TISInputSource
func TISInputSourceGetTypeID() -> CFTypeID
let kTISPropertyInputSourceCategory: CFString!
let kTISPropertyInputSourceType: CFString!
let kTISPropertyInputSourceIsASCIICapable: CFString!
let kTISPropertyInputSourceIsEnableCapable: CFString!
let kTISPropertyInputSourceIsSelectCapable: CFString!
let kTISPropertyInputSourceIsEnabled: CFString!
let kTISPropertyInputSourceIsSelected: CFString!
let kTISPropertyInputSourceID: CFString!
let kTISPropertyBundleID: CFString!
let kTISPropertyInputModeID: CFString!
let kTISPropertyLocalizedName: CFString!
let kTISPropertyInputSourceLanguages: CFString!
let kTISPropertyUnicodeKeyLayoutData: CFString!
let kTISPropertyIconRef: CFString!
let kTISPropertyIconImageURL: CFString!
let kTISCategoryKeyboardInputSource: CFString!
let kTISCategoryPaletteInputSource: CFString!
let kTISCategoryInkInputSource: CFString!
let kTISTypeKeyboardLayout: CFString!
let kTISTypeKeyboardInputMethodWithoutModes: CFString!
let kTISTypeKeyboardInputMethodModeEnabled: CFString!
let kTISTypeKeyboardInputMode: CFString!
let kTISTypeCharacterPalette: CFString!
let kTISTypeKeyboardViewer: CFString!
let kTISTypeInk: CFString!
func TISGetInputSourceProperty(inputSource: TISInputSource!, _ propertyKey: CFString!) -> UnsafeMutablePointer<Void>
func TISCreateInputSourceList(properties: CFDictionary!, _ includeAllInstalled: Bool) -> Unmanaged<CFArray>!
func TISCopyCurrentKeyboardInputSource() -> Unmanaged<TISInputSource>!
func TISCopyCurrentKeyboardLayoutInputSource() -> Unmanaged<TISInputSource>!
func TISCopyCurrentASCIICapableKeyboardInputSource() -> Unmanaged<TISInputSource>!
func TISCopyCurrentASCIICapableKeyboardLayoutInputSource() -> Unmanaged<TISInputSource>!
func TISCopyInputSourceForLanguage(language: CFString!) -> Unmanaged<TISInputSource>!
func TISCreateASCIICapableInputSourceList() -> Unmanaged<CFArray>!
func TISSelectInputSource(inputSource: TISInputSource!) -> OSStatus
func TISDeselectInputSource(inputSource: TISInputSource!) -> OSStatus
func TISEnableInputSource(inputSource: TISInputSource!) -> OSStatus
func TISDisableInputSource(inputSource: TISInputSource!) -> OSStatus
let kTISNotifySelectedKeyboardInputSourceChanged: CFString!
let kTISNotifyEnabledKeyboardInputSourcesChanged: CFString!
func TISSetInputMethodKeyboardLayoutOverride(keyboardLayout: TISInputSource!) -> OSStatus
func TISCopyInputMethodKeyboardLayoutOverride() -> Unmanaged<TISInputSource>!
func TISRegisterInputSource(location: CFURL!) -> OSStatus
var kTextService: Int { get }
var kTSMVersion: Int { get }
var kTSM15Version: Int { get }
var kTSM20Version: Int { get }
var kTSM22Version: Int { get }
var kTSM23Version: Int { get }
var kTSM24Version: Int { get }
typealias InterfaceTypeList = (OSType)
typealias TSMDocumentInterfaceType = OSType
var kTextServiceDocumentInterfaceType: Int { get }
var kTSMTEDocumentInterfaceType: Int { get }
var kUnicodeDocumentInterfaceType: Int { get }
var kUnicodeDocument: Int { get }
typealias TextServiceClass = OSType
var kKeyboardInputMethodClass: Int { get }
var kInkInputMethodClass: Int { get }
var kCharacterPaletteInputMethodClass: Int { get }
var kSpeechInputMethodClass: Int { get }
var kOCRInputMethodClass: Int { get }
typealias TSMDocumentID = COpaquePointer
typealias TSMDocumentPropertyTag = OSType
var kTSMDocumentTextServicePropertyTag: Int { get }
var kTSMDocumentUnicodePropertyTag: Int { get }
var kTSMDocumentTSMTEPropertyTag: Int { get }
var kTSMDocumentSupportGlyphInfoPropertyTag: Int { get }
var kTSMDocumentUseFloatingWindowPropertyTag: Int { get }
var kTSMDocumentUnicodeInputWindowPropertyTag: Int { get }
var kTSMDocumentSupportDocumentAccessPropertyTag: Int { get }
var kTSMDocumentPropertySupportGlyphInfo: Int { get }
var kTSMDocumentPropertyUnicodeInputWindow: Int { get }
var kTSMDocumentRefconPropertyTag: Int { get }
var kTSMDocumentInputModePropertyTag: Int { get }
var kTSMDocumentWindowLevelPropertyTag: Int { get }
var kTSMDocumentInputSourceOverridePropertyTag: Int { get }
var kTSMDocumentEnabledInputSourcesPropertyTag: Int { get }
func TSMSetDocumentProperty(docID: TSMDocumentID, _ propertyTag: TSMDocumentPropertyTag, _ propertySize: UInt32, _ propertyData: UnsafeMutablePointer<Void>) -> OSStatus
func TSMGetDocumentProperty(docID: TSMDocumentID, _ propertyTag: TSMDocumentPropertyTag, _ bufferSize: UInt32, _ actualSize: UnsafeMutablePointer<UInt32>, _ propertyBuffer: UnsafeMutablePointer<Void>) -> OSStatus
func TSMRemoveDocumentProperty(docID: TSMDocumentID, _ propertyTag: TSMDocumentPropertyTag) -> OSStatus
var kUnknownLanguage: Int { get }
var kUnknownScript: Int { get }
var kNeutralScript: Int { get }
var bTakeActiveEvent: Int { get }
var bHandleAERecording: Int { get }
var bScriptMask: Int { get }
var bLanguageMask: Int { get }
var bScriptLanguageMask: Int { get }
var kCMGetScriptLangSupport: Int { get }
var kCMInitiateTextService: Int { get }
var kCMTerminateTextService: Int { get }
var kCMActivateTextService: Int { get }
var kCMDeactivateTextService: Int { get }
var kCMTextServiceEvent: Int { get }
var kCMTextServiceEventRef: Int { get }
var kCMGetTextServiceMenu: Int { get }
var kCMTextServiceMenuSelect: Int { get }
var kCMFixTextService: Int { get }
var kCMSetTextServiceCursor: Int { get }
var kCMHidePaletteWindows: Int { get }
var kCMGetTextServiceProperty: Int { get }
var kCMSetTextServiceProperty: Int { get }
var kCMUCTextServiceEvent: Int { get }
var kCMCopyTextServiceInputModeList: Int { get }
var kCMInputModePaletteItemHit: Int { get }
var kCMGetInputModePaletteMenu: Int { get }
struct TextServiceInfo {
  var fComponent: Component
  var fItemName: Str255
  init()
  init(fComponent: Component, fItemName: Str255)
}
typealias TextServiceInfoPtr = UnsafeMutablePointer<TextServiceInfo>
struct TextServiceList {
  var fTextServiceCount: Int16
  var fServices: (TextServiceInfo)
  init()
  init(fTextServiceCount: Int16, fServices: (TextServiceInfo))
}
typealias TextServiceListPtr = UnsafeMutablePointer<TextServiceList>
typealias TextServiceListHandle = UnsafeMutablePointer<TextServiceListPtr>
struct ScriptLanguageRecord {
  var fScript: ScriptCode
  var fLanguage: LangCode
  init()
  init(fScript: ScriptCode, fLanguage: LangCode)
}
struct ScriptLanguageSupport {
  var fScriptLanguageCount: Int16
  var fScriptLanguageArray: (ScriptLanguageRecord)
  init()
  init(fScriptLanguageCount: Int16, fScriptLanguageArray: (ScriptLanguageRecord))
}
typealias ScriptLanguageSupportPtr = UnsafeMutablePointer<ScriptLanguageSupport>
typealias ScriptLanguageSupportHandle = UnsafeMutablePointer<ScriptLanguageSupportPtr>
struct TSMGlyphInfo {
  var range: CFRange
  var fontRef: ATSFontRef
  var collection: UInt16
  var glyphID: UInt16
  init()
  init(range: CFRange, fontRef: ATSFontRef, collection: UInt16, glyphID: UInt16)
}
struct TSMGlyphInfoArray {
  var numGlyphInfo: Int
  var glyphInfo: (TSMGlyphInfo)
  init()
  init(numGlyphInfo: Int, glyphInfo: (TSMGlyphInfo))
}
typealias TextServicePropertyTag = OSType
var kTextServiceJaTypingMethodPropertyTag: Int { get }
var kTextServiceInputModePropertyTag: Int { get }
var kIMJaTypingMethodProperty: Int { get }
var kIMJaTypingMethodRoman: Int { get }
var kIMJaTypingMethodKana: Int { get }
typealias TextServicePropertyValue = UnsafeMutablePointer<Void>
var kTextServiceInputModeRoman: String { get }
var kTextServiceInputModePassword: String { get }
var kTextServiceInputModeJapaneseHiragana: String { get }
var kTextServiceInputModeJapaneseKatakana: String { get }
var kTextServiceInputModeJapaneseFullWidthRoman: String { get }
var kTextServiceInputModeJapaneseHalfWidthKana: String { get }
var kTextServiceInputModeJapanesePlaceName: String { get }
var kTextServiceInputModeJapaneseFirstName: String { get }
var kTextServiceInputModeJapaneseLastName: String { get }
var kTextServiceInputModeBopomofo: String { get }
var kTextServiceInputModeTradChinesePlaceName: String { get }
var kTextServiceInputModeHangul: String { get }
var kTextServiceInputModeJapanese: String { get }
var kTextServiceInputModeTradChinese: String { get }
var kTextServiceInputModeSimpChinese: String { get }
var kTextServiceInputModeKorean: String { get }
var kComponentBundleInputModeDictKey: String { get }
var kTSInputMethodIconFileKey: String { get }
var kTSInputMethodAlternateIconFileKey: String { get }
var kTSInputModeListKey: String { get }
var kTSInputModeMenuIconFileKey: String { get }
var kTSInputModeAlternateMenuIconFileKey: String { get }
var kTSInputModePaletteIconFileKey: String { get }
var kTSInputModeDefaultStateKey: String { get }
var kTSInputModeScriptKey: String { get }
var kTSInputModePrimaryInScriptKey: String { get }
var kTSInputModeIsVisibleKey: String { get }
var kTSInputModeKeyEquivalentModifiersKey: String { get }
var kTSInputModeKeyEquivalentKey: String { get }
var kTSInputModeJISKeyboardShortcutKey: String { get }
var kTSVisibleInputModeOrderedArrayKey: String { get }
var kComponentBundleInvisibleInSystemUIKey: String { get }
func TSMGetActiveDocument() -> TSMDocumentID
var kTSInputModePaletteItemTypeKey: String { get }
var kTSInputModePaletteItemIconKey: String { get }
var kTSInputModePaletteItemAltIconKey: String { get }
var kTSInputModePaletteItemStateKey: String { get }
var kTSInputModePaletteItemEnabledKey: String { get }
var kTSInputModePaletteItemIDKey: String { get }
var kTSInputModePaletteItemTitleKey: String { get }
var kTSInputModePaletteItemKeyEquivalentKey: String { get }
var kTSInputModePaletteItemKeyEquivalentModifiersKey: String { get }
typealias DocOpenMethod = Int16
var domCannot: Int { get }
var domNative: Int { get }
var domTranslateFirst: Int { get }
var domWildcard: Int { get }
typealias TypesBlock = (OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType, OSType)
typealias TypesBlockPtr = UnsafeMutablePointer<OSType>
var kTranslationScrapProgressDialogID: Int { get }
struct FileTranslationSpec {
  var componentSignature: OSType
  var translationSystemInfo: UnsafePointer<Void>
  var src: FileTypeSpec
  var dst: FileTypeSpec
  init()
  init(componentSignature: OSType, translationSystemInfo: UnsafePointer<Void>, src: FileTypeSpec, dst: FileTypeSpec)
}
typealias FileTranslationSpecArrayPtr = UnsafeMutablePointer<FileTranslationSpec>
typealias FileTranslationSpecArrayHandle = UnsafeMutablePointer<FileTranslationSpecArrayPtr>
typealias GetScrapDataProcPtr = @convention(c) (ScrapType, Handle, UnsafeMutablePointer<Void>) -> OSErr
typealias GetScrapDataUPP = GetScrapDataProcPtr
typealias GetScrapData = GetScrapDataUPP
var kSupportsFileTranslation: Int { get }
var kSupportsScrapTranslation: Int { get }
var kTranslatorCanGenerateFilename: Int { get }
typealias FileType = OSType
typealias ScrapType = ResType
typealias TranslationAttributes = UInt32
var taDstDocNeedsResourceFork: Int { get }
var taDstIsAppTranslation: Int { get }
struct FileTypeSpec {
  var format: FileType
  var hint: Int
  var flags: TranslationAttributes
  var catInfoType: OSType
  var catInfoCreator: OSType
  init()
  init(format: FileType, hint: Int, flags: TranslationAttributes, catInfoType: OSType, catInfoCreator: OSType)
}
struct FileTranslationList {
  var modDate: UInt
  var groupCount: UInt
  init()
  init(modDate: UInt, groupCount: UInt)
}
typealias FileTranslationListPtr = UnsafeMutablePointer<FileTranslationList>
typealias FileTranslationListHandle = UnsafeMutablePointer<FileTranslationListPtr>
struct ScrapTypeSpec {
  var format: ScrapType
  var hint: Int
  init()
  init(format: ScrapType, hint: Int)
}
struct ScrapTranslationList {
  var modDate: UInt
  var groupCount: UInt
  init()
  init(modDate: UInt, groupCount: UInt)
}
typealias ScrapTranslationListPtr = UnsafeMutablePointer<ScrapTranslationList>
typealias ScrapTranslationListHandle = UnsafeMutablePointer<ScrapTranslationListPtr>
typealias TranslationRefNum = Int
var kTranslateGetFileTranslationList: Int { get }
var kTranslateIdentifyFile: Int { get }
var kTranslateTranslateFile: Int { get }
var kTranslateGetTranslatedFilename: Int { get }
var kTranslateGetScrapTranslationList: Int { get }
var kTranslateIdentifyScrap: Int { get }
var kTranslateTranslateScrap: Int { get }
var kTranslateGetScrapTranslationListConsideringData: Int { get }
typealias DoGetFileTranslationListProcPtr = @convention(c) (ComponentInstance, FileTranslationListHandle) -> ComponentResult
typealias DoIdentifyFileProcPtr = @convention(c) (ComponentInstance, UnsafePointer<FSSpec>, UnsafeMutablePointer<FileType>) -> ComponentResult
typealias DoTranslateFileProcPtr = @convention(c) (ComponentInstance, TranslationRefNum, UnsafePointer<FSSpec>, FileType, Int, UnsafePointer<FSSpec>, FileType, Int) -> ComponentResult
typealias DoGetTranslatedFilenameProcPtr = @convention(c) (ComponentInstance, FileType, Int, UnsafeMutablePointer<FSSpec>) -> ComponentResult
typealias DoGetScrapTranslationListProcPtr = @convention(c) (ComponentInstance, ScrapTranslationListHandle) -> ComponentResult
typealias DoIdentifyScrapProcPtr = @convention(c) (ComponentInstance, UnsafePointer<Void>, Size, UnsafeMutablePointer<ScrapType>) -> ComponentResult
typealias DoTranslateScrapProcPtr = @convention(c) (ComponentInstance, TranslationRefNum, UnsafePointer<Void>, Size, ScrapType, Int, Handle, ScrapType, Int) -> ComponentResult
typealias TSCode = Int16
var tsPreviousSelectMode: Int { get }
var tsNormalSelectMode: Int { get }
var tsNextSelectMode: Int { get }
struct TypeSelectRecord {
  var tsrLastKeyTime: UInt32
  var tsrScript: ScriptCode
  var tsrKeyStrokes: Str63
  init()
  init(tsrLastKeyTime: UInt32, tsrScript: ScriptCode, tsrKeyStrokes: Str63)
}
var kAHInternalErr: Int { get }
var kAHInternetConfigPrefErr: Int { get }
typealias AHTOCType = Int16
var kAHTOCTypeUser: Int { get }
var kAHTOCTypeDeveloper: Int { get }
func AHSearch(bookname: CFString!, _ query: CFString!) -> OSStatus
func AHGotoPage(bookname: CFString!, _ path: CFString!, _ anchor: CFString!) -> OSStatus
func AHLookupAnchor(bookname: CFString!, _ anchor: CFString!) -> OSStatus
func AHRegisterHelpBook(appBundleRef: UnsafePointer<FSRef>) -> OSStatus
func AHRegisterHelpBookWithURL(applicationURL: CFURL!) -> OSStatus
typealias ICAError = OSErr
var kICAPBVersion: Int { get }
var kICACommunicationErr: Int { get }
var kICADeviceNotFoundErr: Int { get }
var kICADeviceNotOpenErr: Int { get }
var kICAFileCorruptedErr: Int { get }
var kICAIOPendingErr: Int { get }
var kICAInvalidObjectErr: Int { get }
var kICAInvalidPropertyErr: Int { get }
var kICAIndexOutOfRangeErr: Int { get }
var kICAPropertyTypeNotFoundErr: Int { get }
var kICACannotYieldDevice: Int { get }
var kICADataTypeNotFoundErr: Int { get }
var kICADeviceMemoryAllocationErr: Int { get }
var kICADeviceInternalErr: Int { get }
var kICADeviceInvalidParamErr: Int { get }
var kICADeviceAlreadyOpenErr: Int { get }
var kICADeviceLocationIDNotFoundErr: Int { get }
var kICADeviceGUIDNotFoundErr: Int { get }
var kICADeviceIOServicePathNotFoundErr: Int { get }
var kICADeviceUnsupportedErr: Int { get }
var kICAFrameworkInternalErr: Int { get }
var kICAExtensionInternalErr: Int { get }
var kICAInvalidSessionErr: Int { get }
var kICASandboxViolation: Int { get }
var kICASecureSessionRequired: Int { get }
var kICADevice: Int { get }
var kICADeviceCamera: Int { get }
var kICADeviceScanner: Int { get }
var kICADeviceMFP: Int { get }
var kICADevicePhone: Int { get }
var kICADevicePDA: Int { get }
var kICADeviceOther: Int { get }
var kICAList: Int { get }
var kICADirectory: Int { get }
var kICAFile: Int { get }
var kICAFileImage: Int { get }
var kICAFileMovie: Int { get }
var kICAFileAudio: Int { get }
var kICAFileFirmware: Int { get }
var kICAFileOther: Int { get }
var kICAProperty: Int { get }
var kICAPropertyImageWidth: Int { get }
var kICAPropertyImageHeight: Int { get }
var kICAPropertyImageBitDepth: Int { get }
var kICAPropertyImageDPI: Int { get }
var kICAPropertyImageExposureTime: Int { get }
var kICAPropertyImageFNumber: Int { get }
var kICAPropertyImageDateOriginal: Int { get }
var kICAPropertyImageDateDigitized: Int { get }
var kICAPropertyImageShutterSpeed: Int { get }
var kICAPropertyImageAperture: Int { get }
var kICAPropertyImageFlash: Int { get }
var kICAPropertyColorSpace: Int { get }
var kICAPropertyImageFilename: Int { get }
var kICAPropertyImageSize: Int { get }
var kICAPropertyImageData: Int { get }
var kICAPropertyImageThumbnail: Int { get }
var kICAPropertyColorSyncProfile: Int { get }
var kICATypeUInt8: Int { get }
var kICATypeUInt16: Int { get }
var kICATypeUInt32: Int { get }
var kICATypeUInt64: Int { get }
var kICATypeSInt16: Int { get }
var kICATypeSInt32: Int { get }
var kICATypeSInt64: Int { get }
var kICATypeFloat: Int { get }
var kICATypeFixed: Int { get }
var kICATypeBoolean: Int { get }
var kICATypeString: Int { get }
var kICATypeData: Int { get }
var kICATypeThumbnail: Int { get }
var kICAFlagReadWriteAccess: Int { get }
var kICAFlagReadAccess: Int { get }
var kICAButtonScan: Int { get }
var kICAButtonCopy: Int { get }
var kICAButtonEMail: Int { get }
var kICAButtonWeb: Int { get }
var kICACameraPassThruSend: Int { get }
var kICACameraPassThruReceive: Int { get }
var kICACameraPassThruNotUsed: Int { get }
struct ICAPTPPassThroughPB {
  var commandCode: UInt32
  var resultCode: UInt32
  var numOfInputParams: UInt32
  var numOfOutputParams: UInt32
  var params: (UInt32, UInt32, UInt32, UInt32)
  var dataUsageMode: UInt32
  var flags: UInt32
  var dataSize: UInt32
  var data: (UInt8)
  init()
  init(commandCode: UInt32, resultCode: UInt32, numOfInputParams: UInt32, numOfOutputParams: UInt32, params: (UInt32, UInt32, UInt32, UInt32), dataUsageMode: UInt32, flags: UInt32, dataSize: UInt32, data: (UInt8))
}
struct ICAPTPEventDataset {
  var dataLength: UInt32
  var containerType: UInt16
  var eventCode: UInt16
  var transactionID: UInt32
  var params: (UInt32, UInt32, UInt32)
  init()
  init(dataLength: UInt32, containerType: UInt16, eventCode: UInt16, transactionID: UInt32, params: (UInt32, UInt32, UInt32))
}
let kICAMediaHeightKey: CFString!
let kICAMediaWidthKey: CFString!
let kICAUSBTransportType: CFString!
let kICAFireWireTransportType: CFString!
let kICABluetoothTransportType: CFString!
let kICATCPIPTransportType: CFString!
let kICASCSITransportType: CFString!
let kICATWAINTransportType: CFString!
let kICADeviceModulePathKey: CFString!
let kICATransportTypeKey: CFString!
let kICABluetoothAddressKey: CFString!
let kICAUSBLocationIDKey: CFString!
let kICAFireWireGUIDKey: CFString!
let kICAIOServicePathKey: CFString!
let kICAIPAddressKey: CFString!
let kICAIPNameKey: CFString!
let kICAIPGUIDKey: CFString!
let kICATWAINDSPathKey: CFString!
struct ICAHeader {
  var err: ICAError
  var refcon: UInt
  init()
  init(err: ICAError, refcon: UInt)
}
typealias ICACompletion = @convention(c) (UnsafeMutablePointer<ICAHeader>) -> Void
typealias ICAImportFilterProc = @convention(c) (CFDictionary!, UInt) -> DarwinBoolean
typealias ICANotificationProc = @convention(c) (CFString!, CFDictionary!) -> Void
typealias ICAObject = UInt32
typealias ICAProperty = UInt32
typealias ICAConnectionID = UInt32
typealias ICASessionID = UInt32
typealias ICAScannerSessionID = ICASessionID
typealias ICAEventDataCookie = UInt32
struct ICAObjectInfo {
  var objectType: OSType
  var objectSubtype: OSType
  init()
  init(objectType: OSType, objectSubtype: OSType)
}
var kICAAllowMultipleImages: Int { get }
var kICADownloadAndReturnPathArray: Int { get }
struct ICAImportImagePB {
  var header: ICAHeader
  var deviceObject: ICAObject
  var flags: UInt32
  var supportedFileTypes: Unmanaged<CFArray>!
  var filterProc: ICAImportFilterProc!
  var importedImages: UnsafeMutablePointer<Unmanaged<CFArray>?>
  init()
  init(header: ICAHeader, deviceObject: ICAObject, flags: UInt32, supportedFileTypes: Unmanaged<CFArray>!, filterProc: ICAImportFilterProc!, importedImages: UnsafeMutablePointer<Unmanaged<CFArray>?>)
}
typealias ICANotification = @convention(c) (CFString!, CFDictionary!) -> Void
let kICANotificationTypeScannerOverviewOverlayAvailable: CFString!
let kICANotificationSubTypePerformOverviewScan: CFString!
let kICANotificationSubTypeDocumentLoaded: CFString!
let kICANotificationSubTypeDocumentNotLoaded: CFString!
struct ICARegisterForEventNotificationPB {
  var header: ICAHeader
  var objectOfInterest: ICAObject
  var eventsOfInterest: Unmanaged<CFArray>!
  var notificationProc: ICANotification!
  var options: Unmanaged<CFDictionary>!
  init()
  init(header: ICAHeader, objectOfInterest: ICAObject, eventsOfInterest: Unmanaged<CFArray>!, notificationProc: ICANotification!, options: Unmanaged<CFDictionary>!)
}
struct ICASendNotificationPB {
  var header: ICAHeader
  var notificationDictionary: Unmanaged<CFMutableDictionary>!
  var replyCode: UInt32
  init()
  init(header: ICAHeader, notificationDictionary: Unmanaged<CFMutableDictionary>!, replyCode: UInt32)
}
struct ICAGetDeviceListPB {
  var header: ICAHeader
  var object: ICAObject
  init()
  init(header: ICAHeader, object: ICAObject)
}
struct ICACopyObjectPropertyDictionaryPB {
  var header: ICAHeader
  var object: ICAObject
  var theDict: UnsafeMutablePointer<Unmanaged<CFDictionary>?>
  init()
  init(header: ICAHeader, object: ICAObject, theDict: UnsafeMutablePointer<Unmanaged<CFDictionary>?>)
}
var kICAThumbnailFormatJPEG: Int { get }
var kICAThumbnailFormatTIFF: Int { get }
var kICAThumbnailFormatPNG: Int { get }
struct ICACopyObjectThumbnailPB {
  var header: ICAHeader
  var object: ICAObject
  var thumbnailFormat: OSType
  var thumbnailData: UnsafeMutablePointer<Unmanaged<CFData>?>
  init()
  init(header: ICAHeader, object: ICAObject, thumbnailFormat: OSType, thumbnailData: UnsafeMutablePointer<Unmanaged<CFData>?>)
}
struct ICACopyObjectDataPB {
  var header: ICAHeader
  var object: ICAObject
  var startByte: Int
  var requestedSize: Int
  var data: UnsafeMutablePointer<Unmanaged<CFData>?>
  init()
  init(header: ICAHeader, object: ICAObject, startByte: Int, requestedSize: Int, data: UnsafeMutablePointer<Unmanaged<CFData>?>)
}
struct ICAMessage {
  var messageType: OSType
  var startByte: UInt32
  var dataPtr: UnsafeMutablePointer<Void>
  var dataSize: UInt32
  var dataType: OSType
  init()
  init(messageType: OSType, startByte: UInt32, dataPtr: UnsafeMutablePointer<Void>, dataSize: UInt32, dataType: OSType)
}
var kICAMessageConnect: Int { get }
var kICAMessageDisconnect: Int { get }
var kICAMessageReset: Int { get }
var kICAMessageCheckDevice: Int { get }
var kICAMessageCameraReadClock: Int { get }
var kICAMessageGetLastButtonPressed: Int { get }
var kICAMessageGetEventData: Int { get }
var kICAMessageDeviceYield: Int { get }
var kICAMessageCameraPassThrough: Int { get }
var kICAMessageScannerOverviewSelectionChanged: Int { get }
struct ICAObjectSendMessagePB {
  var header: ICAHeader
  var object: ICAObject
  var message: ICAMessage
  var result: UInt32
  init()
  init(header: ICAHeader, object: ICAObject, message: ICAMessage, result: UInt32)
}
var kDeleteAfterDownload: Int { get }
var kCreateCustomIcon: Int { get }
var kAddMetaDataToFinderComment: Int { get }
var kAdjustCreationDate: Int { get }
var kSetFileTypeAndCreator: Int { get }
var kRotateImage: Int { get }
var kDontEmbedColorSyncProfile: Int { get }
struct ICADownloadFilePB {
  var header: ICAHeader
  var object: ICAObject
  var dirFSRef: UnsafeMutablePointer<FSRef>
  var flags: UInt32
  var fileType: OSType
  var fileCreator: OSType
  var rotationAngle: Fixed
  var fileFSRef: UnsafeMutablePointer<FSRef>
  init()
  init(header: ICAHeader, object: ICAObject, dirFSRef: UnsafeMutablePointer<FSRef>, flags: UInt32, fileType: OSType, fileCreator: OSType, rotationAngle: Fixed, fileFSRef: UnsafeMutablePointer<FSRef>)
}
var kICAUploadFileAsIs: Int { get }
var kICAUploadFileScaleToFit: Int { get }
struct ICAUploadFilePB {
  var header: ICAHeader
  var parentObject: ICAObject
  var fileFSRef: UnsafeMutablePointer<FSRef>
  var flags: UInt32
  init()
  init(header: ICAHeader, parentObject: ICAObject, fileFSRef: UnsafeMutablePointer<FSRef>, flags: UInt32)
}
struct ICALoadDeviceModulePB {
  var header: ICAHeader
  var paramDictionary: Unmanaged<CFDictionary>!
  init()
  init(header: ICAHeader, paramDictionary: Unmanaged<CFDictionary>!)
}
struct ICAUnloadDeviceModulePB {
  var header: ICAHeader
  var deviceObject: ICAObject
  init()
  init(header: ICAHeader, deviceObject: ICAObject)
}
struct ICAOpenSessionPB {
  var header: ICAHeader
  var deviceObject: ICAObject
  var sessionID: ICASessionID
  init()
  init(header: ICAHeader, deviceObject: ICAObject, sessionID: ICASessionID)
}
struct ICACloseSessionPB {
  var header: ICAHeader
  var sessionID: ICASessionID
  init()
  init(header: ICAHeader, sessionID: ICASessionID)
}
struct ICAScannerOpenSessionPB {
  var header: ICAHeader
  var object: ICAObject
  var sessionID: ICAScannerSessionID
  init()
  init(header: ICAHeader, object: ICAObject, sessionID: ICAScannerSessionID)
}
struct ICAScannerCloseSessionPB {
  var header: ICAHeader
  var sessionID: ICAScannerSessionID
  init()
  init(header: ICAHeader, sessionID: ICAScannerSessionID)
}
struct ICAScannerInitializePB {
  var header: ICAHeader
  var sessionID: ICAScannerSessionID
  init()
  init(header: ICAHeader, sessionID: ICAScannerSessionID)
}
struct ICAScannerGetParametersPB {
  var header: ICAHeader
  var sessionID: ICAScannerSessionID
  var theDict: Unmanaged<CFMutableDictionary>!
  init()
  init(header: ICAHeader, sessionID: ICAScannerSessionID, theDict: Unmanaged<CFMutableDictionary>!)
}
struct ICAScannerSetParametersPB {
  var header: ICAHeader
  var sessionID: ICAScannerSessionID
  var theDict: Unmanaged<CFMutableDictionary>!
  init()
  init(header: ICAHeader, sessionID: ICAScannerSessionID, theDict: Unmanaged<CFMutableDictionary>!)
}
struct ICAScannerStatusPB {
  var header: ICAHeader
  var sessionID: ICAScannerSessionID
  var status: UInt32
  init()
  init(header: ICAHeader, sessionID: ICAScannerSessionID, status: UInt32)
}
struct ICAScannerStartPB {
  var header: ICAHeader
  var sessionID: ICAScannerSessionID
  init()
  init(header: ICAHeader, sessionID: ICAScannerSessionID)
}
var kICAPropertyCameraStorageType: Int { get }
var kICAPropertyCameraFilesystemType: Int { get }
var kICAPropertyCameraAccessCapability: Int { get }
var kICAPropertyCameraMaxCapacity: Int { get }
var kICAPropertyCameraFreeSpaceInBytes: Int { get }
var kICAPropertyCameraFreeSpaceInImages: Int { get }
var kICAPropertyCameraStorageDescription: Int { get }
var kICAPropertyCameraVolumeLabel: Int { get }
var kICAStorageUndefined: Int { get }
var kICAStorageFixedROM: Int { get }
var kICAStorageRemovableROM: Int { get }
var kICAStorageFixedRAM: Int { get }
var kICAStorageRemovableRAM: Int { get }
var kICAFileystemUndefined: Int { get }
var kICAFileystemGenericFlat: Int { get }
var kICAFileystemGenericHierarchical: Int { get }
var kICAFileystemDCF: Int { get }
var kICAAccessReadWrite: Int { get }
var kICAAccessReadOnly: Int { get }
var kICAAccessReadOnlyWithObjectDeletion: Int { get }
var kICAPropertyCameraBatteryLevel: Int { get }
var kICAPropertyCameraFunctionalMode: Int { get }
var kICAPropertyCameraImageSize: Int { get }
var kICAPropertyCameraCompressionSetting: Int { get }
var kICAPropertyCameraWhiteBalance: Int { get }
var kICAPropertyCameraRGBGain: Int { get }
var kICAPropertyCameraFNumber: Int { get }
var kICAPropertyCameraFocalLength: Int { get }
var kICAPropertyCameraFocusDistance: Int { get }
var kICAPropertyCameraFocusMode: Int { get }
var kICAPropertyCameraExposureMeteringMode: Int { get }
var kICAPropertyCameraFlashMode: Int { get }
var kICAPropertyCameraExposureTime: Int { get }
var kICAPropertyCameraExposureProgramMode: Int { get }
var kICAPropertyCameraExposureIndex: Int { get }
var kICAPropertyCameraExposureBiasCompensation: Int { get }
var kICAPropertyCameraDateTime: Int { get }
var kICAPropertyCameraCaptureDelay: Int { get }
var kICAPropertyCameraStillCaptureMode: Int { get }
var kICAPropertyCameraContrast: Int { get }
var kICAPropertyCameraSharpness: Int { get }
var kICAPropertyCameraDigitalZoom: Int { get }
var kICAPropertyCameraEffectMode: Int { get }
var kICAPropertyCameraBurstNumber: Int { get }
var kICAPropertyCameraBurstInterval: Int { get }
var kICAPropertyCameraTimelapseNumber: Int { get }
var kICAPropertyCameraTimelapseInterval: Int { get }
var kICAPropertyCameraFocusMeteringMode: Int { get }
var kICAPropertyCameraUploadURL: Int { get }
var kICAPropertyCameraArtist: Int { get }
var kICAPropertyCameraCopyrightInfo: Int { get }
var kICAPropertyCameraIcon: Int { get }
var kICAPropertyCameraSupportedMessages: Int { get }
var kICAMessageCameraCaptureNewImage: Int { get }
var kICAMessageCameraDeleteOne: Int { get }
var kICAMessageCameraDeleteAll: Int { get }
var kICAMessageCameraSyncClock: Int { get }
var kICAMessageCameraUploadData: Int { get }
var kICACapabilityCanCameraCaptureNewImage: Int { get }
var kICACapabilityCanCameraDeleteOne: Int { get }
var kICACapabilityCanCameraDeleteAll: Int { get }
var kICACapabilityCanCameraSyncClock: Int { get }
var kICACapabilityCanCameraUploadData: Int { get }
var kICACapabilityMayStoreNewImagesInTempStore: Int { get }
struct ICDHeader {
  var err: ICAError
  var refcon: UInt
  init()
  init(err: ICAError, refcon: UInt)
}
typealias ICDCompletion = @convention(c) (UnsafeMutablePointer<ICDHeader>) -> Void
struct ICD_NewObjectPB {
  var header: ICDHeader
  var parentObject: ICAObject
  var objectInfo: ICAObjectInfo
  var object: ICAObject
  init()
  init(header: ICDHeader, parentObject: ICAObject, objectInfo: ICAObjectInfo, object: ICAObject)
}
struct ICD_DisposeObjectPB {
  var header: ICDHeader
  var object: ICAObject
  init()
  init(header: ICDHeader, object: ICAObject)
}
class InkText {
}
typealias InkTextRef = InkText
class InkStroke {
}
typealias InkStrokeRef = InkStroke
struct InkPoint {
  var point: HIPoint
  var tabletPointData: TabletPointRec
  var keyModifiers: UInt32
  init()
  init(point: HIPoint, tabletPointData: TabletPointRec, keyModifiers: UInt32)
}
typealias InkPointPtr = UnsafeMutablePointer<InkPoint>
typealias InkAlternateCount = CFIndex
typealias InkUserWritingModeType = FourCharCode
var kInkWriteNowhere: Int { get }
var kInkWriteAnywhere: Int { get }
var kInkWriteInInkAwareAppsOnly: Int { get }
typealias InkApplicationWritingModeType = FourCharCode
var kInkWriteNowhereInApp: Int { get }
var kInkWriteAnywhereInApp: Int { get }
typealias InkDrawingModeType = UInt32
var kInkDrawNothing: Int { get }
var kInkDrawInkOnly: Int { get }
var kInkDrawInkAndWritingGuides: Int { get }
typealias InkTextDrawFlagsType = UInt32
var kInkTextDrawDefault: Int { get }
var kInkTextDrawIgnorePressure: Int { get }
var kInkTextDrawHonorContext: Int { get }
typealias InkTerminationType = UInt32
var kInkTerminationNone: UInt32 { get }
var kInkTerminationTimeOut: UInt32 { get }
var kInkTerminationOutOfProximity: UInt32 { get }
var kInkTerminationRecognizerHorizontalBreak: UInt32 { get }
var kInkTerminationRecognizerVerticalBreak: UInt32 { get }
var kInkTerminationStroke: UInt32 { get }
var kInkTerminationDefault: UInt32 { get }
var kInkTerminationAll: UInt32 { get }
typealias InkSourceType = UInt32
var kInkSourceUser: Int { get }
var kInkSourceApplication: Int { get }
typealias InkRecognitionType = UInt32
var kInkRecognitionNone: Int { get }
var kInkRecognitionText: Int { get }
var kInkRecognitionGesture: Int { get }
var kInkRecognitionDefault: Int { get }
typealias InkGestureKind = FourCharCode
var kInkGestureUndo: Int { get }
var kInkGestureCut: Int { get }
var kInkGestureCopy: Int { get }
var kInkGesturePaste: Int { get }
var kInkGestureClear: Int { get }
var kInkGestureSelectAll: Int { get }
var kInkGestureEscape: Int { get }
var kInkGestureTab: Int { get }
var kInkGestureLeftSpace: Int { get }
var kInkGestureRightSpace: Int { get }
var kInkGestureLeftReturn: Int { get }
var kInkGestureRightReturn: Int { get }
var kInkGestureDelete: Int { get }
var kInkGestureJoin: Int { get }
var kInkAlternateCommand: Int { get }
var kInkSeparatorCommand: Int { get }
var kInkDrawingCommand: Int { get }
var kInkTabletPointerUnknown: Int { get }
var kInkTabletPointerPen: Int { get }
var kInkTabletPointerCursor: Int { get }
var kInkTabletPointerEraser: Int { get }
var kInkPenTipButtonMask: Int { get }
var kInkPenLowerSideButtonMask: Int { get }
var kInkPenUpperSideButtonMask: Int { get }
func InkUserWritingMode() -> InkUserWritingModeType
func InkSetApplicationWritingMode(iWriteWhere: InkApplicationWritingModeType)
func InkSetApplicationRecognitionMode(iRecognitionType: InkRecognitionType)
func InkSetPhraseTerminationMode(iSource: InkSourceType, _ iAllowedTerminationTypes: InkTerminationType)
func InkIsPhraseInProgress() -> Bool
func InkSetDrawingMode(iDrawingMode: InkDrawingModeType)
func InkAddStrokeToCurrentPhrase(iPointCount: UInt, _ iPointArray: UnsafeMutablePointer<InkPoint>)
func InkTerminateCurrentPhrase(iSource: InkSourceType)
func InkTextAlternatesCount(iTextRef: InkText!) -> CFIndex
func InkTextCreateCFString(iTextRef: InkText!, _ iAlternateIndex: CFIndex) -> Unmanaged<CFString>!
func InkTextKeyModifiers(iTextRef: InkText!) -> UInt32
func InkTextCopy(iTextRef: InkText!) -> Unmanaged<InkText>!
func InkTextBounds(iTextRef: InkText!) -> HIRect
func InkTextDraw(iTextRef: InkText!, _ iContext: CGContext!, _ iBounds: UnsafePointer<CGRect>, _ iFlags: InkTextDrawFlagsType)
func InkTextFlatten(iTextRef: InkText!, _ ioDataRef: CFMutableData!, _ iIndex: CFIndex) -> CFIndex
func InkTextCreateFromCFData(iFlattenedInkText: CFData!, _ iIndex: CFIndex) -> Unmanaged<InkText>!
func InkTextGetTypeID() -> CFTypeID
func InkTextGetStrokeCount(iTextRef: InkText!) -> CFIndex
func InkTextGetStroke(iTextRef: InkText!, _ iStrokeIndex: CFIndex) -> Unmanaged<InkStroke>!
func InkStrokeGetPointCount(iStrokeRef: InkStroke!) -> CFIndex
func InkStrokeGetPoints(iStrokeRef: InkStroke!, _ oPointBuffer: UnsafeMutablePointer<InkPoint>) -> UnsafeMutablePointer<InkPoint>
func InkStrokeGetTypeID() -> CFTypeID
typealias NavAskSaveChangesAction = UInt32
var kNavSaveChangesClosingDocument: Int { get }
var kNavSaveChangesQuittingApplication: Int { get }
var kNavSaveChangesOther: Int { get }
typealias NavAskSaveChangesResult = UInt32
var kNavAskSaveChangesSave: Int { get }
var kNavAskSaveChangesCancel: Int { get }
var kNavAskSaveChangesDontSave: Int { get }
typealias NavAskDiscardChangesResult = UInt32
var kNavAskDiscardChanges: Int { get }
var kNavAskDiscardChangesCancel: Int { get }
typealias NavFilterModes = Int16
var kNavFilteringBrowserList: Int { get }
var kNavFilteringFavorites: Int { get }
var kNavFilteringRecents: Int { get }
var kNavFilteringShortCutVolumes: Int { get }
var kNavFilteringLocationPopup: Int { get }
var kNavFileOrFolderVersion: Int { get }
struct NavFileOrFolderInfo {
  struct __Unnamed_union_fileAndFolder {
    struct __Unnamed_struct_fileInfo {
      var locked: DarwinBoolean
      var resourceOpen: DarwinBoolean
      var dataOpen: DarwinBoolean
      var reserved1: DarwinBoolean
      var dataSize: Int
      var resourceSize: Int
      var finderInfo: FInfo
      var finderXInfo: FXInfo
      init()
      init(locked: DarwinBoolean, resourceOpen: DarwinBoolean, dataOpen: DarwinBoolean, reserved1: DarwinBoolean, dataSize: Int, resourceSize: Int, finderInfo: FInfo, finderXInfo: FXInfo)
    }
    struct __Unnamed_struct_folderInfo {
      var shareable: DarwinBoolean
      var sharePoint: DarwinBoolean
      var mounted: DarwinBoolean
      var readable: DarwinBoolean
      var writeable: DarwinBoolean
      var reserved2: DarwinBoolean
      var numberOfFiles: Int
      var finderDInfo: DInfo
      var finderDXInfo: DXInfo
      var folderType: OSType
      var folderCreator: OSType
      var reserved3: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
      init()
      init(shareable: DarwinBoolean, sharePoint: DarwinBoolean, mounted: DarwinBoolean, readable: DarwinBoolean, writeable: DarwinBoolean, reserved2: DarwinBoolean, numberOfFiles: Int, finderDInfo: DInfo, finderDXInfo: DXInfo, folderType: OSType, folderCreator: OSType, reserved3: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
    }
    var fileInfo: NavFileOrFolderInfo.__Unnamed_union_fileAndFolder.__Unnamed_struct_fileInfo
    var folderInfo: NavFileOrFolderInfo.__Unnamed_union_fileAndFolder.__Unnamed_struct_folderInfo
    init(fileInfo: NavFileOrFolderInfo.__Unnamed_union_fileAndFolder.__Unnamed_struct_fileInfo)
    init(folderInfo: NavFileOrFolderInfo.__Unnamed_union_fileAndFolder.__Unnamed_struct_folderInfo)
    init()
  }
  var version: UInt16
  var isFolder: DarwinBoolean
  var visible: DarwinBoolean
  var creationDate: UInt32
  var modificationDate: UInt32
  var fileAndFolder: NavFileOrFolderInfo.__Unnamed_union_fileAndFolder
  init()
  init(version: UInt16, isFolder: DarwinBoolean, visible: DarwinBoolean, creationDate: UInt32, modificationDate: UInt32, fileAndFolder: NavFileOrFolderInfo.__Unnamed_union_fileAndFolder)
}
struct NavEventDataInfo {
  var event: UnsafeMutablePointer<EventRecord>
  var param: UnsafeMutablePointer<Void>
  init(event: UnsafeMutablePointer<EventRecord>)
  init(param: UnsafeMutablePointer<Void>)
  init()
}
struct NavEventData {
  var eventDataParms: NavEventDataInfo
  var itemHit: Int16
  init()
  init(eventDataParms: NavEventDataInfo, itemHit: Int16)
}
typealias NavDialogRef = NavDialog
class NavDialog {
}
typealias NavUserAction = UInt32
var kNavUserActionNone: Int { get }
var kNavUserActionCancel: Int { get }
var kNavUserActionOpen: Int { get }
var kNavUserActionSaveAs: Int { get }
var kNavUserActionChoose: Int { get }
var kNavUserActionNewFolder: Int { get }
var kNavUserActionSaveChanges: Int { get }
var kNavUserActionDontSaveChanges: Int { get }
var kNavUserActionDiscardChanges: Int { get }
var kNavUserActionReviewDocuments: Int { get }
var kNavUserActionDiscardDocuments: Int { get }
var kNavCBRecVersion: Int { get }
struct NavCBRec {
  var version: UInt16
  var context: Unmanaged<NavDialog>!
  var window: WindowRef
  var customRect: Rect
  var previewRect: Rect
  var eventData: NavEventData
  var userAction: NavUserAction
  var reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  init()
  init(version: UInt16, context: Unmanaged<NavDialog>!, window: WindowRef, customRect: Rect, previewRect: Rect, eventData: NavEventData, userAction: NavUserAction, reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}
typealias NavCBRecPtr = UnsafeMutablePointer<NavCBRec>
typealias NavEventCallbackMessage = Int32
var kNavCBEvent: Int { get }
var kNavCBCustomize: Int { get }
var kNavCBStart: Int { get }
var kNavCBTerminate: Int { get }
var kNavCBAdjustRect: Int { get }
var kNavCBNewLocation: Int { get }
var kNavCBShowDesktop: Int { get }
var kNavCBSelectEntry: Int { get }
var kNavCBPopupMenuSelect: Int { get }
var kNavCBAccept: Int { get }
var kNavCBCancel: Int { get }
var kNavCBAdjustPreview: Int { get }
var kNavCBUserAction: Int { get }
var kNavCBOpenSelection: Int { get }
typealias NavCallBackUserData = UnsafeMutablePointer<Void>
typealias NavEventProcPtr = @convention(c) (NavEventCallbackMessage, NavCBRecPtr, UnsafeMutablePointer<Void>) -> Void
typealias NavPreviewProcPtr = @convention(c) (NavCBRecPtr, UnsafeMutablePointer<Void>) -> DarwinBoolean
typealias NavObjectFilterProcPtr = @convention(c) (UnsafeMutablePointer<AEDesc>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, NavFilterModes) -> DarwinBoolean
typealias NavEventUPP = NavEventProcPtr
typealias NavPreviewUPP = NavPreviewProcPtr
typealias NavObjectFilterUPP = NavObjectFilterProcPtr
func NewNavEventUPP(userRoutine: NavEventProcPtr!) -> NavEventUPP!
func NewNavPreviewUPP(userRoutine: NavPreviewProcPtr!) -> NavPreviewUPP!
func NewNavObjectFilterUPP(userRoutine: NavObjectFilterProcPtr!) -> NavObjectFilterUPP!
func DisposeNavEventUPP(userUPP: NavEventUPP!)
func DisposeNavPreviewUPP(userUPP: NavPreviewUPP!)
func DisposeNavObjectFilterUPP(userUPP: NavObjectFilterUPP!)
func InvokeNavEventUPP(callBackSelector: NavEventCallbackMessage, _ callBackParms: NavCBRecPtr, _ callBackUD: UnsafeMutablePointer<Void>, _ userUPP: NavEventUPP!)
func InvokeNavPreviewUPP(callBackParms: NavCBRecPtr, _ callBackUD: UnsafeMutablePointer<Void>, _ userUPP: NavPreviewUPP!) -> Bool
func InvokeNavObjectFilterUPP(theItem: UnsafeMutablePointer<AEDesc>, _ info: UnsafeMutablePointer<Void>, _ callBackUD: UnsafeMutablePointer<Void>, _ filterMode: NavFilterModes, _ userUPP: NavObjectFilterUPP!) -> Bool
typealias NavCustomControlMessage = Int32
var kNavCtlShowDesktop: Int { get }
var kNavCtlSortBy: Int { get }
var kNavCtlSortOrder: Int { get }
var kNavCtlScrollHome: Int { get }
var kNavCtlScrollEnd: Int { get }
var kNavCtlPageUp: Int { get }
var kNavCtlPageDown: Int { get }
var kNavCtlGetLocation: Int { get }
var kNavCtlSetLocation: Int { get }
var kNavCtlGetSelection: Int { get }
var kNavCtlSetSelection: Int { get }
var kNavCtlShowSelection: Int { get }
var kNavCtlOpenSelection: Int { get }
var kNavCtlEjectVolume: Int { get }
var kNavCtlNewFolder: Int { get }
var kNavCtlCancel: Int { get }
var kNavCtlAccept: Int { get }
var kNavCtlIsPreviewShowing: Int { get }
var kNavCtlAddControl: Int { get }
var kNavCtlAddControlList: Int { get }
var kNavCtlGetFirstControlID: Int { get }
var kNavCtlSelectCustomType: Int { get }
var kNavCtlSelectAllType: Int { get }
var kNavCtlGetEditFileName: Int { get }
var kNavCtlSetEditFileName: Int { get }
var kNavCtlSelectEditFileName: Int { get }
var kNavCtlBrowserSelectAll: Int { get }
var kNavCtlGotoParent: Int { get }
var kNavCtlSetActionState: Int { get }
var kNavCtlBrowserRedraw: Int { get }
var kNavCtlTerminate: Int { get }
typealias NavActionState = UInt32
var kNavNormalState: Int { get }
var kNavDontOpenState: Int { get }
var kNavDontSaveState: Int { get }
var kNavDontChooseState: Int { get }
var kNavDontNewFolderState: Int { get }
typealias NavPopupMenuItem = UInt16
var kNavAllKnownFiles: Int { get }
var kNavAllReadableFiles: Int { get }
var kNavAllFiles: Int { get }
typealias NavSortKeyField = UInt16
var kNavSortNameField: Int { get }
var kNavSortDateField: Int { get }
typealias NavSortOrder = UInt16
var kNavSortAscending: Int { get }
var kNavSortDescending: Int { get }
typealias NavDialogOptionFlags = OptionBits
var kNavDefaultNavDlogOptions: Int { get }
var kNavNoTypePopup: Int { get }
var kNavDontAutoTranslate: Int { get }
var kNavDontAddTranslateItems: Int { get }
var kNavAllFilesInPopup: Int { get }
var kNavAllowStationery: Int { get }
var kNavAllowPreviews: Int { get }
var kNavAllowMultipleFiles: Int { get }
var kNavAllowInvisibleFiles: Int { get }
var kNavDontResolveAliases: Int { get }
var kNavSelectDefaultLocation: Int { get }
var kNavSelectAllReadableItem: Int { get }
var kNavSupportPackages: Int { get }
var kNavAllowOpenPackages: Int { get }
var kNavDontAddRecents: Int { get }
var kNavDontUseCustomFrame: Int { get }
var kNavDontConfirmReplacement: Int { get }
var kNavPreserveSaveFileExtension: Int { get }
typealias NavTranslationOptions = UInt32
var kNavTranslateInPlace: Int { get }
var kNavTranslateCopy: Int { get }
var kNavMenuItemSpecVersion: Int { get }
struct NavMenuItemSpec {
  var version: UInt16
  var menuCreator: OSType
  var menuType: OSType
  var menuItemName: Str255
  var reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  init()
  init(version: UInt16, menuCreator: OSType, menuType: OSType, menuItemName: Str255, reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}
typealias NavMenuItemSpecArrayPtr = UnsafeMutablePointer<NavMenuItemSpec>
typealias NavMenuItemSpecArrayHandle = UnsafeMutablePointer<NavMenuItemSpecArrayPtr>
typealias NavMenuItemSpecPtr = NavMenuItemSpecArrayPtr
typealias NavMenuItemSpecHandle = NavMenuItemSpecArrayHandle
var kNavGenericSignature: Int { get }
var kNavClientPopupExtensionTag: Int { get }
struct NavTypeList {
  var componentSignature: OSType
  var reserved: Int16
  var osTypeCount: Int16
  var osType: (OSType)
  init()
  init(componentSignature: OSType, reserved: Int16, osTypeCount: Int16, osType: (OSType))
}
typealias NavTypeListPtr = UnsafeMutablePointer<NavTypeList>
typealias NavTypeListHandle = UnsafeMutablePointer<NavTypeListPtr>
var kNavReplyRecordVersion: Int { get }
struct NavReplyRecord {
  var version: UInt16
  var validRecord: DarwinBoolean
  var replacing: DarwinBoolean
  var isStationery: DarwinBoolean
  var translationNeeded: DarwinBoolean
  var selection: AEDescList
  var keyScript: ScriptCode
  var fileTranslation: FileTranslationSpecArrayHandle
  var reserved1: UInt32
  var saveFileName: Unmanaged<CFString>!
  var saveFileExtensionHidden: DarwinBoolean
  var reserved2: UInt8
  var reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  init()
  init(version: UInt16, validRecord: DarwinBoolean, replacing: DarwinBoolean, isStationery: DarwinBoolean, translationNeeded: DarwinBoolean, selection: AEDescList, keyScript: ScriptCode, fileTranslation: FileTranslationSpecArrayHandle, reserved1: UInt32, saveFileName: Unmanaged<CFString>!, saveFileExtensionHidden: DarwinBoolean, reserved2: UInt8, reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}
var kNavDialogCreationOptionsVersion: Int { get }
struct NavDialogCreationOptions {
  var version: UInt16
  var optionFlags: NavDialogOptionFlags
  var location: Point
  var clientName: Unmanaged<CFString>!
  var windowTitle: Unmanaged<CFString>!
  var actionButtonLabel: Unmanaged<CFString>!
  var cancelButtonLabel: Unmanaged<CFString>!
  var saveFileName: Unmanaged<CFString>!
  var message: Unmanaged<CFString>!
  var preferenceKey: UInt32
  var popupExtension: Unmanaged<CFArray>!
  var modality: WindowModality
  var parentWindow: WindowRef
  var reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  init()
  init(version: UInt16, optionFlags: NavDialogOptionFlags, location: Point, clientName: Unmanaged<CFString>!, windowTitle: Unmanaged<CFString>!, actionButtonLabel: Unmanaged<CFString>!, cancelButtonLabel: Unmanaged<CFString>!, saveFileName: Unmanaged<CFString>!, message: Unmanaged<CFString>!, preferenceKey: UInt32, popupExtension: Unmanaged<CFArray>!, modality: WindowModality, parentWindow: WindowRef, reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}
var kNavDialogOptionsVersion: Int { get }
struct NavDialogOptions {
  var version: UInt16
  var dialogOptionFlags: NavDialogOptionFlags
  var location: Point
  var clientName: Str255
  var windowTitle: Str255
  var actionButtonLabel: Str255
  var cancelButtonLabel: Str255
  var savedFileName: Str255
  var message: Str255
  var preferenceKey: UInt32
  var popupExtension: NavMenuItemSpecArrayHandle
  var reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  init()
  init(version: UInt16, dialogOptionFlags: NavDialogOptionFlags, location: Point, clientName: Str255, windowTitle: Str255, actionButtonLabel: Str255, cancelButtonLabel: Str255, savedFileName: Str255, message: Str255, preferenceKey: UInt32, popupExtension: NavMenuItemSpecArrayHandle, reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}
var kOSAModeDontDefine: Int { get }
var kASSelectSetPropertyObsolete: Int { get }
var kASSelectGetPropertyObsolete: Int { get }
var kASSelectSetHandlerObsolete: Int { get }
var kASSelectGetHandlerObsolete: Int { get }
var kASSelectGetAppTerminologyObsolete: Int { get }
var kASSelectSetProperty: Int { get }
var kASSelectGetProperty: Int { get }
var kASSelectSetHandler: Int { get }
var kASSelectGetHandler: Int { get }
var kASSelectGetAppTerminology: Int { get }
var kASSelectGetSysTerminology: Int { get }
var kASSelectGetPropertyNames: Int { get }
var kASSelectGetHandlerNames: Int { get }
func OSASetProperty(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ contextID: OSAID, _ variableName: UnsafePointer<AEDesc>, _ scriptValueID: OSAID) -> OSAError
func OSAGetProperty(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ contextID: OSAID, _ variableName: UnsafePointer<AEDesc>, _ resultingScriptValueID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSAGetPropertyNames(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ contextID: OSAID, _ resultingPropertyNames: UnsafeMutablePointer<AEDescList>) -> OSAError
func OSASetHandler(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ contextID: OSAID, _ handlerName: UnsafePointer<AEDesc>, _ compiledScriptID: OSAID) -> OSAError
func OSAGetHandler(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ contextID: OSAID, _ handlerName: UnsafePointer<AEDesc>, _ resultingCompiledScriptID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSAGetHandlerNames(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ contextID: OSAID, _ resultingHandlerNames: UnsafeMutablePointer<AEDescList>) -> OSAError
func OSAGetSysTerminology(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ terminologyID: Int16, _ terminologyList: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSACopyScriptingDefinition(ref: UnsafePointer<FSRef>, _ modeFlags: Int32, _ sdef: UnsafeMutablePointer<Unmanaged<CFData>?>) -> OSAError
func OSACopyScriptingDefinitionFromURL(url: CFURL!, _ modeFlags: Int32, _ sdef: UnsafeMutablePointer<Unmanaged<CFData>?>) -> OSAError
var keyAETarget: Int { get }
var keySubjectAttr: Int { get }
var keyASReturning: Int { get }
var kASAppleScriptSuite: Int { get }
var kASScriptEditorSuite: Int { get }
var kASTypeNamesSuite: Int { get }
var typeAETE: Int { get }
var typeAEUT: Int { get }
var kGetAETE: Int { get }
var kGetAEUT: Int { get }
var kUpdateAEUT: Int { get }
var kUpdateAETE: Int { get }
var kCleanUpAEUT: Int { get }
var kASComment: Int { get }
var kASLaunchEvent: Int { get }
var keyScszResource: Int { get }
var typeScszResource: Int { get }
var kASSubroutineEvent: Int { get }
var keyASSubroutineName: Int { get }
var kASPrepositionalSubroutine: Int { get }
var keyASPositionalArgs: Int { get }
var keyAppHandledCoercion: Int { get }
var kASStartLogEvent: Int { get }
var kASStopLogEvent: Int { get }
var kASCommentEvent: Int { get }
var kASAdd: Int { get }
var kASSubtract: Int { get }
var kASMultiply: Int { get }
var kASDivide: Int { get }
var kASQuotient: Int { get }
var kASRemainder: Int { get }
var kASPower: Int { get }
var kASEqual: Int { get }
var kASNotEqual: Int { get }
var kASGreaterThan: Int { get }
var kASGreaterThanOrEqual: Int { get }
var kASLessThan: Int { get }
var kASLessThanOrEqual: Int { get }
var kASComesBefore: Int { get }
var kASComesAfter: Int { get }
var kASConcatenate: Int { get }
var kASStartsWith: Int { get }
var kASEndsWith: Int { get }
var kASContains: Int { get }
var kASAnd: Int { get }
var kASOr: Int { get }
var kASNot: Int { get }
var kASNegate: Int { get }
var keyASArg: Int { get }
var kASErrorEventCode: Int { get }
var kOSAErrorArgs: Int { get }
var keyAEErrorObject: Int { get }
var kASUseEventCode: Int { get }
var kASMinimumVersion: Int { get }
var kASImporting: Int { get }
var kASExcluding: Int { get }
var pLength: Int { get }
var pReverse: Int { get }
var pRest: Int { get }
var pInherits: Int { get }
var pProperties: Int { get }
var keyASUserRecordFields: Int { get }
var typeUserRecordFields: Int { get }
var keyASPrepositionAt: Int { get }
var keyASPrepositionIn: Int { get }
var keyASPrepositionFrom: Int { get }
var keyASPrepositionFor: Int { get }
var keyASPrepositionTo: Int { get }
var keyASPrepositionThru: Int { get }
var keyASPrepositionThrough: Int { get }
var keyASPrepositionBy: Int { get }
var keyASPrepositionOn: Int { get }
var keyASPrepositionInto: Int { get }
var keyASPrepositionOnto: Int { get }
var keyASPrepositionBetween: Int { get }
var keyASPrepositionAgainst: Int { get }
var keyASPrepositionOutOf: Int { get }
var keyASPrepositionInsteadOf: Int { get }
var keyASPrepositionAsideFrom: Int { get }
var keyASPrepositionAround: Int { get }
var keyASPrepositionBeside: Int { get }
var keyASPrepositionBeneath: Int { get }
var keyASPrepositionUnder: Int { get }
var keyASPrepositionOver: Int { get }
var keyASPrepositionAbove: Int { get }
var keyASPrepositionBelow: Int { get }
var keyASPrepositionApartFrom: Int { get }
var keyASPrepositionGiven: Int { get }
var keyASPrepositionWith: Int { get }
var keyASPrepositionWithout: Int { get }
var keyASPrepositionAbout: Int { get }
var keyASPrepositionSince: Int { get }
var keyASPrepositionUntil: Int { get }
var kDialectBundleResType: Int { get }
var cConstant: Int { get }
var cClassIdentifier: Int { get }
var cObjectBeingExamined: Int { get }
var cList: Int { get }
var cSmallReal: Int { get }
var cReal: Int { get }
var cRecord: Int { get }
var cReference: Int { get }
var cUndefined: Int { get }
var cMissingValue: Int { get }
var cSymbol: Int { get }
var cLinkedList: Int { get }
var cVector: Int { get }
var cEventIdentifier: Int { get }
var cKeyIdentifier: Int { get }
var cUserIdentifier: Int { get }
var cPreposition: Int { get }
var cKeyForm: Int { get }
var cScript: Int { get }
var cHandler: Int { get }
var cProcedure: Int { get }
var cFramework: Int { get }
var cDynamicLibrary: Int { get }
var cScriptingAddition: Int { get }
var cHandleBreakpoint: Int { get }
var cClosure: Int { get }
var cRawData: Int { get }
var cStringClass: Int { get }
var cNumber: Int { get }
var cListElement: Int { get }
var cListOrRecord: Int { get }
var cListOrString: Int { get }
var cListRecordOrString: Int { get }
var cNumberOrString: Int { get }
var cNumberOrDateTime: Int { get }
var cNumberDateTimeOrString: Int { get }
var cAliasOrString: Int { get }
var cSeconds: Int { get }
var typeSound: Int { get }
var enumBooleanValues: Int { get }
var kAETrue: Int { get }
var kAEFalse: Int { get }
var enumMiscValues: Int { get }
var kASCurrentApplication: Int { get }
var formUserPropertyID: Int { get }
var cString: Int { get }
var pASIt: Int { get }
var pASMe: Int { get }
var pASResult: Int { get }
var pASSpace: Int { get }
var pASReturn: Int { get }
var pASTab: Int { get }
var pASPi: Int { get }
var pASParent: Int { get }
var kASInitializeEventCode: Int { get }
var pASPrintLength: Int { get }
var pASPrintDepth: Int { get }
var pASTopLevelScript: Int { get }
var pASRequiredImportItems: Int { get }
var kAECase: Int { get }
var kAEDiacritic: Int { get }
var kAEWhiteSpace: Int { get }
var kAEHyphens: Int { get }
var kAEExpansion: Int { get }
var kAEPunctuation: Int { get }
var kAEZenkakuHankaku: Int { get }
var kAESmallKana: Int { get }
var kAEKataHiragana: Int { get }
var kASConsiderReplies: Int { get }
var kASNumericStrings: Int { get }
var enumConsiderations: Int { get }
var kAECaseConsiderMask: Int { get }
var kAEDiacriticConsiderMask: Int { get }
var kAEWhiteSpaceConsiderMask: Int { get }
var kAEHyphensConsiderMask: Int { get }
var kAEExpansionConsiderMask: Int { get }
var kAEPunctuationConsiderMask: Int { get }
var kASConsiderRepliesConsiderMask: Int { get }
var kASNumericStringsConsiderMask: Int { get }
var kAECaseIgnoreMask: Int { get }
var kAEDiacriticIgnoreMask: Int { get }
var kAEWhiteSpaceIgnoreMask: Int { get }
var kAEHyphensIgnoreMask: Int { get }
var kAEExpansionIgnoreMask: Int { get }
var kAEPunctuationIgnoreMask: Int { get }
var kASConsiderRepliesIgnoreMask: Int { get }
var kASNumericStringsIgnoreMask: Int { get }
var enumConsidsAndIgnores: Int { get }
var cCoercion: Int { get }
var cCoerceUpperCase: Int { get }
var cCoerceLowerCase: Int { get }
var cCoerceRemoveDiacriticals: Int { get }
var cCoerceRemovePunctuation: Int { get }
var cCoerceRemoveHyphens: Int { get }
var cCoerceOneByteToTwoByte: Int { get }
var cCoerceRemoveWhiteSpace: Int { get }
var cCoerceSmallKana: Int { get }
var cCoerceZenkakuhankaku: Int { get }
var cCoerceKataHiragana: Int { get }
var cZone: Int { get }
var cMachine: Int { get }
var cAddress: Int { get }
var cRunningAddress: Int { get }
var cStorage: Int { get }
var pASWeekday: Int { get }
var pASMonth: Int { get }
var pASDay: Int { get }
var pASYear: Int { get }
var pASTime: Int { get }
var pASDateString: Int { get }
var pASTimeString: Int { get }
var cMonth: Int { get }
var cJanuary: Int { get }
var cFebruary: Int { get }
var cMarch: Int { get }
var cApril: Int { get }
var cMay: Int { get }
var cJune: Int { get }
var cJuly: Int { get }
var cAugust: Int { get }
var cSeptember: Int { get }
var cOctober: Int { get }
var cNovember: Int { get }
var cDecember: Int { get }
var cWeekday: Int { get }
var cSunday: Int { get }
var cMonday: Int { get }
var cTuesday: Int { get }
var cWednesday: Int { get }
var cThursday: Int { get }
var cFriday: Int { get }
var cSaturday: Int { get }
var pASQuote: Int { get }
var pASSeconds: Int { get }
var pASMinutes: Int { get }
var pASHours: Int { get }
var pASDays: Int { get }
var pASWeeks: Int { get }
var cWritingCodeInfo: Int { get }
var pScriptCode: Int { get }
var pLangCode: Int { get }
var kASMagicTellEvent: Int { get }
var kASMagicEndTellEvent: Int { get }
var typeAppleScript: Int { get }
var kAppleScriptSubtype: Int { get }
var typeASStorage: Int { get }
var kASSelectInit: Int { get }
var kASSelectSetSourceStyles: Int { get }
var kASSelectGetSourceStyles: Int { get }
var kASSelectGetSourceStyleNames: Int { get }
var kASSelectCopySourceAttributes: Int { get }
var kASSelectSetSourceAttributes: Int { get }
var kASHasOpenHandler: Int { get }
func ASInit(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ minStackSize: UInt32, _ preferredStackSize: UInt32, _ maxStackSize: UInt32, _ minHeapSize: UInt32, _ preferredHeapSize: UInt32, _ maxHeapSize: UInt32) -> OSAError
var kASDefaultMinStackSize: Int { get }
var kASDefaultPreferredStackSize: Int { get }
var kASDefaultMaxStackSize: Int { get }
var kASDefaultMinHeapSize: Int { get }
var kASDefaultPreferredHeapSize: Int { get }
var kASDefaultMaxHeapSize: Int { get }
func ASCopySourceAttributes(scriptingComponent: ComponentInstance, _ resultingSourceAttributes: UnsafeMutablePointer<Unmanaged<CFArray>?>) -> OSAError
func ASSetSourceAttributes(scriptingComponent: ComponentInstance, _ sourceAttributes: CFArray!) -> OSAError
func ASGetSourceStyleNames(scriptingComponent: ComponentInstance, _ modeFlags: Int32, _ resultingSourceStyleNamesList: UnsafeMutablePointer<AEDescList>) -> OSAError
var kASSourceStyleUncompiledText: Int { get }
var kASSourceStyleNormalText: Int { get }
var kASSourceStyleLanguageKeyword: Int { get }
var kASSourceStyleApplicationKeyword: Int { get }
var kASSourceStyleComment: Int { get }
var kASSourceStyleLiteral: Int { get }
var kASSourceStyleUserSymbol: Int { get }
var kASSourceStyleObjectSpecifier: Int { get }
var kASSourceStyleString: Int { get }
var kASSourceStyleEventName: Int { get }
var kASSourceStyleParameterName: Int { get }
var kASSourceStyleClass: Int { get }
var kASSourceStyleProperty: Int { get }
var kASSourceStyleEnumValue: Int { get }
var kASSourceStyleDynamicEventName: Int { get }
var kASSourceStyleDynamicParameterName: Int { get }
var kASSourceStyleDynamicClass: Int { get }
var kASSourceStyleDynamicProperty: Int { get }
var kASSourceStyleDynamicEnumValue: Int { get }
var kASNumberOfSourceStyles: Int { get }
var kDigiHubEventClass: Int { get }
var kDigiHubMusicCD: Int { get }
var kDigiHubPictureCD: Int { get }
var kDigiHubVideoDVD: Int { get }
var kDigiHubBlankCD: Int { get }
var kDigiHubBlankDVD: Int { get }
var kAEFinderSuite: Int { get }
var kAECleanUp: Int { get }
var kAEEject: Int { get }
var kAEEmpty: Int { get }
var kAEErase: Int { get }
var kAEGestalt: Int { get }
var kAEPutAway: Int { get }
var kAERebuildDesktopDB: Int { get }
var kAESync: Int { get }
var kAEInterceptOpen: Int { get }
var kAEDatabaseSuite: Int { get }
var kAESort: Int { get }
var cInternalFinderObject: Int { get }
var cAliasFile: Int { get }
var cApplicationFile: Int { get }
var cControlPanelFile: Int { get }
var cDeskAccessoryFile: Int { get }
var cDocumentFile: Int { get }
var cFontFile: Int { get }
var cSoundFile: Int { get }
var cClippingFile: Int { get }
var cContainer: Int { get }
var cDesktop: Int { get }
var cSharableContainer: Int { get }
var cDisk: Int { get }
var cFolder: Int { get }
var cSuitcase: Int { get }
var cAccessorySuitcase: Int { get }
var cFontSuitcase: Int { get }
var cTrash: Int { get }
var cDesktopPrinter: Int { get }
var cPackage: Int { get }
var cContentSpace: Int { get }
var cContainerWindow: Int { get }
var cInfoWindow: Int { get }
var cSharingWindow: Int { get }
var cStatusWindow: Int { get }
var cClippingWindow: Int { get }
var cPreferencesWindow: Int { get }
var cDTPWindow: Int { get }
var cProcess: Int { get }
var cAccessoryProcess: Int { get }
var cApplicationProcess: Int { get }
var cGroup: Int { get }
var cUser: Int { get }
var cSharingPrivileges: Int { get }
var cPreferences: Int { get }
var cLabel: Int { get }
var cSound: Int { get }
var cAliasList: Int { get }
var cSpecialFolders: Int { get }
var cOnlineDisk: Int { get }
var cOnlineLocalDisk: Int { get }
var cOnlineRemoteDisk: Int { get }
var cEntireContents: Int { get }
var cIconFamily: Int { get }
var pComment: Int { get }
var pContainer: Int { get }
var pContentSpace: Int { get }
var pCreationDateOld: Int { get }
var pCreationDate: Int { get }
var pDescription: Int { get }
var pDisk: Int { get }
var pFolderOld: Int { get }
var pFolder: Int { get }
var pIconBitmap: Int { get }
var pInfoWindow: Int { get }
var pKind: Int { get }
var pLabelIndex: Int { get }
var pModificationDateOld: Int { get }
var pModificationDate: Int { get }
var pPhysicalSize: Int { get }
var pPosition: Int { get }
var pIsSelected: Int { get }
var pSize: Int { get }
var pWindow: Int { get }
var pPreferencesWindow: Int { get }
var pFileCreator: Int { get }
var pFileType: Int { get }
var pFileTypeOld: Int { get }
var pIsLocked: Int { get }
var pIsLockedOld: Int { get }
var pProductVersion: Int { get }
var pOriginalItem: Int { get }
var pMinAppPartition: Int { get }
var pAppPartition: Int { get }
var pSuggestedAppPartition: Int { get }
var pIsScriptable: Int { get }
var pInternetLocation: Int { get }
var pSound: Int { get }
var pShowFolderSize: Int { get }
var pShowComment: Int { get }
var pShowDate: Int { get }
var pShowCreationDate: Int { get }
var pShowKind: Int { get }
var pShowLabel: Int { get }
var pShowSize: Int { get }
var pShowVersion: Int { get }
var pSortDirection: Int { get }
var pShowDiskInfo: Int { get }
var pListViewIconSize: Int { get }
var pGridIcons: Int { get }
var pStaggerIcons: Int { get }
var pViewFont: Int { get }
var pViewFontSize: Int { get }
var pCompletelyExpanded: Int { get }
var pContainerWindow: Int { get }
var pEntireContents: Int { get }
var pExpandable: Int { get }
var pExpanded: Int { get }
var pPreviousView: Int { get }
var pView: Int { get }
var pIconSize: Int { get }
var pKeepArranged: Int { get }
var pKeepArrangedBy: Int { get }
var pStartupDisk: Int { get }
var pTrash: Int { get }
var pOwner: Int { get }
var pOwnerPrivileges: Int { get }
var pGroup: Int { get }
var pGroupPrivileges: Int { get }
var pGuestPrivileges: Int { get }
var pArePrivilegesInherited: Int { get }
var pExported: Int { get }
var pMounted: Int { get }
var pSharingProtection: Int { get }
var pSharing: Int { get }
var pSharingWindow: Int { get }
var pCapacity: Int { get }
var pEjectable: Int { get }
var pFreeSpace: Int { get }
var pLocal: Int { get }
var pIsStartup: Int { get }
var pWarnOnEmpty: Int { get }
var pIsZoomedFull: Int { get }
var pIsPopup: Int { get }
var pIsPulledOpen: Int { get }
var pIsCollapsed: Int { get }
var pObject: Int { get }
var pSharableContainer: Int { get }
var pInfoPanel: Int { get }
var pFileShareOn: Int { get }
var pFileShareStartingUp: Int { get }
var pProgramLinkingOn: Int { get }
var pShowModificationDate: Int { get }
var pUseRelativeDate: Int { get }
var pDelayBeforeSpringing: Int { get }
var pSpringOpenFolders: Int { get }
var pUseShortMenus: Int { get }
var pUseWideGrid: Int { get }
var pLabel1: Int { get }
var pLabel2: Int { get }
var pLabel3: Int { get }
var pLabel4: Int { get }
var pLabel5: Int { get }
var pLabel6: Int { get }
var pLabel7: Int { get }
var pDefaultIconViewIconSize: Int { get }
var pDefaultButtonViewIconSize: Int { get }
var pDefaultListViewIconSize: Int { get }
var pIconViewArrangement: Int { get }
var pButtonViewArrangement: Int { get }
var pNoArrangement: Int { get }
var pSnapToGridArrangement: Int { get }
var pByNameArrangement: Int { get }
var pByModificationDateArrangement: Int { get }
var pByCreationDateArrangement: Int { get }
var pBySizeArrangement: Int { get }
var pByKindArrangement: Int { get }
var pByLabelArrangement: Int { get }
var pFile: Int { get }
var pPartitionSpaceUsed: Int { get }
var pLocalAndRemoteEvents: Int { get }
var pHasScriptingTerminology: Int { get }
var pDeskAccessoryFile: Int { get }
var pApplicationFile: Int { get }
var pCanConnect: Int { get }
var pCanChangePassword: Int { get }
var pCanDoProgramLinking: Int { get }
var pIsOwner: Int { get }
var pARADialIn: Int { get }
var pShouldCallBack: Int { get }
var pCallBackNumber: Int { get }
var pAboutMacintosh: Int { get }
var pAppleMenuItemsFolder: Int { get }
var pControlPanelsFolder: Int { get }
var pDesktop: Int { get }
var pExtensionsFolder: Int { get }
var pFinderPreferences: Int { get }
var pFontsFolder: Int { get }
var pFontsFolderPreAllegro: Int { get }
var pLargestFreeBlock: Int { get }
var pPreferencesFolder: Int { get }
var pShortCuts: Int { get }
var pShutdownFolder: Int { get }
var pStartupItemsFolder: Int { get }
var pSystemFolder: Int { get }
var pTemporaryFolder: Int { get }
var pViewPreferences: Int { get }
var pStartingUp: Int { get }
var pSeeFiles: Int { get }
var pSeeFolders: Int { get }
var pMakeChanges: Int { get }
var pSmallIcon: Int { get }
var pSmallButton: Int { get }
var pLargeButton: Int { get }
var pGrid: Int { get }
var enumViewBy: Int { get }
var enumGestalt: Int { get }
var enumConflicts: Int { get }
var enumExistingItems: Int { get }
var enumOlderItems: Int { get }
var enumDate: Int { get }
var enumAnyDate: Int { get }
var enumToday: Int { get }
var enumYesterday: Int { get }
var enumThisWeek: Int { get }
var enumLastWeek: Int { get }
var enumThisMonth: Int { get }
var enumLastMonth: Int { get }
var enumThisYear: Int { get }
var enumLastYear: Int { get }
var enumBeforeDate: Int { get }
var enumAfterDate: Int { get }
var enumBetweenDate: Int { get }
var enumOnDate: Int { get }
var enumAllDocuments: Int { get }
var enumFolders: Int { get }
var enumAliases: Int { get }
var enumStationery: Int { get }
var enumWhere: Int { get }
var enumAllLocalDisks: Int { get }
var enumAllRemoteDisks: Int { get }
var enumAllDisks: Int { get }
var enumAllOpenFolders: Int { get }
var enumIconSize: Int { get }
var enumSmallIconSize: Int { get }
var enumMiniIconSize: Int { get }
var enumLargeIconSize: Int { get }
var enumSortDirection: Int { get }
var enumSortDirectionNormal: Int { get }
var enumSortDirectionReverse: Int { get }
var enumArrangement: Int { get }
var enumInfoWindowPanel: Int { get }
var enumGeneralPanel: Int { get }
var enumSharingPanel: Int { get }
var enumStatusNConfigPanel: Int { get }
var enumFontsPanel: Int { get }
var enumMemoryPanel: Int { get }
var enumPrefsWindowPanel: Int { get }
var enumPrefsGeneralPanel: Int { get }
var enumPrefsLabelPanel: Int { get }
var enumPrefsIconViewPanel: Int { get }
var enumPrefsButtonViewPanel: Int { get }
var enumPrefsListViewPanel: Int { get }
var typeIconFamily: Int { get }
var typeIconAndMask: Int { get }
var type8BitMask: Int { get }
var type32BitIcon: Int { get }
var type8BitIcon: Int { get }
var type4BitIcon: Int { get }
var typeSmallIconAndMask: Int { get }
var typeSmall8BitMask: Int { get }
var typeSmall32BitIcon: Int { get }
var typeSmall8BitIcon: Int { get }
var typeSmall4BitIcon: Int { get }
var typeRelativeTime: Int { get }
var typeConceptualTime: Int { get }
var keyIconAndMask: Int { get }
var key32BitIcon: Int { get }
var key8BitIcon: Int { get }
var key4BitIcon: Int { get }
var key8BitMask: Int { get }
var keySmallIconAndMask: Int { get }
var keySmall8BitIcon: Int { get }
var keySmall4BitIcon: Int { get }
var keySmall32BitIcon: Int { get }
var keySmall8BitMask: Int { get }
var keyMini1BitMask: Int { get }
var keyMini4BitIcon: Int { get }
var keyMini8BitIcon: Int { get }
var keyAEUsing: Int { get }
var keyAEReplacing: Int { get }
var keyAENoAutoRouting: Int { get }
var keyLocalPositionList: Int { get }
var keyGlobalPositionList: Int { get }
var keyRedirectedDocumentList: Int { get }
var keyASPrepositionHas: Int { get }
var keyAll: Int { get }
var keyOldFinderItems: Int { get }
var formAlias: Int { get }
var formCreator: Int { get }
var errFinderIsBusy: Int { get }
var errFinderWindowNotOpen: Int { get }
var errFinderCannotPutAway: Int { get }
var errFinderWindowMustBeIconView: Int { get }
var errFinderWindowMustBeListView: Int { get }
var errFinderCantMoveToDestination: Int { get }
var errFinderCantMoveSource: Int { get }
var errFinderCantOverwrite: Int { get }
var errFinderIncestuousMove: Int { get }
var errFinderCantMoveToAncestor: Int { get }
var errFinderCantUseTrashedItems: Int { get }
var errFinderItemAlreadyInDest: Int { get }
var errFinderUnknownUser: Int { get }
var errFinderSharePointsCantInherit: Int { get }
var errFinderWindowWrongType: Int { get }
var errFinderPropertyNowWindowBased: Int { get }
var errFinderAppFolderProtected: Int { get }
var errFinderSysFolderProtected: Int { get }
var errFinderBoundsWrong: Int { get }
var errAEValueOutOfRange: Int { get }
var errFinderPropertyDoesNotApply: Int { get }
var errFinderFileSharingMustBeOn: Int { get }
var errFinderMustBeActive: Int { get }
var errFinderVolumeNotFound: Int { get }
var errFinderLockedItemsInTrash: Int { get }
var errFinderOnlyLockedItemsInTrash: Int { get }
var errFinderProgramLinkingMustBeOn: Int { get }
var errFinderWindowMustBeButtonView: Int { get }
var errFinderBadPackageContents: Int { get }
var errFinderUnsupportedInsidePackages: Int { get }
var errFinderCorruptOpenFolderList: Int { get }
var errFinderNoInvisibleFiles: Int { get }
var errFinderCantDeleteImmediately: Int { get }
var errFinderLastReserved: Int { get }
var kOSAComponentType: Int { get }
var kOSAGenericScriptingComponentSubtype: Int { get }
var kOSAFileType: Int { get }
var kOSASuite: Int { get }
var kOSARecordedText: Int { get }
var kOSAScriptIsModified: Int { get }
var kOSAScriptIsTypeCompiledScript: Int { get }
var kOSAScriptIsTypeScriptValue: Int { get }
var kOSAScriptIsTypeScriptContext: Int { get }
var kOSAScriptBestType: Int { get }
var kOSACanGetSource: Int { get }
var typeOSADialectInfo: Int { get }
var keyOSADialectName: Int { get }
var keyOSADialectCode: Int { get }
var keyOSADialectLangCode: Int { get }
var keyOSADialectScriptCode: Int { get }
typealias OSAError = ComponentResult
typealias OSAID = UInt32
var kOSANullScript: Int { get }
var kOSANullMode: Int { get }
var kOSAModeNull: Int { get }
typealias OSACreateAppleEventProcPtr = @convention(c) (AEEventClass, AEEventID, UnsafePointer<AEAddressDesc>, Int16, Int32, UnsafeMutablePointer<AppleEvent>, SRefCon) -> OSErr
typealias OSASendProcPtr = @convention(c) (UnsafePointer<AppleEvent>, UnsafeMutablePointer<AppleEvent>, AESendMode, AESendPriority, Int32, AEIdleUPP!, AEFilterUPP!, SRefCon) -> OSErr
typealias OSACreateAppleEventUPP = OSACreateAppleEventProcPtr
typealias OSASendUPP = OSASendProcPtr
func NewOSACreateAppleEventUPP(userRoutine: OSACreateAppleEventProcPtr!) -> OSACreateAppleEventUPP!
func NewOSASendUPP(userRoutine: OSASendProcPtr!) -> OSASendUPP!
func DisposeOSACreateAppleEventUPP(userUPP: OSACreateAppleEventUPP!)
func DisposeOSASendUPP(userUPP: OSASendUPP!)
func InvokeOSACreateAppleEventUPP(theAEEventClass: AEEventClass, _ theAEEventID: AEEventID, _ target: UnsafePointer<AEAddressDesc>, _ returnID: Int16, _ transactionID: Int32, _ result: UnsafeMutablePointer<AppleEvent>, _ refCon: SRefCon, _ userUPP: OSACreateAppleEventUPP!) -> OSErr
func InvokeOSASendUPP(theAppleEvent: UnsafePointer<AppleEvent>, _ reply: UnsafeMutablePointer<AppleEvent>, _ sendMode: AESendMode, _ sendPriority: AESendPriority, _ timeOutInTicks: Int32, _ idleProc: AEIdleUPP!, _ filterProc: AEFilterUPP!, _ refCon: SRefCon, _ userUPP: OSASendUPP!) -> OSErr
var kOSASupportsCompiling: Int { get }
var kOSASupportsGetSource: Int { get }
var kOSASupportsAECoercion: Int { get }
var kOSASupportsAESending: Int { get }
var kOSASupportsRecording: Int { get }
var kOSASupportsConvenience: Int { get }
var kOSASupportsDialects: Int { get }
var kOSASupportsEventHandling: Int { get }
var kOSASelectLoad: Int { get }
var kOSASelectStore: Int { get }
var kOSASelectExecute: Int { get }
var kOSASelectDisplay: Int { get }
var kOSASelectScriptError: Int { get }
var kOSASelectDispose: Int { get }
var kOSASelectSetScriptInfo: Int { get }
var kOSASelectGetScriptInfo: Int { get }
var kOSASelectSetActiveProc: Int { get }
var kOSASelectGetActiveProc: Int { get }
var kOSASelectCopyDisplayString: Int { get }
var kOSASelectScriptingComponentName: Int { get }
var kOSASelectCompile: Int { get }
var kOSASelectCopyID: Int { get }
var kOSASelectCopyScript: Int { get }
var kOSASelectGetSource: Int { get }
var kOSASelectCopySourceString: Int { get }
var kOSASelectCoerceFromDesc: Int { get }
var kOSASelectCoerceToDesc: Int { get }
var kOSASelectSetSendProc: Int { get }
var kOSASelectGetSendProc: Int { get }
var kOSASelectSetCreateProc: Int { get }
var kOSASelectGetCreateProc: Int { get }
var kOSASelectSetDefaultTarget: Int { get }
var kOSASelectStartRecording: Int { get }
var kOSASelectStopRecording: Int { get }
var kOSASelectLoadExecute: Int { get }
var kOSASelectCompileExecute: Int { get }
var kOSASelectDoScript: Int { get }
var kOSASelectSetCurrentDialect: Int { get }
var kOSASelectGetCurrentDialect: Int { get }
var kOSASelectAvailableDialects: Int { get }
var kOSASelectGetDialectInfo: Int { get }
var kOSASelectAvailableDialectCodeList: Int { get }
var kOSASelectSetResumeDispatchProc: Int { get }
var kOSASelectGetResumeDispatchProc: Int { get }
var kOSASelectExecuteEvent: Int { get }
var kOSASelectDoEvent: Int { get }
var kOSASelectMakeContext: Int { get }
var kOSASelectComponentSpecificStart: Int { get }
var kOSAModePreventGetSource: Int { get }
var kOSAModeNeverInteract: Int { get }
var kOSAModeCanInteract: Int { get }
var kOSAModeAlwaysInteract: Int { get }
var kOSAModeDontReconnect: Int { get }
var kOSAModeCantSwitchLayer: Int { get }
var kOSAModeDoRecord: Int { get }
var kOSAModeCompileIntoContext: Int { get }
var kOSAModeAugmentContext: Int { get }
var kOSAModeDisplayForHumans: Int { get }
var kOSAModeDontStoreParent: Int { get }
var kOSAModeDispatchToDirectObject: Int { get }
var kOSAModeDontGetDataForArguments: Int { get }
var kOSAModeFullyQualifyDescriptors: Int { get }
var kOSAScriptResourceType: Int { get }
var typeOSAGenericStorage: Int { get }
func OSALoad(scriptingComponent: ComponentInstance, _ scriptData: UnsafePointer<AEDesc>, _ modeFlags: Int32, _ resultingScriptID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSAStore(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ desiredType: DescType, _ modeFlags: Int32, _ resultingScriptData: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSAExecute(scriptingComponent: ComponentInstance, _ compiledScriptID: OSAID, _ contextID: OSAID, _ modeFlags: Int32, _ resultingScriptValueID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSADisplay(scriptingComponent: ComponentInstance, _ scriptValueID: OSAID, _ desiredType: DescType, _ modeFlags: Int32, _ resultingText: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSACopyDisplayString(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ modeFlags: Int32, _ result: UnsafeMutablePointer<Unmanaged<CFAttributedString>?>) -> OSAError
func OSAScriptError(scriptingComponent: ComponentInstance, _ selector: OSType, _ desiredType: DescType, _ resultingErrorDescription: UnsafeMutablePointer<AEDesc>) -> OSAError
var kOSAErrorNumber: Int { get }
var kOSAErrorMessage: Int { get }
var kOSAErrorBriefMessage: Int { get }
var kOSAErrorApp: Int { get }
var kOSAErrorPartialResult: Int { get }
var kOSAErrorOffendingObject: Int { get }
var kOSAErrorExpectedType: Int { get }
var kOSAErrorRange: Int { get }
var typeOSAErrorRange: Int { get }
var keyOSASourceStart: Int { get }
var keyOSASourceEnd: Int { get }
func OSADispose(scriptingComponent: ComponentInstance, _ scriptID: OSAID) -> OSAError
func OSASetScriptInfo(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ selector: OSType, _ value: Int) -> OSAError
func OSAGetScriptInfo(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ selector: OSType, _ result: UnsafeMutablePointer<Int>) -> OSAError
typealias OSAActiveProcPtr = @convention(c) (SRefCon) -> OSErr
typealias OSAActiveUPP = OSAActiveProcPtr
func NewOSAActiveUPP(userRoutine: OSAActiveProcPtr!) -> OSAActiveUPP!
func DisposeOSAActiveUPP(userUPP: OSAActiveUPP!)
func InvokeOSAActiveUPP(refCon: SRefCon, _ userUPP: OSAActiveUPP!) -> OSErr
func OSASetActiveProc(scriptingComponent: ComponentInstance, _ activeProc: OSAActiveUPP!, _ refCon: SRefCon) -> OSAError
func OSAGetActiveProc(scriptingComponent: ComponentInstance, _ activeProc: UnsafeMutablePointer<OSAActiveUPP?>, _ refCon: UnsafeMutablePointer<SRefCon>) -> OSAError
func OSAScriptingComponentName(scriptingComponent: ComponentInstance, _ resultingScriptingComponentName: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSACompile(scriptingComponent: ComponentInstance, _ sourceData: UnsafePointer<AEDesc>, _ modeFlags: Int32, _ previousAndResultingScriptID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSACopyID(scriptingComponent: ComponentInstance, _ fromID: OSAID, _ toID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSACopyScript(scriptingComponent: ComponentInstance, _ fromID: OSAID, _ toID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSAGetSource(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ desiredType: DescType, _ resultingSourceData: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSACopySourceString(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ modeFlags: Int32, _ result: UnsafeMutablePointer<Unmanaged<CFAttributedString>?>) -> OSAError
func OSACoerceFromDesc(scriptingComponent: ComponentInstance, _ scriptData: UnsafePointer<AEDesc>, _ modeFlags: Int32, _ resultingScriptID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSACoerceToDesc(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ desiredType: DescType, _ modeFlags: Int32, _ result: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSASetSendProc(scriptingComponent: ComponentInstance, _ sendProc: OSASendUPP!, _ refCon: SRefCon) -> OSAError
func OSAGetSendProc(scriptingComponent: ComponentInstance, _ sendProc: UnsafeMutablePointer<OSASendUPP?>, _ refCon: UnsafeMutablePointer<SRefCon>) -> OSAError
func OSASetCreateProc(scriptingComponent: ComponentInstance, _ createProc: OSACreateAppleEventUPP!, _ refCon: SRefCon) -> OSAError
func OSAGetCreateProc(scriptingComponent: ComponentInstance, _ createProc: UnsafeMutablePointer<OSACreateAppleEventUPP?>, _ refCon: UnsafeMutablePointer<SRefCon>) -> OSAError
func OSASetDefaultTarget(scriptingComponent: ComponentInstance, _ target: UnsafePointer<AEAddressDesc>) -> OSAError
func OSAStartRecording(scriptingComponent: ComponentInstance, _ compiledScriptToModifyID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSAStopRecording(scriptingComponent: ComponentInstance, _ compiledScriptID: OSAID) -> OSAError
func OSALoadExecute(scriptingComponent: ComponentInstance, _ scriptData: UnsafePointer<AEDesc>, _ contextID: OSAID, _ modeFlags: Int32, _ resultingScriptValueID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSACompileExecute(scriptingComponent: ComponentInstance, _ sourceData: UnsafePointer<AEDesc>, _ contextID: OSAID, _ modeFlags: Int32, _ resultingScriptValueID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSADoScript(scriptingComponent: ComponentInstance, _ sourceData: UnsafePointer<AEDesc>, _ contextID: OSAID, _ desiredType: DescType, _ modeFlags: Int32, _ resultingText: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSASetCurrentDialect(scriptingComponent: ComponentInstance, _ dialectCode: Int16) -> OSAError
func OSAGetCurrentDialect(scriptingComponent: ComponentInstance, _ resultingDialectCode: UnsafeMutablePointer<Int16>) -> OSAError
func OSAAvailableDialects(scriptingComponent: ComponentInstance, _ resultingDialectInfoList: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSAGetDialectInfo(scriptingComponent: ComponentInstance, _ dialectCode: Int16, _ selector: OSType, _ resultingDialectInfo: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSAAvailableDialectCodeList(scriptingComponent: ComponentInstance, _ resultingDialectCodeList: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSASetResumeDispatchProc(scriptingComponent: ComponentInstance, _ resumeDispatchProc: AEEventHandlerUPP!, _ refCon: SRefCon) -> OSAError
var kOSAUseStandardDispatch: Int { get }
var kOSANoDispatch: Int { get }
var kOSADontUsePhac: Int { get }
func OSAGetResumeDispatchProc(scriptingComponent: ComponentInstance, _ resumeDispatchProc: UnsafeMutablePointer<AEEventHandlerUPP?>, _ refCon: UnsafeMutablePointer<SRefCon>) -> OSAError
func OSAExecuteEvent(scriptingComponent: ComponentInstance, _ theAppleEvent: UnsafePointer<AppleEvent>, _ contextID: OSAID, _ modeFlags: Int32, _ resultingScriptValueID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSADoEvent(scriptingComponent: ComponentInstance, _ theAppleEvent: UnsafePointer<AppleEvent>, _ contextID: OSAID, _ modeFlags: Int32, _ reply: UnsafeMutablePointer<AppleEvent>) -> OSAError
func OSAMakeContext(scriptingComponent: ComponentInstance, _ contextName: UnsafePointer<AEDesc>, _ parentContext: OSAID, _ resultingContextID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSAGetScriptDataFromURL(scriptURL: CFURL!, _ storable: UnsafeMutablePointer<DarwinBoolean>, _ modeFlags: Int32, _ resultingScriptData: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSALoadScriptData(scriptingComponent: ComponentInstance, _ scriptData: UnsafePointer<AEDesc>, _ fromURL: CFURL!, _ modeFlags: Int32, _ resultingScriptID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSALoadFile(scriptingComponent: ComponentInstance, _ scriptFile: UnsafePointer<FSRef>, _ storable: UnsafeMutablePointer<DarwinBoolean>, _ modeFlags: Int32, _ resultingScriptID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSAStoreFile(scriptingComponent: ComponentInstance, _ scriptID: OSAID, _ desiredType: DescType, _ modeFlags: Int32, _ scriptFile: UnsafePointer<FSRef>) -> OSAError
func OSALoadExecuteFile(scriptingComponent: ComponentInstance, _ scriptFile: UnsafePointer<FSRef>, _ contextID: OSAID, _ modeFlags: Int32, _ resultingScriptValueID: UnsafeMutablePointer<OSAID>) -> OSAError
func OSADoScriptFile(scriptingComponent: ComponentInstance, _ scriptFile: UnsafePointer<FSRef>, _ contextID: OSAID, _ desiredType: DescType, _ modeFlags: Int32, _ resultingText: UnsafeMutablePointer<AEDesc>) -> OSAError
func OSAGetStorageType(scriptData: AEDataStorage, _ dscType: UnsafeMutablePointer<DescType>) -> OSErr
func OSAAddStorageType(scriptData: AEDataStorage, _ dscType: DescType) -> OSErr
func OSARemoveStorageType(scriptData: AEDataStorage) -> OSErr
var kGenericComponentVersion: Int { get }
var kGSSSelectGetDefaultScriptingComponent: Int { get }
var kGSSSelectSetDefaultScriptingComponent: Int { get }
var kGSSSelectGetScriptingComponent: Int { get }
var kGSSSelectGetScriptingComponentFromStored: Int { get }
var kGSSSelectGenericToRealID: Int { get }
var kGSSSelectRealToGenericID: Int { get }
var kGSSSelectOutOfRange: Int { get }
typealias ScriptingComponentSelector = OSType
typealias GenericID = OSAID
func OSAGetDefaultScriptingComponent(genericScriptingComponent: ComponentInstance, _ scriptingSubType: UnsafeMutablePointer<ScriptingComponentSelector>) -> OSAError
func OSASetDefaultScriptingComponent(genericScriptingComponent: ComponentInstance, _ scriptingSubType: ScriptingComponentSelector) -> OSAError
func OSAGetScriptingComponent(genericScriptingComponent: ComponentInstance, _ scriptingSubType: ScriptingComponentSelector, _ scriptingInstance: UnsafeMutablePointer<ComponentInstance>) -> OSAError
func OSAGetScriptingComponentFromStored(genericScriptingComponent: ComponentInstance, _ scriptData: UnsafePointer<AEDesc>, _ scriptingSubType: UnsafeMutablePointer<ScriptingComponentSelector>) -> OSAError
func OSAGenericToRealID(genericScriptingComponent: ComponentInstance, _ theScriptID: UnsafeMutablePointer<OSAID>, _ theExactComponent: UnsafeMutablePointer<ComponentInstance>) -> OSAError
func OSARealToGenericID(genericScriptingComponent: ComponentInstance, _ theScriptID: UnsafeMutablePointer<OSAID>, _ theExactComponent: ComponentInstance) -> OSAError
var typeSecIdentityRef: Int { get }
typealias URLReference = COpaquePointer
typealias URLOpenFlags = UInt32
var kURLReplaceExistingFlag: UInt32 { get }
var kURLBinHexFileFlag: UInt32 { get }
var kURLExpandFileFlag: UInt32 { get }
var kURLDisplayProgressFlag: UInt32 { get }
var kURLDisplayAuthFlag: UInt32 { get }
var kURLUploadFlag: UInt32 { get }
var kURLIsDirectoryHintFlag: UInt32 { get }
var kURLDoNotTryAnonymousFlag: UInt32 { get }
var kURLDirectoryListingFlag: UInt32 { get }
var kURLExpandAndVerifyFlag: UInt32 { get }
var kURLNoAutoRedirectFlag: UInt32 { get }
var kURLDebinhexOnlyFlag: UInt32 { get }
var kURLDoNotDeleteOnErrorFlag: UInt32 { get }
var kURLResumeDownloadFlag: UInt32 { get }
var kURLReservedFlag: UInt32 { get }
typealias URLState = UInt32
var kURLNullState: Int { get }
var kURLInitiatingState: Int { get }
var kURLLookingUpHostState: Int { get }
var kURLConnectingState: Int { get }
var kURLResourceFoundState: Int { get }
var kURLDownloadingState: Int { get }
var kURLDataAvailableState: Int { get }
var kURLTransactionCompleteState: Int { get }
var kURLErrorOccurredState: Int { get }
var kURLAbortingState: Int { get }
var kURLCompletedState: Int { get }
var kURLUploadingState: Int { get }
typealias URLEvent = UInt32
var kURLInitiatedEvent: Int { get }
var kURLResourceFoundEvent: Int { get }
var kURLDownloadingEvent: Int { get }
var kURLAbortInitiatedEvent: Int { get }
var kURLCompletedEvent: Int { get }
var kURLErrorOccurredEvent: Int { get }
var kURLDataAvailableEvent: Int { get }
var kURLTransactionCompleteEvent: Int { get }
var kURLUploadingEvent: Int { get }
var kURLSystemEvent: Int { get }
var kURLPercentEvent: Int { get }
var kURLPeriodicEvent: Int { get }
var kURLPropertyChangedEvent: Int { get }
typealias URLEventMask = UInt
var kURLInitiatedEventMask: Int { get }
var kURLResourceFoundEventMask: Int { get }
var kURLDownloadingMask: Int { get }
var kURLUploadingMask: Int { get }
var kURLAbortInitiatedMask: Int { get }
var kURLCompletedEventMask: Int { get }
var kURLErrorOccurredEventMask: Int { get }
var kURLDataAvailableEventMask: Int { get }
var kURLTransactionCompleteEventMask: Int { get }
var kURLSystemEventMask: Int { get }
var kURLPercentEventMask: Int { get }
var kURLPeriodicEventMask: Int { get }
var kURLPropertyChangedEventMask: Int { get }
var kURLAllBufferEventsMask: Int { get }
var kURLAllNonBufferEventsMask: Int { get }
var kURLAllEventsMask: Int { get }
struct URLCallbackInfo {
  var version: UInt32
  var urlRef: URLReference
  var property: UnsafePointer<Int8>
  var currentSize: UInt32
  var systemEvent: UnsafeMutablePointer<EventRecord>
  init()
  init(version: UInt32, urlRef: URLReference, property: UnsafePointer<Int8>, currentSize: UInt32, systemEvent: UnsafeMutablePointer<EventRecord>)
}
var kUserNameAndPasswordFlag: Int { get }
var kURLURL: String { get }
var kURLResourceSize: String { get }
var kURLLastModifiedTime: String { get }
var kURLMIMEType: String { get }
var kURLFileType: String { get }
var kURLFileCreator: String { get }
var kURLCharacterSet: String { get }
var kURLResourceName: String { get }
var kURLHost: String { get }
var kURLAuthType: String { get }
var kURLUserName: String { get }
var kURLPassword: String { get }
var kURLStatusString: String { get }
var kURLIsSecure: String { get }
var kURLCertificate: String { get }
var kURLTotalItems: String { get }
var kURLConnectTimeout: String { get }
var kURLHTTPRequestMethod: String { get }
var kURLHTTPRequestHeader: String { get }
var kURLHTTPRequestBody: String { get }
var kURLHTTPRespHeader: String { get }
var kURLHTTPUserAgent: String { get }
var kURLHTTPRedirectedURL: String { get }
var kURLSSLCipherSuite: String { get }
typealias URLNotifyProcPtr = @convention(c) (UnsafeMutablePointer<Void>, URLEvent, UnsafeMutablePointer<URLCallbackInfo>) -> OSStatus
typealias URLSystemEventProcPtr = @convention(c) (UnsafeMutablePointer<Void>, UnsafeMutablePointer<EventRecord>) -> OSStatus
typealias URLNotifyUPP = URLNotifyProcPtr
typealias URLSystemEventUPP = URLSystemEventProcPtr
var kSRNotAvailable: Int { get }
var kSRInternalError: Int { get }
var kSRComponentNotFound: Int { get }
var kSROutOfMemory: Int { get }
var kSRNotASpeechObject: Int { get }
var kSRBadParameter: Int { get }
var kSRParamOutOfRange: Int { get }
var kSRBadSelector: Int { get }
var kSRBufferTooSmall: Int { get }
var kSRNotARecSystem: Int { get }
var kSRFeedbackNotAvail: Int { get }
var kSRCantSetProperty: Int { get }
var kSRCantGetProperty: Int { get }
var kSRCantSetDuringRecognition: Int { get }
var kSRAlreadyListening: Int { get }
var kSRNotListeningState: Int { get }
var kSRModelMismatch: Int { get }
var kSRNoClientLanguageModel: Int { get }
var kSRNoPendingUtterances: Int { get }
var kSRRecognitionCanceled: Int { get }
var kSRRecognitionDone: Int { get }
var kSROtherRecAlreadyModal: Int { get }
var kSRHasNoSubItems: Int { get }
var kSRSubItemNotFound: Int { get }
var kSRLanguageModelTooBig: Int { get }
var kSRAlreadyReleased: Int { get }
var kSRAlreadyFinished: Int { get }
var kSRWordNotFound: Int { get }
var kSRNotFinishedWithRejection: Int { get }
var kSRExpansionTooDeep: Int { get }
var kSRTooManyElements: Int { get }
var kSRCantAdd: Int { get }
var kSRSndInSourceDisconnected: Int { get }
var kSRCantReadLanguageObject: Int { get }
var kSRNotImplementedYet: Int { get }
typealias SRSpeechObject = COpaquePointer
typealias SRRecognitionSystem = SRSpeechObject
typealias SRRecognizer = SRSpeechObject
typealias SRSpeechSource = SRSpeechObject
typealias SRRecognitionResult = SRSpeechSource
typealias SRLanguageObject = SRSpeechObject
typealias SRLanguageModel = SRLanguageObject
typealias SRPath = SRLanguageObject
typealias SRPhrase = SRLanguageObject
typealias SRWord = SRLanguageObject
typealias SRSpeedSetting = UInt16
typealias SRRejectionLevel = UInt16
struct SRCallBackStruct {
  var what: UInt32
  var message: Int
  var instance: SRRecognizer
  var status: OSErr
  var flags: Int16
  var refCon: SRefCon
  init()
  init(what: UInt32, message: Int, instance: SRRecognizer, status: OSErr, flags: Int16, refCon: SRefCon)
}
typealias SRCallBackProcPtr = @convention(c) (UnsafeMutablePointer<SRCallBackStruct>) -> Void
typealias SRCallBackUPP = SRCallBackProcPtr
func NewSRCallBackUPP(userRoutine: SRCallBackProcPtr!) -> SRCallBackUPP!
func DisposeSRCallBackUPP(userUPP: SRCallBackUPP!)
func InvokeSRCallBackUPP(param: UnsafeMutablePointer<SRCallBackStruct>, _ userUPP: SRCallBackUPP!)
struct SRCallBackParam {
  var callBack: SRCallBackUPP!
  var refCon: SRefCon
  init()
  init(callBack: SRCallBackUPP!, refCon: SRefCon)
}
var kSRDefaultRecognitionSystemID: Int { get }
var kSRFeedbackAndListeningModes: Int { get }
var kSRRejectedWord: Int { get }
var kSRCleanupOnClientExit: Int { get }
var kSRNoFeedbackNoListenModes: Int { get }
var kSRHasFeedbackHasListenModes: Int { get }
var kSRNoFeedbackHasListenModes: Int { get }
var kSRDefaultSpeechSource: Int { get }
var kSRLiveDesktopSpeechSource: Int { get }
var kSRCanned22kHzSpeechSource: Int { get }
var kSRNotifyRecognitionBeginning: Int { get }
var kSRNotifyRecognitionDone: Int { get }
var kAESpeechSuite: Int { get }
var kAESpeechDone: Int { get }
var kAESpeechDetected: Int { get }
var keySRRecognizer: Int { get }
var keySRSpeechResult: Int { get }
var keySRSpeechStatus: Int { get }
var typeSRRecognizer: Int { get }
var typeSRSpeechResult: Int { get }
var kSRNotificationParam: Int { get }
var kSRCallBackParam: Int { get }
var kSRSearchStatusParam: Int { get }
var kSRAutoFinishingParam: Int { get }
var kSRForegroundOnly: Int { get }
var kSRBlockBackground: Int { get }
var kSRBlockModally: Int { get }
var kSRWantsResultTextDrawn: Int { get }
var kSRWantsAutoFBGestures: Int { get }
var kSRSoundInVolume: Int { get }
var kSRReadAudioFSSpec: Int { get }
var kSRReadAudioURL: Int { get }
var kSRCancelOnSoundOut: Int { get }
var kSRSpeedVsAccuracyParam: Int { get }
var kSRUseToggleListen: Int { get }
var kSRUsePushToTalk: Int { get }
var kSRListenKeyMode: Int { get }
var kSRListenKeyCombo: Int { get }
var kSRListenKeyName: Int { get }
var kSRKeyWord: Int { get }
var kSRKeyExpected: Int { get }
var kSRIdleRecognizer: Int { get }
var kSRSearchInProgress: Int { get }
var kSRSearchWaitForAllClients: Int { get }
var kSRMustCancelSearch: Int { get }
var kSRPendingSearch: Int { get }
var kSRTEXTFormat: Int { get }
var kSRPhraseFormat: Int { get }
var kSRPathFormat: Int { get }
var kSRLanguageModelFormat: Int { get }
var kSRSpelling: Int { get }
var kSRLMObjType: Int { get }
var kSRRefCon: Int { get }
var kSROptional: Int { get }
var kSREnabled: Int { get }
var kSRRepeatable: Int { get }
var kSRRejectable: Int { get }
var kSRRejectionLevel: Int { get }
var kSRLanguageModelType: Int { get }
var kSRPathType: Int { get }
var kSRPhraseType: Int { get }
var kSRWordType: Int { get }
var kSRDefaultRejectionLevel: Int { get }
func SROpenRecognitionSystem(system: UnsafeMutablePointer<SRRecognitionSystem>, _ systemID: OSType) -> OSErr
func SRCloseRecognitionSystem(system: SRRecognitionSystem) -> OSErr
func SRSetProperty(srObject: SRSpeechObject, _ selector: OSType, _ property: UnsafePointer<Void>, _ propertyLen: Size) -> OSErr
func SRGetProperty(srObject: SRSpeechObject, _ selector: OSType, _ property: UnsafeMutablePointer<Void>, _ propertyLen: UnsafeMutablePointer<Size>) -> OSErr
func SRReleaseObject(srObject: SRSpeechObject) -> OSErr
func SRGetReference(srObject: SRSpeechObject, _ newObjectRef: UnsafeMutablePointer<SRSpeechObject>) -> OSErr
func SRNewRecognizer(system: SRRecognitionSystem, _ recognizer: UnsafeMutablePointer<SRRecognizer>, _ sourceID: OSType) -> OSErr
func SRStartListening(recognizer: SRRecognizer) -> OSErr
func SRStopListening(recognizer: SRRecognizer) -> OSErr
func SRSetLanguageModel(recognizer: SRRecognizer, _ languageModel: SRLanguageModel) -> OSErr
func SRGetLanguageModel(recognizer: SRRecognizer, _ languageModel: UnsafeMutablePointer<SRLanguageModel>) -> OSErr
func SRContinueRecognition(recognizer: SRRecognizer) -> OSErr
func SRCancelRecognition(recognizer: SRRecognizer) -> OSErr
func SRIdle() -> OSErr
func SRNewLanguageModel(system: SRRecognitionSystem, _ model: UnsafeMutablePointer<SRLanguageModel>, _ name: UnsafePointer<Void>, _ nameLength: Int32) -> OSErr
func SRNewPath(system: SRRecognitionSystem, _ path: UnsafeMutablePointer<SRPath>) -> OSErr
func SRNewPhrase(system: SRRecognitionSystem, _ phrase: UnsafeMutablePointer<SRPhrase>, _ text: UnsafePointer<Void>, _ textLength: Int32) -> OSErr
func SRNewWord(system: SRRecognitionSystem, _ word: UnsafeMutablePointer<SRWord>, _ text: UnsafePointer<Void>, _ textLength: Int32) -> OSErr
func SRPutLanguageObjectIntoHandle(languageObject: SRLanguageObject, _ lobjHandle: Handle) -> OSErr
func SRPutLanguageObjectIntoDataFile(languageObject: SRLanguageObject, _ fRefNum: Int16) -> OSErr
func SRNewLanguageObjectFromHandle(system: SRRecognitionSystem, _ languageObject: UnsafeMutablePointer<SRLanguageObject>, _ lObjHandle: Handle) -> OSErr
func SRNewLanguageObjectFromDataFile(system: SRRecognitionSystem, _ languageObject: UnsafeMutablePointer<SRLanguageObject>, _ fRefNum: Int16) -> OSErr
func SREmptyLanguageObject(languageObject: SRLanguageObject) -> OSErr
func SRChangeLanguageObject(languageObject: SRLanguageObject, _ text: UnsafePointer<Void>, _ textLength: Int32) -> OSErr
func SRAddLanguageObject(base: SRLanguageObject, _ addon: SRLanguageObject) -> OSErr
func SRAddText(base: SRLanguageObject, _ text: UnsafePointer<Void>, _ textLength: Int32, _ refCon: SRefCon) -> OSErr
func SRRemoveLanguageObject(base: SRLanguageObject, _ toRemove: SRLanguageObject) -> OSErr
func SRCountItems(container: SRSpeechObject, _ count: UnsafeMutablePointer<Int>) -> OSErr
func SRGetIndexedItem(container: SRSpeechObject, _ item: UnsafeMutablePointer<SRSpeechObject>, _ index: Int) -> OSErr
func SRSetIndexedItem(container: SRSpeechObject, _ item: SRSpeechObject, _ index: Int) -> OSErr
func SRRemoveIndexedItem(container: SRSpeechObject, _ index: Int) -> OSErr
func SRDrawText(recognizer: SRRecognizer, _ dispText: UnsafePointer<Void>, _ dispLength: Int32) -> OSErr
func SRDrawRecognizedText(recognizer: SRRecognizer, _ dispText: UnsafePointer<Void>, _ dispLength: Int32) -> OSErr
func SRSpeakText(recognizer: SRRecognizer, _ speakText: UnsafePointer<Void>, _ speakLength: Int32) -> OSErr
func SRSpeakAndDrawText(recognizer: SRRecognizer, _ text: UnsafePointer<Void>, _ textLength: Int32) -> OSErr
func SRStopSpeech(recognizer: SRRecognizer) -> OSErr
func SRSpeechBusy(recognizer: SRRecognizer) -> Bool
func SRProcessBegin(recognizer: SRRecognizer, _ failed: Bool) -> OSErr
func SRProcessEnd(recognizer: SRRecognizer, _ failed: Bool) -> OSErr
